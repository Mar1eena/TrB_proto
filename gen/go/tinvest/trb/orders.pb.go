// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: tinvest/trb/orders.proto

package trb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Направление операции.
type OrderDirection int32

const (
	OrderDirection_ORDER_DIRECTION_UNSPECIFIED OrderDirection = 0 //Значение не указано
	OrderDirection_ORDER_DIRECTION_BUY         OrderDirection = 1 //Покупка
	OrderDirection_ORDER_DIRECTION_SELL        OrderDirection = 2 //Продажа
)

// Enum value maps for OrderDirection.
var (
	OrderDirection_name = map[int32]string{
		0: "ORDER_DIRECTION_UNSPECIFIED",
		1: "ORDER_DIRECTION_BUY",
		2: "ORDER_DIRECTION_SELL",
	}
	OrderDirection_value = map[string]int32{
		"ORDER_DIRECTION_UNSPECIFIED": 0,
		"ORDER_DIRECTION_BUY":         1,
		"ORDER_DIRECTION_SELL":        2,
	}
)

func (x OrderDirection) Enum() *OrderDirection {
	p := new(OrderDirection)
	*p = x
	return p
}

func (x OrderDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_tinvest_trb_orders_proto_enumTypes[0].Descriptor()
}

func (OrderDirection) Type() protoreflect.EnumType {
	return &file_tinvest_trb_orders_proto_enumTypes[0]
}

func (x OrderDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderDirection.Descriptor instead.
func (OrderDirection) EnumDescriptor() ([]byte, []int) {
	return file_tinvest_trb_orders_proto_rawDescGZIP(), []int{0}
}

// Тип заявки.
type OrderType int32

const (
	OrderType_ORDER_TYPE_UNSPECIFIED OrderType = 0 //Значение не указано
	OrderType_ORDER_TYPE_LIMIT       OrderType = 1 //Лимитная
	OrderType_ORDER_TYPE_MARKET      OrderType = 2 //Рыночная
	OrderType_ORDER_TYPE_BESTPRICE   OrderType = 3 //Лучшая цена
)

// Enum value maps for OrderType.
var (
	OrderType_name = map[int32]string{
		0: "ORDER_TYPE_UNSPECIFIED",
		1: "ORDER_TYPE_LIMIT",
		2: "ORDER_TYPE_MARKET",
		3: "ORDER_TYPE_BESTPRICE",
	}
	OrderType_value = map[string]int32{
		"ORDER_TYPE_UNSPECIFIED": 0,
		"ORDER_TYPE_LIMIT":       1,
		"ORDER_TYPE_MARKET":      2,
		"ORDER_TYPE_BESTPRICE":   3,
	}
)

func (x OrderType) Enum() *OrderType {
	p := new(OrderType)
	*p = x
	return p
}

func (x OrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_tinvest_trb_orders_proto_enumTypes[1].Descriptor()
}

func (OrderType) Type() protoreflect.EnumType {
	return &file_tinvest_trb_orders_proto_enumTypes[1]
}

func (x OrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderType.Descriptor instead.
func (OrderType) EnumDescriptor() ([]byte, []int) {
	return file_tinvest_trb_orders_proto_rawDescGZIP(), []int{1}
}

// Текущий статус заявки (поручения)
type OrderExecutionReportStatus int32

const (
	OrderExecutionReportStatus_EXECUTION_REPORT_STATUS_UNSPECIFIED   OrderExecutionReportStatus = 0
	OrderExecutionReportStatus_EXECUTION_REPORT_STATUS_FILL          OrderExecutionReportStatus = 1 //Исполнена
	OrderExecutionReportStatus_EXECUTION_REPORT_STATUS_REJECTED      OrderExecutionReportStatus = 2 //Отклонена
	OrderExecutionReportStatus_EXECUTION_REPORT_STATUS_CANCELLED     OrderExecutionReportStatus = 3 //Отменена пользователем
	OrderExecutionReportStatus_EXECUTION_REPORT_STATUS_NEW           OrderExecutionReportStatus = 4 //Новая
	OrderExecutionReportStatus_EXECUTION_REPORT_STATUS_PARTIALLYFILL OrderExecutionReportStatus = 5 //Частично исполнена
)

// Enum value maps for OrderExecutionReportStatus.
var (
	OrderExecutionReportStatus_name = map[int32]string{
		0: "EXECUTION_REPORT_STATUS_UNSPECIFIED",
		1: "EXECUTION_REPORT_STATUS_FILL",
		2: "EXECUTION_REPORT_STATUS_REJECTED",
		3: "EXECUTION_REPORT_STATUS_CANCELLED",
		4: "EXECUTION_REPORT_STATUS_NEW",
		5: "EXECUTION_REPORT_STATUS_PARTIALLYFILL",
	}
	OrderExecutionReportStatus_value = map[string]int32{
		"EXECUTION_REPORT_STATUS_UNSPECIFIED":   0,
		"EXECUTION_REPORT_STATUS_FILL":          1,
		"EXECUTION_REPORT_STATUS_REJECTED":      2,
		"EXECUTION_REPORT_STATUS_CANCELLED":     3,
		"EXECUTION_REPORT_STATUS_NEW":           4,
		"EXECUTION_REPORT_STATUS_PARTIALLYFILL": 5,
	}
)

func (x OrderExecutionReportStatus) Enum() *OrderExecutionReportStatus {
	p := new(OrderExecutionReportStatus)
	*p = x
	return p
}

func (x OrderExecutionReportStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderExecutionReportStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_tinvest_trb_orders_proto_enumTypes[2].Descriptor()
}

func (OrderExecutionReportStatus) Type() protoreflect.EnumType {
	return &file_tinvest_trb_orders_proto_enumTypes[2]
}

func (x OrderExecutionReportStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderExecutionReportStatus.Descriptor instead.
func (OrderExecutionReportStatus) EnumDescriptor() ([]byte, []int) {
	return file_tinvest_trb_orders_proto_rawDescGZIP(), []int{2}
}

// Алгоритм исполнения заявки
type TimeInForceType int32

const (
	TimeInForceType_TIME_IN_FORCE_UNSPECIFIED   TimeInForceType = 0 //Значение не определено см. TIME_IN_FORCE_DAY
	TimeInForceType_TIME_IN_FORCE_DAY           TimeInForceType = 1 //Заявка действует до конца торгового дня. Значение по умолчанию
	TimeInForceType_TIME_IN_FORCE_FILL_AND_KILL TimeInForceType = 2 //Если в момент выставления возможно исполнение заявки(в т.ч. частичное), заявка будет исполнена или отменена сразу после выставления
	TimeInForceType_TIME_IN_FORCE_FILL_OR_KILL  TimeInForceType = 3 //Если в момент выставления возможно полное исполнение заявки, заявка будет исполнена или отменена сразу после выставления, недоступно для срочного рынка и торговли по выходным
)

// Enum value maps for TimeInForceType.
var (
	TimeInForceType_name = map[int32]string{
		0: "TIME_IN_FORCE_UNSPECIFIED",
		1: "TIME_IN_FORCE_DAY",
		2: "TIME_IN_FORCE_FILL_AND_KILL",
		3: "TIME_IN_FORCE_FILL_OR_KILL",
	}
	TimeInForceType_value = map[string]int32{
		"TIME_IN_FORCE_UNSPECIFIED":   0,
		"TIME_IN_FORCE_DAY":           1,
		"TIME_IN_FORCE_FILL_AND_KILL": 2,
		"TIME_IN_FORCE_FILL_OR_KILL":  3,
	}
)

func (x TimeInForceType) Enum() *TimeInForceType {
	p := new(TimeInForceType)
	*p = x
	return p
}

func (x TimeInForceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimeInForceType) Descriptor() protoreflect.EnumDescriptor {
	return file_tinvest_trb_orders_proto_enumTypes[3].Descriptor()
}

func (TimeInForceType) Type() protoreflect.EnumType {
	return &file_tinvest_trb_orders_proto_enumTypes[3]
}

func (x TimeInForceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimeInForceType.Descriptor instead.
func (TimeInForceType) EnumDescriptor() ([]byte, []int) {
	return file_tinvest_trb_orders_proto_rawDescGZIP(), []int{3}
}

// Тип идентификатора заявки
type OrderIdType int32

const (
	OrderIdType_ORDER_ID_TYPE_UNSPECIFIED OrderIdType = 0 //Тип идентификатора не указан.
	OrderIdType_ORDER_ID_TYPE_EXCHANGE    OrderIdType = 1 //Биржевой идентификатор
	OrderIdType_ORDER_ID_TYPE_REQUEST     OrderIdType = 2 //Ключ идемпотентности, переданный клиентом
)

// Enum value maps for OrderIdType.
var (
	OrderIdType_name = map[int32]string{
		0: "ORDER_ID_TYPE_UNSPECIFIED",
		1: "ORDER_ID_TYPE_EXCHANGE",
		2: "ORDER_ID_TYPE_REQUEST",
	}
	OrderIdType_value = map[string]int32{
		"ORDER_ID_TYPE_UNSPECIFIED": 0,
		"ORDER_ID_TYPE_EXCHANGE":    1,
		"ORDER_ID_TYPE_REQUEST":     2,
	}
)

func (x OrderIdType) Enum() *OrderIdType {
	p := new(OrderIdType)
	*p = x
	return p
}

func (x OrderIdType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderIdType) Descriptor() protoreflect.EnumDescriptor {
	return file_tinvest_trb_orders_proto_enumTypes[4].Descriptor()
}

func (OrderIdType) Type() protoreflect.EnumType {
	return &file_tinvest_trb_orders_proto_enumTypes[4]
}

func (x OrderIdType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderIdType.Descriptor instead.
func (OrderIdType) EnumDescriptor() ([]byte, []int) {
	return file_tinvest_trb_orders_proto_rawDescGZIP(), []int{4}
}

// Маркер
type OrderStateStreamResponse_MarkerType int32

const (
	OrderStateStreamResponse_MARKER_UNKNOWN OrderStateStreamResponse_MarkerType = 0 //не определено
	OrderStateStreamResponse_MARKER_BROKER  OrderStateStreamResponse_MarkerType = 1 //сделки брокера
	OrderStateStreamResponse_MARKER_CHAT    OrderStateStreamResponse_MarkerType = 2 //исполнение поручение, полученного от клиента через каналы связи
	OrderStateStreamResponse_MARKER_PAPER   OrderStateStreamResponse_MarkerType = 3 //исполнение поручение, полученного от клиента в бумажной форме
	OrderStateStreamResponse_MARKER_MARGIN  OrderStateStreamResponse_MarkerType = 4 //принудительное закрытие позиций
	OrderStateStreamResponse_MARKER_TKBNM   OrderStateStreamResponse_MarkerType = 5 //сделки по управлению ликвидностью
	OrderStateStreamResponse_MARKER_SHORT   OrderStateStreamResponse_MarkerType = 6 //сделки РЕПО по привлечению у клиентов бумаг
	OrderStateStreamResponse_MARKER_SPECMM  OrderStateStreamResponse_MarkerType = 7 //перенос временно непокрытых позиций
	OrderStateStreamResponse_MARKER_PO      OrderStateStreamResponse_MarkerType = 8
)

// Enum value maps for OrderStateStreamResponse_MarkerType.
var (
	OrderStateStreamResponse_MarkerType_name = map[int32]string{
		0: "MARKER_UNKNOWN",
		1: "MARKER_BROKER",
		2: "MARKER_CHAT",
		3: "MARKER_PAPER",
		4: "MARKER_MARGIN",
		5: "MARKER_TKBNM",
		6: "MARKER_SHORT",
		7: "MARKER_SPECMM",
		8: "MARKER_PO",
	}
	OrderStateStreamResponse_MarkerType_value = map[string]int32{
		"MARKER_UNKNOWN": 0,
		"MARKER_BROKER":  1,
		"MARKER_CHAT":    2,
		"MARKER_PAPER":   3,
		"MARKER_MARGIN":  4,
		"MARKER_TKBNM":   5,
		"MARKER_SHORT":   6,
		"MARKER_SPECMM":  7,
		"MARKER_PO":      8,
	}
)

func (x OrderStateStreamResponse_MarkerType) Enum() *OrderStateStreamResponse_MarkerType {
	p := new(OrderStateStreamResponse_MarkerType)
	*p = x
	return p
}

func (x OrderStateStreamResponse_MarkerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderStateStreamResponse_MarkerType) Descriptor() protoreflect.EnumDescriptor {
	return file_tinvest_trb_orders_proto_enumTypes[5].Descriptor()
}

func (OrderStateStreamResponse_MarkerType) Type() protoreflect.EnumType {
	return &file_tinvest_trb_orders_proto_enumTypes[5]
}

func (x OrderStateStreamResponse_MarkerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderStateStreamResponse_MarkerType.Descriptor instead.
func (OrderStateStreamResponse_MarkerType) EnumDescriptor() ([]byte, []int) {
	return file_tinvest_trb_orders_proto_rawDescGZIP(), []int{22, 0}
}

// Дополнительная информация по статусу заявки
type OrderStateStreamResponse_StatusCauseInfo int32

const (
	OrderStateStreamResponse_CAUSE_UNSPECIFIED                   OrderStateStreamResponse_StatusCauseInfo = 0  //Не определено
	OrderStateStreamResponse_CAUSE_CANCELLED_BY_CLIENT           OrderStateStreamResponse_StatusCauseInfo = 15 //Отменено клиентом
	OrderStateStreamResponse_CAUSE_CANCELLED_BY_EXCHANGE         OrderStateStreamResponse_StatusCauseInfo = 1  //Отменено биржей
	OrderStateStreamResponse_CAUSE_CANCELLED_NOT_ENOUGH_POSITION OrderStateStreamResponse_StatusCauseInfo = 2  //Заявка не выставлена из-за нехватки средств
	OrderStateStreamResponse_CAUSE_CANCELLED_BY_CLIENT_BLOCK     OrderStateStreamResponse_StatusCauseInfo = 3  //Отменено из-за блокировки клиента
	OrderStateStreamResponse_CAUSE_REJECTED_BY_BROKER            OrderStateStreamResponse_StatusCauseInfo = 4  //Отклонено брокером
	OrderStateStreamResponse_CAUSE_REJECTED_BY_EXCHANGE          OrderStateStreamResponse_StatusCauseInfo = 5  //Отклонено биржей
	OrderStateStreamResponse_CAUSE_CANCELLED_BY_BROKER           OrderStateStreamResponse_StatusCauseInfo = 6  //Отменено брокером
)

// Enum value maps for OrderStateStreamResponse_StatusCauseInfo.
var (
	OrderStateStreamResponse_StatusCauseInfo_name = map[int32]string{
		0:  "CAUSE_UNSPECIFIED",
		15: "CAUSE_CANCELLED_BY_CLIENT",
		1:  "CAUSE_CANCELLED_BY_EXCHANGE",
		2:  "CAUSE_CANCELLED_NOT_ENOUGH_POSITION",
		3:  "CAUSE_CANCELLED_BY_CLIENT_BLOCK",
		4:  "CAUSE_REJECTED_BY_BROKER",
		5:  "CAUSE_REJECTED_BY_EXCHANGE",
		6:  "CAUSE_CANCELLED_BY_BROKER",
	}
	OrderStateStreamResponse_StatusCauseInfo_value = map[string]int32{
		"CAUSE_UNSPECIFIED":                   0,
		"CAUSE_CANCELLED_BY_CLIENT":           15,
		"CAUSE_CANCELLED_BY_EXCHANGE":         1,
		"CAUSE_CANCELLED_NOT_ENOUGH_POSITION": 2,
		"CAUSE_CANCELLED_BY_CLIENT_BLOCK":     3,
		"CAUSE_REJECTED_BY_BROKER":            4,
		"CAUSE_REJECTED_BY_EXCHANGE":          5,
		"CAUSE_CANCELLED_BY_BROKER":           6,
	}
)

func (x OrderStateStreamResponse_StatusCauseInfo) Enum() *OrderStateStreamResponse_StatusCauseInfo {
	p := new(OrderStateStreamResponse_StatusCauseInfo)
	*p = x
	return p
}

func (x OrderStateStreamResponse_StatusCauseInfo) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderStateStreamResponse_StatusCauseInfo) Descriptor() protoreflect.EnumDescriptor {
	return file_tinvest_trb_orders_proto_enumTypes[6].Descriptor()
}

func (OrderStateStreamResponse_StatusCauseInfo) Type() protoreflect.EnumType {
	return &file_tinvest_trb_orders_proto_enumTypes[6]
}

func (x OrderStateStreamResponse_StatusCauseInfo) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderStateStreamResponse_StatusCauseInfo.Descriptor instead.
func (OrderStateStreamResponse_StatusCauseInfo) EnumDescriptor() ([]byte, []int) {
	return file_tinvest_trb_orders_proto_rawDescGZIP(), []int{22, 1}
}

// Запрос установки соединения.
type TradesStreamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Accounts      []string               `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`                                    //Идентификаторы счетов.
	PingDelayMs   *int32                 `protobuf:"varint,15,opt,name=ping_delay_ms,json=pingDelayMs,proto3,oneof" json:"ping_delay_ms,omitempty"` //Задержка (пинг) сообщений: 5000–180 000 миллисекунд. Значение по умолчанию — 120 000.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TradesStreamRequest) Reset() {
	*x = TradesStreamRequest{}
	mi := &file_tinvest_trb_orders_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradesStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradesStreamRequest) ProtoMessage() {}

func (x *TradesStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_orders_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradesStreamRequest.ProtoReflect.Descriptor instead.
func (*TradesStreamRequest) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_orders_proto_rawDescGZIP(), []int{0}
}

func (x *TradesStreamRequest) GetAccounts() []string {
	if x != nil {
		return x.Accounts
	}
	return nil
}

func (x *TradesStreamRequest) GetPingDelayMs() int32 {
	if x != nil && x.PingDelayMs != nil {
		return *x.PingDelayMs
	}
	return 0
}

// Информация о торговых поручениях.
type TradesStreamResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Payload:
	//
	//	*TradesStreamResponse_OrderTrades
	//	*TradesStreamResponse_Ping
	//	*TradesStreamResponse_Subscription
	Payload       isTradesStreamResponse_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TradesStreamResponse) Reset() {
	*x = TradesStreamResponse{}
	mi := &file_tinvest_trb_orders_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradesStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradesStreamResponse) ProtoMessage() {}

func (x *TradesStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_orders_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradesStreamResponse.ProtoReflect.Descriptor instead.
func (*TradesStreamResponse) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_orders_proto_rawDescGZIP(), []int{1}
}

func (x *TradesStreamResponse) GetPayload() isTradesStreamResponse_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *TradesStreamResponse) GetOrderTrades() *OrderTrades {
	if x != nil {
		if x, ok := x.Payload.(*TradesStreamResponse_OrderTrades); ok {
			return x.OrderTrades
		}
	}
	return nil
}

func (x *TradesStreamResponse) GetPing() *Ping {
	if x != nil {
		if x, ok := x.Payload.(*TradesStreamResponse_Ping); ok {
			return x.Ping
		}
	}
	return nil
}

func (x *TradesStreamResponse) GetSubscription() *SubscriptionResponse {
	if x != nil {
		if x, ok := x.Payload.(*TradesStreamResponse_Subscription); ok {
			return x.Subscription
		}
	}
	return nil
}

type isTradesStreamResponse_Payload interface {
	isTradesStreamResponse_Payload()
}

type TradesStreamResponse_OrderTrades struct {
	OrderTrades *OrderTrades `protobuf:"bytes,1,opt,name=order_trades,json=orderTrades,proto3,oneof"` //Информация об исполнении торгового поручения.
}

type TradesStreamResponse_Ping struct {
	Ping *Ping `protobuf:"bytes,2,opt,name=ping,proto3,oneof"` //Проверка активности стрима.
}

type TradesStreamResponse_Subscription struct {
	Subscription *SubscriptionResponse `protobuf:"bytes,3,opt,name=subscription,proto3,oneof"` //Ответ на запрос на подписку.
}

func (*TradesStreamResponse_OrderTrades) isTradesStreamResponse_Payload() {}

func (*TradesStreamResponse_Ping) isTradesStreamResponse_Payload() {}

func (*TradesStreamResponse_Subscription) isTradesStreamResponse_Payload() {}

// Информация об исполнении торгового поручения.
type OrderTrades struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OrderId       string                 `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                   //Идентификатор торгового поручения.
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`             //Дата и время создания сообщения в часовом поясе UTC.
	Direction     OrderDirection         `protobuf:"varint,3,opt,name=direction,proto3,enum=tinvest.OrderDirection" json:"direction,omitempty"` //Направление сделки.
	Figi          string                 `protobuf:"bytes,4,opt,name=figi,proto3" json:"figi,omitempty"`                                        //Figi-идентификатор инструмента.
	Trades        []*OrderTrade          `protobuf:"bytes,5,rep,name=trades,proto3" json:"trades,omitempty"`                                    //Массив сделок.
	AccountId     string                 `protobuf:"bytes,6,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`             //Идентификатор счета.
	InstrumentUid string                 `protobuf:"bytes,7,opt,name=instrument_uid,json=instrumentUid,proto3" json:"instrument_uid,omitempty"` //UID идентификатор инструмента.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrderTrades) Reset() {
	*x = OrderTrades{}
	mi := &file_tinvest_trb_orders_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderTrades) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderTrades) ProtoMessage() {}

func (x *OrderTrades) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_orders_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderTrades.ProtoReflect.Descriptor instead.
func (*OrderTrades) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_orders_proto_rawDescGZIP(), []int{2}
}

func (x *OrderTrades) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *OrderTrades) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *OrderTrades) GetDirection() OrderDirection {
	if x != nil {
		return x.Direction
	}
	return OrderDirection_ORDER_DIRECTION_UNSPECIFIED
}

func (x *OrderTrades) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *OrderTrades) GetTrades() []*OrderTrade {
	if x != nil {
		return x.Trades
	}
	return nil
}

func (x *OrderTrades) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *OrderTrades) GetInstrumentUid() string {
	if x != nil {
		return x.InstrumentUid
	}
	return ""
}

// Информация о сделке.
type OrderTrade struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DateTime      *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3" json:"date_time,omitempty"` //Дата и время совершения сделки в часовом поясе UTC.
	Price         *Quotation             `protobuf:"bytes,2,opt,name=price,proto3" json:"price,omitempty"`                       //Цена за 1 инструмент, по которой совершена сделка.
	Quantity      int64                  `protobuf:"varint,3,opt,name=quantity,proto3" json:"quantity,omitempty"`                //Количество штук в сделке.
	TradeId       string                 `protobuf:"bytes,4,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`    //Идентификатор сделки.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrderTrade) Reset() {
	*x = OrderTrade{}
	mi := &file_tinvest_trb_orders_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderTrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderTrade) ProtoMessage() {}

func (x *OrderTrade) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_orders_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderTrade.ProtoReflect.Descriptor instead.
func (*OrderTrade) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_orders_proto_rawDescGZIP(), []int{3}
}

func (x *OrderTrade) GetDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DateTime
	}
	return nil
}

func (x *OrderTrade) GetPrice() *Quotation {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *OrderTrade) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *OrderTrade) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

// Запрос выставления торгового поручения.
type PostOrderRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated: Marked as deprecated in tinvest/trb/orders.proto.
	Figi          *string         `protobuf:"bytes,1,opt,name=figi,proto3,oneof" json:"figi,omitempty"`                                                            //Deprecated Figi-идентификатор инструмента. Необходимо использовать instrument_id.
	Quantity      int64           `protobuf:"varint,2,opt,name=quantity,proto3" json:"quantity,omitempty"`                                                         //Количество лотов.
	Price         *Quotation      `protobuf:"bytes,3,opt,name=price,proto3,oneof" json:"price,omitempty"`                                                          //Цена за 1 инструмент. Для получения стоимости лота требуется умножить на лотность инструмента. Игнорируется для рыночных поручений.
	Direction     OrderDirection  `protobuf:"varint,4,opt,name=direction,proto3,enum=tinvest.OrderDirection" json:"direction,omitempty"`                           //Направление операции.
	AccountId     string          `protobuf:"bytes,5,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`                                       //Номер счета.
	OrderType     OrderType       `protobuf:"varint,6,opt,name=order_type,json=orderType,proto3,enum=tinvest.OrderType" json:"order_type,omitempty"`               //Тип заявки.
	OrderId       string          `protobuf:"bytes,7,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                                             //Идентификатор запроса выставления поручения для целей идемпотентности в формате UID. Максимальная длина 36 символов.
	InstrumentId  string          `protobuf:"bytes,8,opt,name=instrument_id,json=instrumentId,proto3" json:"instrument_id,omitempty"`                              //Идентификатор инструмента, принимает значения Figi или Instrument_uid.
	TimeInForce   TimeInForceType `protobuf:"varint,9,opt,name=time_in_force,json=timeInForce,proto3,enum=tinvest.TimeInForceType" json:"time_in_force,omitempty"` //Алгоритм исполнения поручения, применяется только к лимитной заявке.
	PriceType     PriceType       `protobuf:"varint,10,opt,name=price_type,json=priceType,proto3,enum=tinvest.PriceType" json:"price_type,omitempty"`              //Тип цены.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PostOrderRequest) Reset() {
	*x = PostOrderRequest{}
	mi := &file_tinvest_trb_orders_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostOrderRequest) ProtoMessage() {}

func (x *PostOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_orders_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostOrderRequest.ProtoReflect.Descriptor instead.
func (*PostOrderRequest) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_orders_proto_rawDescGZIP(), []int{4}
}

// Deprecated: Marked as deprecated in tinvest/trb/orders.proto.
func (x *PostOrderRequest) GetFigi() string {
	if x != nil && x.Figi != nil {
		return *x.Figi
	}
	return ""
}

func (x *PostOrderRequest) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *PostOrderRequest) GetPrice() *Quotation {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *PostOrderRequest) GetDirection() OrderDirection {
	if x != nil {
		return x.Direction
	}
	return OrderDirection_ORDER_DIRECTION_UNSPECIFIED
}

func (x *PostOrderRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *PostOrderRequest) GetOrderType() OrderType {
	if x != nil {
		return x.OrderType
	}
	return OrderType_ORDER_TYPE_UNSPECIFIED
}

func (x *PostOrderRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *PostOrderRequest) GetInstrumentId() string {
	if x != nil {
		return x.InstrumentId
	}
	return ""
}

func (x *PostOrderRequest) GetTimeInForce() TimeInForceType {
	if x != nil {
		return x.TimeInForce
	}
	return TimeInForceType_TIME_IN_FORCE_UNSPECIFIED
}

func (x *PostOrderRequest) GetPriceType() PriceType {
	if x != nil {
		return x.PriceType
	}
	return PriceType_PRICE_TYPE_UNSPECIFIED
}

// Информация о выставлении поручения.
type PostOrderResponse struct {
	state                 protoimpl.MessageState     `protogen:"open.v1"`
	OrderId               string                     `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                                                                                      //Биржевой идентификатор заявки.
	ExecutionReportStatus OrderExecutionReportStatus `protobuf:"varint,2,opt,name=execution_report_status,json=executionReportStatus,proto3,enum=tinvest.OrderExecutionReportStatus" json:"execution_report_status,omitempty"` //Текущий статус заявки.
	LotsRequested         int64                      `protobuf:"varint,3,opt,name=lots_requested,json=lotsRequested,proto3" json:"lots_requested,omitempty"`                                                                   //Запрошено лотов.
	LotsExecuted          int64                      `protobuf:"varint,4,opt,name=lots_executed,json=lotsExecuted,proto3" json:"lots_executed,omitempty"`                                                                      //Исполнено лотов.
	InitialOrderPrice     *MoneyValue                `protobuf:"bytes,5,opt,name=initial_order_price,json=initialOrderPrice,proto3" json:"initial_order_price,omitempty"`                                                      //Начальная цена заявки. Произведение количества запрошенных лотов на цену.
	ExecutedOrderPrice    *MoneyValue                `protobuf:"bytes,6,opt,name=executed_order_price,json=executedOrderPrice,proto3" json:"executed_order_price,omitempty"`                                                   //Исполненная средняя цена одного инструмента в заявке.
	TotalOrderAmount      *MoneyValue                `protobuf:"bytes,7,opt,name=total_order_amount,json=totalOrderAmount,proto3" json:"total_order_amount,omitempty"`                                                         //Итоговая стоимость заявки, включающая все комиссии.
	InitialCommission     *MoneyValue                `protobuf:"bytes,8,opt,name=initial_commission,json=initialCommission,proto3" json:"initial_commission,omitempty"`                                                        //Начальная комиссия. Комиссия рассчитанная при выставлении заявки.
	ExecutedCommission    *MoneyValue                `protobuf:"bytes,9,opt,name=executed_commission,json=executedCommission,proto3" json:"executed_commission,omitempty"`                                                     //Фактическая комиссия по итогам исполнения заявки.
	AciValue              *MoneyValue                `protobuf:"bytes,10,opt,name=aci_value,json=aciValue,proto3" json:"aci_value,omitempty"`                                                                                  //Значение НКД (накопленного купонного дохода) на дату. Подробнее: [НКД при выставлении торговых поручений](./head-orders#coupon)
	Figi                  string                     `protobuf:"bytes,11,opt,name=figi,proto3" json:"figi,omitempty"`                                                                                                          // Figi-идентификатор инструмента.
	Direction             OrderDirection             `protobuf:"varint,12,opt,name=direction,proto3,enum=tinvest.OrderDirection" json:"direction,omitempty"`                                                                   //Направление сделки.
	InitialSecurityPrice  *MoneyValue                `protobuf:"bytes,13,opt,name=initial_security_price,json=initialSecurityPrice,proto3" json:"initial_security_price,omitempty"`                                            //Начальная цена за 1 инструмент. Для получения стоимости лота требуется умножить на лотность инструмента.
	OrderType             OrderType                  `protobuf:"varint,14,opt,name=order_type,json=orderType,proto3,enum=tinvest.OrderType" json:"order_type,omitempty"`                                                       //Тип заявки.
	Message               string                     `protobuf:"bytes,15,opt,name=message,proto3" json:"message,omitempty"`                                                                                                    //Дополнительные данные об исполнении заявки.
	InitialOrderPricePt   *Quotation                 `protobuf:"bytes,16,opt,name=initial_order_price_pt,json=initialOrderPricePt,proto3" json:"initial_order_price_pt,omitempty"`                                             //Начальная цена заявки в пунктах (для фьючерсов).
	InstrumentUid         string                     `protobuf:"bytes,17,opt,name=instrument_uid,json=instrumentUid,proto3" json:"instrument_uid,omitempty"`                                                                   //UID идентификатор инструмента.
	OrderRequestId        string                     `protobuf:"bytes,20,opt,name=order_request_id,json=orderRequestId,proto3" json:"order_request_id,omitempty"`                                                              //Идентификатор ключа идемпотентности, переданный клиентом, в формате UID. Максимальная длина 36 символов.
	ResponseMetadata      *ResponseMetadata          `protobuf:"bytes,254,opt,name=response_metadata,json=responseMetadata,proto3" json:"response_metadata,omitempty"`                                                         //Метадата
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *PostOrderResponse) Reset() {
	*x = PostOrderResponse{}
	mi := &file_tinvest_trb_orders_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostOrderResponse) ProtoMessage() {}

func (x *PostOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_orders_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostOrderResponse.ProtoReflect.Descriptor instead.
func (*PostOrderResponse) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_orders_proto_rawDescGZIP(), []int{5}
}

func (x *PostOrderResponse) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *PostOrderResponse) GetExecutionReportStatus() OrderExecutionReportStatus {
	if x != nil {
		return x.ExecutionReportStatus
	}
	return OrderExecutionReportStatus_EXECUTION_REPORT_STATUS_UNSPECIFIED
}

func (x *PostOrderResponse) GetLotsRequested() int64 {
	if x != nil {
		return x.LotsRequested
	}
	return 0
}

func (x *PostOrderResponse) GetLotsExecuted() int64 {
	if x != nil {
		return x.LotsExecuted
	}
	return 0
}

func (x *PostOrderResponse) GetInitialOrderPrice() *MoneyValue {
	if x != nil {
		return x.InitialOrderPrice
	}
	return nil
}

func (x *PostOrderResponse) GetExecutedOrderPrice() *MoneyValue {
	if x != nil {
		return x.ExecutedOrderPrice
	}
	return nil
}

func (x *PostOrderResponse) GetTotalOrderAmount() *MoneyValue {
	if x != nil {
		return x.TotalOrderAmount
	}
	return nil
}

func (x *PostOrderResponse) GetInitialCommission() *MoneyValue {
	if x != nil {
		return x.InitialCommission
	}
	return nil
}

func (x *PostOrderResponse) GetExecutedCommission() *MoneyValue {
	if x != nil {
		return x.ExecutedCommission
	}
	return nil
}

func (x *PostOrderResponse) GetAciValue() *MoneyValue {
	if x != nil {
		return x.AciValue
	}
	return nil
}

func (x *PostOrderResponse) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *PostOrderResponse) GetDirection() OrderDirection {
	if x != nil {
		return x.Direction
	}
	return OrderDirection_ORDER_DIRECTION_UNSPECIFIED
}

func (x *PostOrderResponse) GetInitialSecurityPrice() *MoneyValue {
	if x != nil {
		return x.InitialSecurityPrice
	}
	return nil
}

func (x *PostOrderResponse) GetOrderType() OrderType {
	if x != nil {
		return x.OrderType
	}
	return OrderType_ORDER_TYPE_UNSPECIFIED
}

func (x *PostOrderResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PostOrderResponse) GetInitialOrderPricePt() *Quotation {
	if x != nil {
		return x.InitialOrderPricePt
	}
	return nil
}

func (x *PostOrderResponse) GetInstrumentUid() string {
	if x != nil {
		return x.InstrumentUid
	}
	return ""
}

func (x *PostOrderResponse) GetOrderRequestId() string {
	if x != nil {
		return x.OrderRequestId
	}
	return ""
}

func (x *PostOrderResponse) GetResponseMetadata() *ResponseMetadata {
	if x != nil {
		return x.ResponseMetadata
	}
	return nil
}

// Запрос выставления асинхронного торгового поручения.
type PostOrderAsyncRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InstrumentId  string                 `protobuf:"bytes,1,opt,name=instrument_id,json=instrumentId,proto3" json:"instrument_id,omitempty"`                                    //Идентификатор инструмента, принимает значения Figi или Instrument_uid.
	Quantity      int64                  `protobuf:"varint,2,opt,name=quantity,proto3" json:"quantity,omitempty"`                                                               //Количество лотов.
	Price         *Quotation             `protobuf:"bytes,3,opt,name=price,proto3,oneof" json:"price,omitempty"`                                                                //Цена за 1 инструмент. Для получения стоимости лота требуется умножить на лотность инструмента. Игнорируется для рыночных поручений.
	Direction     OrderDirection         `protobuf:"varint,4,opt,name=direction,proto3,enum=tinvest.OrderDirection" json:"direction,omitempty"`                                 //Направление операции.
	AccountId     string                 `protobuf:"bytes,5,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`                                             //Номер счета.
	OrderType     OrderType              `protobuf:"varint,6,opt,name=order_type,json=orderType,proto3,enum=tinvest.OrderType" json:"order_type,omitempty"`                     //Тип заявки.
	OrderId       string                 `protobuf:"bytes,7,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                                                   //Идентификатор запроса выставления поручения для целей идемпотентности в формате UID. Максимальная длина 36 символов.
	TimeInForce   *TimeInForceType       `protobuf:"varint,8,opt,name=time_in_force,json=timeInForce,proto3,enum=tinvest.TimeInForceType,oneof" json:"time_in_force,omitempty"` //Алгоритм исполнения поручения, применяется только к лимитной заявке.
	PriceType     *PriceType             `protobuf:"varint,9,opt,name=price_type,json=priceType,proto3,enum=tinvest.PriceType,oneof" json:"price_type,omitempty"`               //Тип цены.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PostOrderAsyncRequest) Reset() {
	*x = PostOrderAsyncRequest{}
	mi := &file_tinvest_trb_orders_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostOrderAsyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostOrderAsyncRequest) ProtoMessage() {}

func (x *PostOrderAsyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_orders_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostOrderAsyncRequest.ProtoReflect.Descriptor instead.
func (*PostOrderAsyncRequest) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_orders_proto_rawDescGZIP(), []int{6}
}

func (x *PostOrderAsyncRequest) GetInstrumentId() string {
	if x != nil {
		return x.InstrumentId
	}
	return ""
}

func (x *PostOrderAsyncRequest) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *PostOrderAsyncRequest) GetPrice() *Quotation {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *PostOrderAsyncRequest) GetDirection() OrderDirection {
	if x != nil {
		return x.Direction
	}
	return OrderDirection_ORDER_DIRECTION_UNSPECIFIED
}

func (x *PostOrderAsyncRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *PostOrderAsyncRequest) GetOrderType() OrderType {
	if x != nil {
		return x.OrderType
	}
	return OrderType_ORDER_TYPE_UNSPECIFIED
}

func (x *PostOrderAsyncRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *PostOrderAsyncRequest) GetTimeInForce() TimeInForceType {
	if x != nil && x.TimeInForce != nil {
		return *x.TimeInForce
	}
	return TimeInForceType_TIME_IN_FORCE_UNSPECIFIED
}

func (x *PostOrderAsyncRequest) GetPriceType() PriceType {
	if x != nil && x.PriceType != nil {
		return *x.PriceType
	}
	return PriceType_PRICE_TYPE_UNSPECIFIED
}

// Результат выставления асинхронного торгового поручения.
type PostOrderAsyncResponse struct {
	state                 protoimpl.MessageState     `protogen:"open.v1"`
	OrderRequestId        string                     `protobuf:"bytes,1,opt,name=order_request_id,json=orderRequestId,proto3" json:"order_request_id,omitempty"`                                                               //Идентификатор ключа идемпотентности, переданный клиентом, в формате UID. Максимальная длина 36 символов.
	ExecutionReportStatus OrderExecutionReportStatus `protobuf:"varint,2,opt,name=execution_report_status,json=executionReportStatus,proto3,enum=tinvest.OrderExecutionReportStatus" json:"execution_report_status,omitempty"` //Текущий статус заявки.
	TradeIntentId         *string                    `protobuf:"bytes,3,opt,name=trade_intent_id,json=tradeIntentId,proto3,oneof" json:"trade_intent_id,omitempty"`                                                            //Идентификатор торгового поручения.
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *PostOrderAsyncResponse) Reset() {
	*x = PostOrderAsyncResponse{}
	mi := &file_tinvest_trb_orders_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostOrderAsyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostOrderAsyncResponse) ProtoMessage() {}

func (x *PostOrderAsyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_orders_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostOrderAsyncResponse.ProtoReflect.Descriptor instead.
func (*PostOrderAsyncResponse) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_orders_proto_rawDescGZIP(), []int{7}
}

func (x *PostOrderAsyncResponse) GetOrderRequestId() string {
	if x != nil {
		return x.OrderRequestId
	}
	return ""
}

func (x *PostOrderAsyncResponse) GetExecutionReportStatus() OrderExecutionReportStatus {
	if x != nil {
		return x.ExecutionReportStatus
	}
	return OrderExecutionReportStatus_EXECUTION_REPORT_STATUS_UNSPECIFIED
}

func (x *PostOrderAsyncResponse) GetTradeIntentId() string {
	if x != nil && x.TradeIntentId != nil {
		return *x.TradeIntentId
	}
	return ""
}

// Запрос отмены торгового поручения.
type CancelOrderRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountId     string                 `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`                                         //Номер счета.
	OrderId       string                 `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                                               //Идентификатор заявки.
	OrderIdType   *OrderIdType           `protobuf:"varint,3,opt,name=order_id_type,json=orderIdType,proto3,enum=tinvest.OrderIdType,oneof" json:"order_id_type,omitempty"` //Тип идентификатора заявки.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancelOrderRequest) Reset() {
	*x = CancelOrderRequest{}
	mi := &file_tinvest_trb_orders_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelOrderRequest) ProtoMessage() {}

func (x *CancelOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_orders_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelOrderRequest.ProtoReflect.Descriptor instead.
func (*CancelOrderRequest) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_orders_proto_rawDescGZIP(), []int{8}
}

func (x *CancelOrderRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *CancelOrderRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *CancelOrderRequest) GetOrderIdType() OrderIdType {
	if x != nil && x.OrderIdType != nil {
		return *x.OrderIdType
	}
	return OrderIdType_ORDER_ID_TYPE_UNSPECIFIED
}

// Результат отмены торгового поручения.
type CancelOrderResponse struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Time             *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`                                                   //Дата и время отмены заявки в часовом поясе UTC.
	ResponseMetadata *ResponseMetadata      `protobuf:"bytes,254,opt,name=response_metadata,json=responseMetadata,proto3" json:"response_metadata,omitempty"` //Метадата
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CancelOrderResponse) Reset() {
	*x = CancelOrderResponse{}
	mi := &file_tinvest_trb_orders_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelOrderResponse) ProtoMessage() {}

func (x *CancelOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_orders_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelOrderResponse.ProtoReflect.Descriptor instead.
func (*CancelOrderResponse) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_orders_proto_rawDescGZIP(), []int{9}
}

func (x *CancelOrderResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *CancelOrderResponse) GetResponseMetadata() *ResponseMetadata {
	if x != nil {
		return x.ResponseMetadata
	}
	return nil
}

// Запрос получения статуса торгового поручения.
type GetOrderStateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountId     string                 `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`                                         //Номер счета.
	OrderId       string                 `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                                               //Идентификатор заявки.
	PriceType     PriceType              `protobuf:"varint,3,opt,name=price_type,json=priceType,proto3,enum=tinvest.PriceType" json:"price_type,omitempty"`                 //Тип цены.
	OrderIdType   *OrderIdType           `protobuf:"varint,4,opt,name=order_id_type,json=orderIdType,proto3,enum=tinvest.OrderIdType,oneof" json:"order_id_type,omitempty"` //Тип идентификатора заявки.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOrderStateRequest) Reset() {
	*x = GetOrderStateRequest{}
	mi := &file_tinvest_trb_orders_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrderStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderStateRequest) ProtoMessage() {}

func (x *GetOrderStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_orders_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderStateRequest.ProtoReflect.Descriptor instead.
func (*GetOrderStateRequest) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_orders_proto_rawDescGZIP(), []int{10}
}

func (x *GetOrderStateRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *GetOrderStateRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *GetOrderStateRequest) GetPriceType() PriceType {
	if x != nil {
		return x.PriceType
	}
	return PriceType_PRICE_TYPE_UNSPECIFIED
}

func (x *GetOrderStateRequest) GetOrderIdType() OrderIdType {
	if x != nil && x.OrderIdType != nil {
		return *x.OrderIdType
	}
	return OrderIdType_ORDER_ID_TYPE_UNSPECIFIED
}

// Запрос получения списка активных торговых поручений.
type GetOrdersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountId     string                 `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"` //Номер счета.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOrdersRequest) Reset() {
	*x = GetOrdersRequest{}
	mi := &file_tinvest_trb_orders_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrdersRequest) ProtoMessage() {}

func (x *GetOrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_orders_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrdersRequest.ProtoReflect.Descriptor instead.
func (*GetOrdersRequest) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_orders_proto_rawDescGZIP(), []int{11}
}

func (x *GetOrdersRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

// Список активных торговых поручений.
type GetOrdersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Orders        []*OrderState          `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"` //Массив активных заявок.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOrdersResponse) Reset() {
	*x = GetOrdersResponse{}
	mi := &file_tinvest_trb_orders_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrdersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrdersResponse) ProtoMessage() {}

func (x *GetOrdersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_orders_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrdersResponse.ProtoReflect.Descriptor instead.
func (*GetOrdersResponse) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_orders_proto_rawDescGZIP(), []int{12}
}

func (x *GetOrdersResponse) GetOrders() []*OrderState {
	if x != nil {
		return x.Orders
	}
	return nil
}

// Информация о торговом поручении.
type OrderState struct {
	state                 protoimpl.MessageState     `protogen:"open.v1"`
	OrderId               string                     `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                                                                                      //Биржевой идентификатор заявки.
	ExecutionReportStatus OrderExecutionReportStatus `protobuf:"varint,2,opt,name=execution_report_status,json=executionReportStatus,proto3,enum=tinvest.OrderExecutionReportStatus" json:"execution_report_status,omitempty"` //Текущий статус заявки.
	LotsRequested         int64                      `protobuf:"varint,3,opt,name=lots_requested,json=lotsRequested,proto3" json:"lots_requested,omitempty"`                                                                   //Запрошено лотов.
	LotsExecuted          int64                      `protobuf:"varint,4,opt,name=lots_executed,json=lotsExecuted,proto3" json:"lots_executed,omitempty"`                                                                      //Исполнено лотов.
	InitialOrderPrice     *MoneyValue                `protobuf:"bytes,5,opt,name=initial_order_price,json=initialOrderPrice,proto3" json:"initial_order_price,omitempty"`                                                      //Начальная цена заявки. Произведение количества запрошенных лотов на цену.
	ExecutedOrderPrice    *MoneyValue                `protobuf:"bytes,6,opt,name=executed_order_price,json=executedOrderPrice,proto3" json:"executed_order_price,omitempty"`                                                   //Исполненная цена заявки. Произведение средней цены покупки на количество лотов.
	TotalOrderAmount      *MoneyValue                `protobuf:"bytes,7,opt,name=total_order_amount,json=totalOrderAmount,proto3" json:"total_order_amount,omitempty"`                                                         //Итоговая стоимость заявки, включающая все комиссии.
	AveragePositionPrice  *MoneyValue                `protobuf:"bytes,8,opt,name=average_position_price,json=averagePositionPrice,proto3" json:"average_position_price,omitempty"`                                             //Средняя цена позиции по сделке.
	InitialCommission     *MoneyValue                `protobuf:"bytes,9,opt,name=initial_commission,json=initialCommission,proto3" json:"initial_commission,omitempty"`                                                        //Начальная комиссия. Комиссия, рассчитанная на момент подачи заявки.
	ExecutedCommission    *MoneyValue                `protobuf:"bytes,10,opt,name=executed_commission,json=executedCommission,proto3" json:"executed_commission,omitempty"`                                                    //Фактическая комиссия по итогам исполнения заявки.
	Figi                  string                     `protobuf:"bytes,11,opt,name=figi,proto3" json:"figi,omitempty"`                                                                                                          //Figi-идентификатор инструмента.
	Direction             OrderDirection             `protobuf:"varint,12,opt,name=direction,proto3,enum=tinvest.OrderDirection" json:"direction,omitempty"`                                                                   //Направление заявки.
	InitialSecurityPrice  *MoneyValue                `protobuf:"bytes,13,opt,name=initial_security_price,json=initialSecurityPrice,proto3" json:"initial_security_price,omitempty"`                                            //Начальная цена за 1 инструмент. Для получения стоимости лота требуется умножить на лотность инструмента.
	Stages                []*OrderStage              `protobuf:"bytes,14,rep,name=stages,proto3" json:"stages,omitempty"`                                                                                                      //Стадии выполнения заявки.
	ServiceCommission     *MoneyValue                `protobuf:"bytes,15,opt,name=service_commission,json=serviceCommission,proto3" json:"service_commission,omitempty"`                                                       //Сервисная комиссия.
	Currency              string                     `protobuf:"bytes,16,opt,name=currency,proto3" json:"currency,omitempty"`                                                                                                  //Валюта заявки.
	OrderType             OrderType                  `protobuf:"varint,17,opt,name=order_type,json=orderType,proto3,enum=tinvest.OrderType" json:"order_type,omitempty"`                                                       //Тип заявки.
	OrderDate             *timestamppb.Timestamp     `protobuf:"bytes,18,opt,name=order_date,json=orderDate,proto3" json:"order_date,omitempty"`                                                                               //Дата и время выставления заявки в часовом поясе UTC.
	InstrumentUid         string                     `protobuf:"bytes,19,opt,name=instrument_uid,json=instrumentUid,proto3" json:"instrument_uid,omitempty"`                                                                   //UID идентификатор инструмента.
	OrderRequestId        string                     `protobuf:"bytes,20,opt,name=order_request_id,json=orderRequestId,proto3" json:"order_request_id,omitempty"`                                                              //Идентификатор ключа идемпотентности, переданный клиентом, в формате UID. Максимальная длина 36 символов.
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *OrderState) Reset() {
	*x = OrderState{}
	mi := &file_tinvest_trb_orders_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderState) ProtoMessage() {}

func (x *OrderState) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_orders_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderState.ProtoReflect.Descriptor instead.
func (*OrderState) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_orders_proto_rawDescGZIP(), []int{13}
}

func (x *OrderState) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *OrderState) GetExecutionReportStatus() OrderExecutionReportStatus {
	if x != nil {
		return x.ExecutionReportStatus
	}
	return OrderExecutionReportStatus_EXECUTION_REPORT_STATUS_UNSPECIFIED
}

func (x *OrderState) GetLotsRequested() int64 {
	if x != nil {
		return x.LotsRequested
	}
	return 0
}

func (x *OrderState) GetLotsExecuted() int64 {
	if x != nil {
		return x.LotsExecuted
	}
	return 0
}

func (x *OrderState) GetInitialOrderPrice() *MoneyValue {
	if x != nil {
		return x.InitialOrderPrice
	}
	return nil
}

func (x *OrderState) GetExecutedOrderPrice() *MoneyValue {
	if x != nil {
		return x.ExecutedOrderPrice
	}
	return nil
}

func (x *OrderState) GetTotalOrderAmount() *MoneyValue {
	if x != nil {
		return x.TotalOrderAmount
	}
	return nil
}

func (x *OrderState) GetAveragePositionPrice() *MoneyValue {
	if x != nil {
		return x.AveragePositionPrice
	}
	return nil
}

func (x *OrderState) GetInitialCommission() *MoneyValue {
	if x != nil {
		return x.InitialCommission
	}
	return nil
}

func (x *OrderState) GetExecutedCommission() *MoneyValue {
	if x != nil {
		return x.ExecutedCommission
	}
	return nil
}

func (x *OrderState) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *OrderState) GetDirection() OrderDirection {
	if x != nil {
		return x.Direction
	}
	return OrderDirection_ORDER_DIRECTION_UNSPECIFIED
}

func (x *OrderState) GetInitialSecurityPrice() *MoneyValue {
	if x != nil {
		return x.InitialSecurityPrice
	}
	return nil
}

func (x *OrderState) GetStages() []*OrderStage {
	if x != nil {
		return x.Stages
	}
	return nil
}

func (x *OrderState) GetServiceCommission() *MoneyValue {
	if x != nil {
		return x.ServiceCommission
	}
	return nil
}

func (x *OrderState) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *OrderState) GetOrderType() OrderType {
	if x != nil {
		return x.OrderType
	}
	return OrderType_ORDER_TYPE_UNSPECIFIED
}

func (x *OrderState) GetOrderDate() *timestamppb.Timestamp {
	if x != nil {
		return x.OrderDate
	}
	return nil
}

func (x *OrderState) GetInstrumentUid() string {
	if x != nil {
		return x.InstrumentUid
	}
	return ""
}

func (x *OrderState) GetOrderRequestId() string {
	if x != nil {
		return x.OrderRequestId
	}
	return ""
}

// Сделки в рамках торгового поручения.
type OrderStage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Price         *MoneyValue            `protobuf:"bytes,1,opt,name=price,proto3" json:"price,omitempty"`                                      //Цена за 1 инструмент. Для получения стоимости лота требуется умножить на лотность инструмента.
	Quantity      int64                  `protobuf:"varint,2,opt,name=quantity,proto3" json:"quantity,omitempty"`                               //Количество лотов.
	TradeId       string                 `protobuf:"bytes,3,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`                   //Идентификатор сделки.
	ExecutionTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=execution_time,json=executionTime,proto3" json:"execution_time,omitempty"` //Время исполнения сделки
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrderStage) Reset() {
	*x = OrderStage{}
	mi := &file_tinvest_trb_orders_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderStage) ProtoMessage() {}

func (x *OrderStage) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_orders_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderStage.ProtoReflect.Descriptor instead.
func (*OrderStage) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_orders_proto_rawDescGZIP(), []int{14}
}

func (x *OrderStage) GetPrice() *MoneyValue {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *OrderStage) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *OrderStage) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *OrderStage) GetExecutionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExecutionTime
	}
	return nil
}

// Запрос изменения выставленной заявки.
type ReplaceOrderRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	AccountId      string                 `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`                                //Номер счета.
	OrderId        string                 `protobuf:"bytes,6,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                                      //Идентификатор заявки на бирже.
	IdempotencyKey string                 `protobuf:"bytes,7,opt,name=idempotency_key,json=idempotencyKey,proto3" json:"idempotency_key,omitempty"`                 //Новый идентификатор запроса выставления поручения для целей идемпотентности. Максимальная длина 36 символов. Перезатирает старый ключ.
	Quantity       int64                  `protobuf:"varint,11,opt,name=quantity,proto3" json:"quantity,omitempty"`                                                 //Количество лотов.
	Price          *Quotation             `protobuf:"bytes,12,opt,name=price,proto3,oneof" json:"price,omitempty"`                                                  //Цена за 1 инструмент.
	PriceType      *PriceType             `protobuf:"varint,13,opt,name=price_type,json=priceType,proto3,enum=tinvest.PriceType,oneof" json:"price_type,omitempty"` //Тип цены.
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ReplaceOrderRequest) Reset() {
	*x = ReplaceOrderRequest{}
	mi := &file_tinvest_trb_orders_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplaceOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceOrderRequest) ProtoMessage() {}

func (x *ReplaceOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_orders_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceOrderRequest.ProtoReflect.Descriptor instead.
func (*ReplaceOrderRequest) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_orders_proto_rawDescGZIP(), []int{15}
}

func (x *ReplaceOrderRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ReplaceOrderRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *ReplaceOrderRequest) GetIdempotencyKey() string {
	if x != nil {
		return x.IdempotencyKey
	}
	return ""
}

func (x *ReplaceOrderRequest) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *ReplaceOrderRequest) GetPrice() *Quotation {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *ReplaceOrderRequest) GetPriceType() PriceType {
	if x != nil && x.PriceType != nil {
		return *x.PriceType
	}
	return PriceType_PRICE_TYPE_UNSPECIFIED
}

// Запрос на расчет количества доступных для покупки/продажи лотов. Если не указывать цену инструмента, то расчет произведется по текущум ценам в стакане: по лучшему предложению для покупки и по лучшему спросу для продажи.
type GetMaxLotsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountId     string                 `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`          //Номер счета
	InstrumentId  string                 `protobuf:"bytes,2,opt,name=instrument_id,json=instrumentId,proto3" json:"instrument_id,omitempty"` //Идентификатор инструмента, принимает значения Figi или instrument_uid
	Price         *Quotation             `protobuf:"bytes,3,opt,name=price,proto3,oneof" json:"price,omitempty"`                             //Цена инструмента
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMaxLotsRequest) Reset() {
	*x = GetMaxLotsRequest{}
	mi := &file_tinvest_trb_orders_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMaxLotsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMaxLotsRequest) ProtoMessage() {}

func (x *GetMaxLotsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_orders_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMaxLotsRequest.ProtoReflect.Descriptor instead.
func (*GetMaxLotsRequest) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_orders_proto_rawDescGZIP(), []int{16}
}

func (x *GetMaxLotsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *GetMaxLotsRequest) GetInstrumentId() string {
	if x != nil {
		return x.InstrumentId
	}
	return ""
}

func (x *GetMaxLotsRequest) GetPrice() *Quotation {
	if x != nil {
		return x.Price
	}
	return nil
}

// Результат количество доступных для покупки/продажи лотов
type GetMaxLotsResponse struct {
	state            protoimpl.MessageState             `protogen:"open.v1"`
	Currency         string                             `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency,omitempty"`                                           //Валюта инструмента
	BuyLimits        *GetMaxLotsResponse_BuyLimitsView  `protobuf:"bytes,2,opt,name=buy_limits,json=buyLimits,proto3" json:"buy_limits,omitempty"`                        //Лимиты для покупок на собственные деньги
	BuyMarginLimits  *GetMaxLotsResponse_BuyLimitsView  `protobuf:"bytes,3,opt,name=buy_margin_limits,json=buyMarginLimits,proto3" json:"buy_margin_limits,omitempty"`    //Лимиты для покупок с учетом маржинального кредитования
	SellLimits       *GetMaxLotsResponse_SellLimitsView `protobuf:"bytes,4,opt,name=sell_limits,json=sellLimits,proto3" json:"sell_limits,omitempty"`                     //Лимиты для продаж по собственной позиции
	SellMarginLimits *GetMaxLotsResponse_SellLimitsView `protobuf:"bytes,5,opt,name=sell_margin_limits,json=sellMarginLimits,proto3" json:"sell_margin_limits,omitempty"` //Лимиты для продаж с учетом маржинального кредитования
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetMaxLotsResponse) Reset() {
	*x = GetMaxLotsResponse{}
	mi := &file_tinvest_trb_orders_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMaxLotsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMaxLotsResponse) ProtoMessage() {}

func (x *GetMaxLotsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_orders_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMaxLotsResponse.ProtoReflect.Descriptor instead.
func (*GetMaxLotsResponse) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_orders_proto_rawDescGZIP(), []int{17}
}

func (x *GetMaxLotsResponse) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *GetMaxLotsResponse) GetBuyLimits() *GetMaxLotsResponse_BuyLimitsView {
	if x != nil {
		return x.BuyLimits
	}
	return nil
}

func (x *GetMaxLotsResponse) GetBuyMarginLimits() *GetMaxLotsResponse_BuyLimitsView {
	if x != nil {
		return x.BuyMarginLimits
	}
	return nil
}

func (x *GetMaxLotsResponse) GetSellLimits() *GetMaxLotsResponse_SellLimitsView {
	if x != nil {
		return x.SellLimits
	}
	return nil
}

func (x *GetMaxLotsResponse) GetSellMarginLimits() *GetMaxLotsResponse_SellLimitsView {
	if x != nil {
		return x.SellMarginLimits
	}
	return nil
}

// Запрос получения предварительной стоимости заявки
type GetOrderPriceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountId     string                 `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`              //Номер счета
	InstrumentId  string                 `protobuf:"bytes,2,opt,name=instrument_id,json=instrumentId,proto3" json:"instrument_id,omitempty"`     //Идентификатор инструмента, принимает значения Figi или instrument_uid
	Price         *Quotation             `protobuf:"bytes,3,opt,name=price,proto3" json:"price,omitempty"`                                       //Цена инструмента
	Direction     OrderDirection         `protobuf:"varint,12,opt,name=direction,proto3,enum=tinvest.OrderDirection" json:"direction,omitempty"` //Направление заявки
	Quantity      int64                  `protobuf:"varint,13,opt,name=quantity,proto3" json:"quantity,omitempty"`                               //Количество лотов
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOrderPriceRequest) Reset() {
	*x = GetOrderPriceRequest{}
	mi := &file_tinvest_trb_orders_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrderPriceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderPriceRequest) ProtoMessage() {}

func (x *GetOrderPriceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_orders_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderPriceRequest.ProtoReflect.Descriptor instead.
func (*GetOrderPriceRequest) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_orders_proto_rawDescGZIP(), []int{18}
}

func (x *GetOrderPriceRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *GetOrderPriceRequest) GetInstrumentId() string {
	if x != nil {
		return x.InstrumentId
	}
	return ""
}

func (x *GetOrderPriceRequest) GetPrice() *Quotation {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *GetOrderPriceRequest) GetDirection() OrderDirection {
	if x != nil {
		return x.Direction
	}
	return OrderDirection_ORDER_DIRECTION_UNSPECIFIED
}

func (x *GetOrderPriceRequest) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

// Предварительная стоимость заявки
type GetOrderPriceResponse struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	TotalOrderAmount      *MoneyValue            `protobuf:"bytes,1,opt,name=total_order_amount,json=totalOrderAmount,proto3" json:"total_order_amount,omitempty"`                //Итоговая стоимость заявки
	InitialOrderAmount    *MoneyValue            `protobuf:"bytes,5,opt,name=initial_order_amount,json=initialOrderAmount,proto3" json:"initial_order_amount,omitempty"`          //Стоимость заявки без комиссий, НКД, ГО (для фьючерсов — стоимость контрактов)
	LotsRequested         int64                  `protobuf:"varint,3,opt,name=lots_requested,json=lotsRequested,proto3" json:"lots_requested,omitempty"`                          //Запрошено лотов
	ExecutedCommission    *MoneyValue            `protobuf:"bytes,7,opt,name=executed_commission,json=executedCommission,proto3" json:"executed_commission,omitempty"`            //Общая комиссия
	ExecutedCommissionRub *MoneyValue            `protobuf:"bytes,8,opt,name=executed_commission_rub,json=executedCommissionRub,proto3" json:"executed_commission_rub,omitempty"` //Общая комиссия в рублях
	ServiceCommission     *MoneyValue            `protobuf:"bytes,9,opt,name=service_commission,json=serviceCommission,proto3" json:"service_commission,omitempty"`               //Сервисная комиссия
	DealCommission        *MoneyValue            `protobuf:"bytes,10,opt,name=deal_commission,json=dealCommission,proto3" json:"deal_commission,omitempty"`                       //Комиссия за проведение сделки
	// Types that are valid to be assigned to InstrumentExtra:
	//
	//	*GetOrderPriceResponse_ExtraBond_
	//	*GetOrderPriceResponse_ExtraFuture_
	InstrumentExtra isGetOrderPriceResponse_InstrumentExtra `protobuf_oneof:"instrument_extra"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetOrderPriceResponse) Reset() {
	*x = GetOrderPriceResponse{}
	mi := &file_tinvest_trb_orders_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrderPriceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderPriceResponse) ProtoMessage() {}

func (x *GetOrderPriceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_orders_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderPriceResponse.ProtoReflect.Descriptor instead.
func (*GetOrderPriceResponse) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_orders_proto_rawDescGZIP(), []int{19}
}

func (x *GetOrderPriceResponse) GetTotalOrderAmount() *MoneyValue {
	if x != nil {
		return x.TotalOrderAmount
	}
	return nil
}

func (x *GetOrderPriceResponse) GetInitialOrderAmount() *MoneyValue {
	if x != nil {
		return x.InitialOrderAmount
	}
	return nil
}

func (x *GetOrderPriceResponse) GetLotsRequested() int64 {
	if x != nil {
		return x.LotsRequested
	}
	return 0
}

func (x *GetOrderPriceResponse) GetExecutedCommission() *MoneyValue {
	if x != nil {
		return x.ExecutedCommission
	}
	return nil
}

func (x *GetOrderPriceResponse) GetExecutedCommissionRub() *MoneyValue {
	if x != nil {
		return x.ExecutedCommissionRub
	}
	return nil
}

func (x *GetOrderPriceResponse) GetServiceCommission() *MoneyValue {
	if x != nil {
		return x.ServiceCommission
	}
	return nil
}

func (x *GetOrderPriceResponse) GetDealCommission() *MoneyValue {
	if x != nil {
		return x.DealCommission
	}
	return nil
}

func (x *GetOrderPriceResponse) GetInstrumentExtra() isGetOrderPriceResponse_InstrumentExtra {
	if x != nil {
		return x.InstrumentExtra
	}
	return nil
}

func (x *GetOrderPriceResponse) GetExtraBond() *GetOrderPriceResponse_ExtraBond {
	if x != nil {
		if x, ok := x.InstrumentExtra.(*GetOrderPriceResponse_ExtraBond_); ok {
			return x.ExtraBond
		}
	}
	return nil
}

func (x *GetOrderPriceResponse) GetExtraFuture() *GetOrderPriceResponse_ExtraFuture {
	if x != nil {
		if x, ok := x.InstrumentExtra.(*GetOrderPriceResponse_ExtraFuture_); ok {
			return x.ExtraFuture
		}
	}
	return nil
}

type isGetOrderPriceResponse_InstrumentExtra interface {
	isGetOrderPriceResponse_InstrumentExtra()
}

type GetOrderPriceResponse_ExtraBond_ struct {
	ExtraBond *GetOrderPriceResponse_ExtraBond `protobuf:"bytes,12,opt,name=extra_bond,json=extraBond,proto3,oneof"` //Дополнительная информация по облигациям
}

type GetOrderPriceResponse_ExtraFuture_ struct {
	ExtraFuture *GetOrderPriceResponse_ExtraFuture `protobuf:"bytes,13,opt,name=extra_future,json=extraFuture,proto3,oneof"` //Дополнительная информация по фьючерсам
}

func (*GetOrderPriceResponse_ExtraBond_) isGetOrderPriceResponse_InstrumentExtra() {}

func (*GetOrderPriceResponse_ExtraFuture_) isGetOrderPriceResponse_InstrumentExtra() {}

// Запрос установки стрим-соединения торговых поручений
type OrderStateStreamRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Accounts        []string               `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`                                                //Идентификаторы счетов.
	PingDelayMillis *int32                 `protobuf:"varint,15,opt,name=ping_delay_millis,json=pingDelayMillis,proto3,oneof" json:"ping_delay_millis,omitempty"` //Задержка (пинг) сообщений:  1000-120 000 миллисекунд. Значение по умолчанию — 120 000.
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *OrderStateStreamRequest) Reset() {
	*x = OrderStateStreamRequest{}
	mi := &file_tinvest_trb_orders_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderStateStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderStateStreamRequest) ProtoMessage() {}

func (x *OrderStateStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_orders_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderStateStreamRequest.ProtoReflect.Descriptor instead.
func (*OrderStateStreamRequest) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_orders_proto_rawDescGZIP(), []int{20}
}

func (x *OrderStateStreamRequest) GetAccounts() []string {
	if x != nil {
		return x.Accounts
	}
	return nil
}

func (x *OrderStateStreamRequest) GetPingDelayMillis() int32 {
	if x != nil && x.PingDelayMillis != nil {
		return *x.PingDelayMillis
	}
	return 0
}

// Информация по подпискам
type SubscriptionResponse struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	TrackingId    string                   `protobuf:"bytes,1,opt,name=tracking_id,json=trackingId,proto3" json:"tracking_id,omitempty"`              //Уникальный идентификатор запроса, подробнее: [tracking_id](./grpc#tracking-id).
	Status        ResultSubscriptionStatus `protobuf:"varint,2,opt,name=status,proto3,enum=tinvest.ResultSubscriptionStatus" json:"status,omitempty"` //Статус подписки.
	StreamId      string                   `protobuf:"bytes,4,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`                    //Идентификатор открытого соединения
	Accounts      []string                 `protobuf:"bytes,5,rep,name=accounts,proto3" json:"accounts,omitempty"`                                    //Идентификаторы счетов.
	Error         *ErrorDetail             `protobuf:"bytes,7,opt,name=error,proto3,oneof" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscriptionResponse) Reset() {
	*x = SubscriptionResponse{}
	mi := &file_tinvest_trb_orders_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionResponse) ProtoMessage() {}

func (x *SubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_orders_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionResponse.ProtoReflect.Descriptor instead.
func (*SubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_orders_proto_rawDescGZIP(), []int{21}
}

func (x *SubscriptionResponse) GetTrackingId() string {
	if x != nil {
		return x.TrackingId
	}
	return ""
}

func (x *SubscriptionResponse) GetStatus() ResultSubscriptionStatus {
	if x != nil {
		return x.Status
	}
	return ResultSubscriptionStatus_RESULT_SUBSCRIPTION_STATUS_UNSPECIFIED
}

func (x *SubscriptionResponse) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *SubscriptionResponse) GetAccounts() []string {
	if x != nil {
		return x.Accounts
	}
	return nil
}

func (x *SubscriptionResponse) GetError() *ErrorDetail {
	if x != nil {
		return x.Error
	}
	return nil
}

// Информация по заявкам
type OrderStateStreamResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Payload:
	//
	//	*OrderStateStreamResponse_OrderState_
	//	*OrderStateStreamResponse_Ping
	//	*OrderStateStreamResponse_Subscription
	Payload       isOrderStateStreamResponse_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrderStateStreamResponse) Reset() {
	*x = OrderStateStreamResponse{}
	mi := &file_tinvest_trb_orders_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderStateStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderStateStreamResponse) ProtoMessage() {}

func (x *OrderStateStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_orders_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderStateStreamResponse.ProtoReflect.Descriptor instead.
func (*OrderStateStreamResponse) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_orders_proto_rawDescGZIP(), []int{22}
}

func (x *OrderStateStreamResponse) GetPayload() isOrderStateStreamResponse_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *OrderStateStreamResponse) GetOrderState() *OrderStateStreamResponse_OrderState {
	if x != nil {
		if x, ok := x.Payload.(*OrderStateStreamResponse_OrderState_); ok {
			return x.OrderState
		}
	}
	return nil
}

func (x *OrderStateStreamResponse) GetPing() *Ping {
	if x != nil {
		if x, ok := x.Payload.(*OrderStateStreamResponse_Ping); ok {
			return x.Ping
		}
	}
	return nil
}

func (x *OrderStateStreamResponse) GetSubscription() *SubscriptionResponse {
	if x != nil {
		if x, ok := x.Payload.(*OrderStateStreamResponse_Subscription); ok {
			return x.Subscription
		}
	}
	return nil
}

type isOrderStateStreamResponse_Payload interface {
	isOrderStateStreamResponse_Payload()
}

type OrderStateStreamResponse_OrderState_ struct {
	OrderState *OrderStateStreamResponse_OrderState `protobuf:"bytes,1,opt,name=order_state,json=orderState,proto3,oneof"` //Информация об исполнении торгового поручения.
}

type OrderStateStreamResponse_Ping struct {
	Ping *Ping `protobuf:"bytes,2,opt,name=ping,proto3,oneof"` //Проверка активности стрима.
}

type OrderStateStreamResponse_Subscription struct {
	Subscription *SubscriptionResponse `protobuf:"bytes,3,opt,name=subscription,proto3,oneof"` //Ответ на запрос на подписку.
}

func (*OrderStateStreamResponse_OrderState_) isOrderStateStreamResponse_Payload() {}

func (*OrderStateStreamResponse_Ping) isOrderStateStreamResponse_Payload() {}

func (*OrderStateStreamResponse_Subscription) isOrderStateStreamResponse_Payload() {}

type GetMaxLotsResponse_BuyLimitsView struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	BuyMoneyAmount   *Quotation             `protobuf:"bytes,1,opt,name=buy_money_amount,json=buyMoneyAmount,proto3" json:"buy_money_amount,omitempty"`          //Количество доступной валюты для покупки
	BuyMaxLots       int64                  `protobuf:"varint,2,opt,name=buy_max_lots,json=buyMaxLots,proto3" json:"buy_max_lots,omitempty"`                     //Максимальное доступное количество лотов для покупки
	BuyMaxMarketLots int64                  `protobuf:"varint,3,opt,name=buy_max_market_lots,json=buyMaxMarketLots,proto3" json:"buy_max_market_lots,omitempty"` //Максимальное доступное количество лотов для покупки для заявки по рыночной цене на текущий момент
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetMaxLotsResponse_BuyLimitsView) Reset() {
	*x = GetMaxLotsResponse_BuyLimitsView{}
	mi := &file_tinvest_trb_orders_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMaxLotsResponse_BuyLimitsView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMaxLotsResponse_BuyLimitsView) ProtoMessage() {}

func (x *GetMaxLotsResponse_BuyLimitsView) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_orders_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMaxLotsResponse_BuyLimitsView.ProtoReflect.Descriptor instead.
func (*GetMaxLotsResponse_BuyLimitsView) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_orders_proto_rawDescGZIP(), []int{17, 0}
}

func (x *GetMaxLotsResponse_BuyLimitsView) GetBuyMoneyAmount() *Quotation {
	if x != nil {
		return x.BuyMoneyAmount
	}
	return nil
}

func (x *GetMaxLotsResponse_BuyLimitsView) GetBuyMaxLots() int64 {
	if x != nil {
		return x.BuyMaxLots
	}
	return 0
}

func (x *GetMaxLotsResponse_BuyLimitsView) GetBuyMaxMarketLots() int64 {
	if x != nil {
		return x.BuyMaxMarketLots
	}
	return 0
}

type GetMaxLotsResponse_SellLimitsView struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SellMaxLots   int64                  `protobuf:"varint,1,opt,name=sell_max_lots,json=sellMaxLots,proto3" json:"sell_max_lots,omitempty"` //Максимальное доступное количество лотов для продажи
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMaxLotsResponse_SellLimitsView) Reset() {
	*x = GetMaxLotsResponse_SellLimitsView{}
	mi := &file_tinvest_trb_orders_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMaxLotsResponse_SellLimitsView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMaxLotsResponse_SellLimitsView) ProtoMessage() {}

func (x *GetMaxLotsResponse_SellLimitsView) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_orders_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMaxLotsResponse_SellLimitsView.ProtoReflect.Descriptor instead.
func (*GetMaxLotsResponse_SellLimitsView) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_orders_proto_rawDescGZIP(), []int{17, 1}
}

func (x *GetMaxLotsResponse_SellLimitsView) GetSellMaxLots() int64 {
	if x != nil {
		return x.SellMaxLots
	}
	return 0
}

type GetOrderPriceResponse_ExtraBond struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	AciValue              *MoneyValue            `protobuf:"bytes,2,opt,name=aci_value,json=aciValue,proto3" json:"aci_value,omitempty"`                                          //Значение НКД (накопленного купонного дохода) на дату
	NominalConversionRate *Quotation             `protobuf:"bytes,3,opt,name=nominal_conversion_rate,json=nominalConversionRate,proto3" json:"nominal_conversion_rate,omitempty"` //Курс конвертации для замещающих облигаций
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *GetOrderPriceResponse_ExtraBond) Reset() {
	*x = GetOrderPriceResponse_ExtraBond{}
	mi := &file_tinvest_trb_orders_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrderPriceResponse_ExtraBond) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderPriceResponse_ExtraBond) ProtoMessage() {}

func (x *GetOrderPriceResponse_ExtraBond) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_orders_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderPriceResponse_ExtraBond.ProtoReflect.Descriptor instead.
func (*GetOrderPriceResponse_ExtraBond) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_orders_proto_rawDescGZIP(), []int{19, 0}
}

func (x *GetOrderPriceResponse_ExtraBond) GetAciValue() *MoneyValue {
	if x != nil {
		return x.AciValue
	}
	return nil
}

func (x *GetOrderPriceResponse_ExtraBond) GetNominalConversionRate() *Quotation {
	if x != nil {
		return x.NominalConversionRate
	}
	return nil
}

type GetOrderPriceResponse_ExtraFuture struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InitialMargin *MoneyValue            `protobuf:"bytes,2,opt,name=initial_margin,json=initialMargin,proto3" json:"initial_margin,omitempty"` //Гарантийное обеспечение для фьючерса
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOrderPriceResponse_ExtraFuture) Reset() {
	*x = GetOrderPriceResponse_ExtraFuture{}
	mi := &file_tinvest_trb_orders_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrderPriceResponse_ExtraFuture) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderPriceResponse_ExtraFuture) ProtoMessage() {}

func (x *GetOrderPriceResponse_ExtraFuture) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_orders_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderPriceResponse_ExtraFuture.ProtoReflect.Descriptor instead.
func (*GetOrderPriceResponse_ExtraFuture) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_orders_proto_rawDescGZIP(), []int{19, 1}
}

func (x *GetOrderPriceResponse_ExtraFuture) GetInitialMargin() *MoneyValue {
	if x != nil {
		return x.InitialMargin
	}
	return nil
}

// Заявка
type OrderStateStreamResponse_OrderState struct {
	state                 protoimpl.MessageState                    `protogen:"open.v1"`
	OrderId               string                                    `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                                                                                      //Биржевой идентификатор заявки.
	OrderRequestId        *string                                   `protobuf:"bytes,2,opt,name=order_request_id,json=orderRequestId,proto3,oneof" json:"order_request_id,omitempty"`                                                         //Идентификатор ключа идемпотентности, переданный клиентом, в формате UID. Максимальная длина 36 символов.
	ClientCode            string                                    `protobuf:"bytes,3,opt,name=client_code,json=clientCode,proto3" json:"client_code,omitempty"`                                                                             //Код клиента на бирже.
	CreatedAt             *timestamppb.Timestamp                    `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                                                                                //Дата создания заявки.
	ExecutionReportStatus OrderExecutionReportStatus                `protobuf:"varint,5,opt,name=execution_report_status,json=executionReportStatus,proto3,enum=tinvest.OrderExecutionReportStatus" json:"execution_report_status,omitempty"` //Статус заявки.
	StatusInfo            *OrderStateStreamResponse_StatusCauseInfo `protobuf:"varint,6,opt,name=status_info,json=statusInfo,proto3,enum=tinvest.OrderStateStreamResponse_StatusCauseInfo,oneof" json:"status_info,omitempty"`                //Дополнительная информация по статусу.
	Ticker                string                                    `protobuf:"bytes,7,opt,name=ticker,proto3" json:"ticker,omitempty"`                                                                                                       //Тикер инструмента.
	ClassCode             string                                    `protobuf:"bytes,8,opt,name=class_code,json=classCode,proto3" json:"class_code,omitempty"`                                                                                //Класс-код (секция торгов).
	LotSize               int32                                     `protobuf:"varint,9,opt,name=lot_size,json=lotSize,proto3" json:"lot_size,omitempty"`                                                                                     //Лотность инструмента заявки.
	Direction             OrderDirection                            `protobuf:"varint,10,opt,name=direction,proto3,enum=tinvest.OrderDirection" json:"direction,omitempty"`                                                                   //Направление заявки.
	TimeInForce           TimeInForceType                           `protobuf:"varint,11,opt,name=time_in_force,json=timeInForce,proto3,enum=tinvest.TimeInForceType" json:"time_in_force,omitempty"`                                         //Алгоритм исполнения поручения.
	OrderType             OrderType                                 `protobuf:"varint,12,opt,name=order_type,json=orderType,proto3,enum=tinvest.OrderType" json:"order_type,omitempty"`                                                       //Тип заявки.
	AccountId             string                                    `protobuf:"bytes,13,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`                                                                               //Номер счета.
	InitialOrderPrice     *MoneyValue                               `protobuf:"bytes,22,opt,name=initial_order_price,json=initialOrderPrice,proto3" json:"initial_order_price,omitempty"`                                                     //Начальная цена заявки.
	OrderPrice            *MoneyValue                               `protobuf:"bytes,23,opt,name=order_price,json=orderPrice,proto3" json:"order_price,omitempty"`                                                                            //Цена выставления заявки.
	Amount                *MoneyValue                               `protobuf:"bytes,24,opt,name=amount,proto3,oneof" json:"amount,omitempty"`                                                                                                //Предрассчитанная стоимость полной заявки.
	ExecutedOrderPrice    *MoneyValue                               `protobuf:"bytes,25,opt,name=executed_order_price,json=executedOrderPrice,proto3" json:"executed_order_price,omitempty"`                                                  //Исполненная цена заявки.
	Currency              string                                    `protobuf:"bytes,26,opt,name=currency,proto3" json:"currency,omitempty"`                                                                                                  //Валюта исполнения.
	LotsRequested         int64                                     `protobuf:"varint,27,opt,name=lots_requested,json=lotsRequested,proto3" json:"lots_requested,omitempty"`                                                                  //Запрошено лотов.
	LotsExecuted          int64                                     `protobuf:"varint,28,opt,name=lots_executed,json=lotsExecuted,proto3" json:"lots_executed,omitempty"`                                                                     //Исполнено лотов.
	LotsLeft              int64                                     `protobuf:"varint,29,opt,name=lots_left,json=lotsLeft,proto3" json:"lots_left,omitempty"`                                                                                 //Число неисполненных лотов по заявке.
	LotsCancelled         int64                                     `protobuf:"varint,30,opt,name=lots_cancelled,json=lotsCancelled,proto3" json:"lots_cancelled,omitempty"`                                                                  //Отмененные лоты.
	Marker                *OrderStateStreamResponse_MarkerType      `protobuf:"varint,31,opt,name=marker,proto3,enum=tinvest.OrderStateStreamResponse_MarkerType,oneof" json:"marker,omitempty"`                                              //Спецсимвол.
	Trades                []*OrderTrade                             `protobuf:"bytes,33,rep,name=trades,proto3" json:"trades,omitempty"`                                                                                                      //	Список сделок.
	CompletionTime        *timestamppb.Timestamp                    `protobuf:"bytes,35,opt,name=completion_time,json=completionTime,proto3" json:"completion_time,omitempty"`                                                                //Время исполнения заявки.
	Exchange              string                                    `protobuf:"bytes,36,opt,name=exchange,proto3" json:"exchange,omitempty"`                                                                                                  //Код биржи.
	InstrumentUid         string                                    `protobuf:"bytes,41,opt,name=instrument_uid,json=instrumentUid,proto3" json:"instrument_uid,omitempty"`                                                                   //UID идентификатор инструмента.
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *OrderStateStreamResponse_OrderState) Reset() {
	*x = OrderStateStreamResponse_OrderState{}
	mi := &file_tinvest_trb_orders_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderStateStreamResponse_OrderState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderStateStreamResponse_OrderState) ProtoMessage() {}

func (x *OrderStateStreamResponse_OrderState) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_orders_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderStateStreamResponse_OrderState.ProtoReflect.Descriptor instead.
func (*OrderStateStreamResponse_OrderState) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_orders_proto_rawDescGZIP(), []int{22, 0}
}

func (x *OrderStateStreamResponse_OrderState) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *OrderStateStreamResponse_OrderState) GetOrderRequestId() string {
	if x != nil && x.OrderRequestId != nil {
		return *x.OrderRequestId
	}
	return ""
}

func (x *OrderStateStreamResponse_OrderState) GetClientCode() string {
	if x != nil {
		return x.ClientCode
	}
	return ""
}

func (x *OrderStateStreamResponse_OrderState) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *OrderStateStreamResponse_OrderState) GetExecutionReportStatus() OrderExecutionReportStatus {
	if x != nil {
		return x.ExecutionReportStatus
	}
	return OrderExecutionReportStatus_EXECUTION_REPORT_STATUS_UNSPECIFIED
}

func (x *OrderStateStreamResponse_OrderState) GetStatusInfo() OrderStateStreamResponse_StatusCauseInfo {
	if x != nil && x.StatusInfo != nil {
		return *x.StatusInfo
	}
	return OrderStateStreamResponse_CAUSE_UNSPECIFIED
}

func (x *OrderStateStreamResponse_OrderState) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *OrderStateStreamResponse_OrderState) GetClassCode() string {
	if x != nil {
		return x.ClassCode
	}
	return ""
}

func (x *OrderStateStreamResponse_OrderState) GetLotSize() int32 {
	if x != nil {
		return x.LotSize
	}
	return 0
}

func (x *OrderStateStreamResponse_OrderState) GetDirection() OrderDirection {
	if x != nil {
		return x.Direction
	}
	return OrderDirection_ORDER_DIRECTION_UNSPECIFIED
}

func (x *OrderStateStreamResponse_OrderState) GetTimeInForce() TimeInForceType {
	if x != nil {
		return x.TimeInForce
	}
	return TimeInForceType_TIME_IN_FORCE_UNSPECIFIED
}

func (x *OrderStateStreamResponse_OrderState) GetOrderType() OrderType {
	if x != nil {
		return x.OrderType
	}
	return OrderType_ORDER_TYPE_UNSPECIFIED
}

func (x *OrderStateStreamResponse_OrderState) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *OrderStateStreamResponse_OrderState) GetInitialOrderPrice() *MoneyValue {
	if x != nil {
		return x.InitialOrderPrice
	}
	return nil
}

func (x *OrderStateStreamResponse_OrderState) GetOrderPrice() *MoneyValue {
	if x != nil {
		return x.OrderPrice
	}
	return nil
}

func (x *OrderStateStreamResponse_OrderState) GetAmount() *MoneyValue {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *OrderStateStreamResponse_OrderState) GetExecutedOrderPrice() *MoneyValue {
	if x != nil {
		return x.ExecutedOrderPrice
	}
	return nil
}

func (x *OrderStateStreamResponse_OrderState) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *OrderStateStreamResponse_OrderState) GetLotsRequested() int64 {
	if x != nil {
		return x.LotsRequested
	}
	return 0
}

func (x *OrderStateStreamResponse_OrderState) GetLotsExecuted() int64 {
	if x != nil {
		return x.LotsExecuted
	}
	return 0
}

func (x *OrderStateStreamResponse_OrderState) GetLotsLeft() int64 {
	if x != nil {
		return x.LotsLeft
	}
	return 0
}

func (x *OrderStateStreamResponse_OrderState) GetLotsCancelled() int64 {
	if x != nil {
		return x.LotsCancelled
	}
	return 0
}

func (x *OrderStateStreamResponse_OrderState) GetMarker() OrderStateStreamResponse_MarkerType {
	if x != nil && x.Marker != nil {
		return *x.Marker
	}
	return OrderStateStreamResponse_MARKER_UNKNOWN
}

func (x *OrderStateStreamResponse_OrderState) GetTrades() []*OrderTrade {
	if x != nil {
		return x.Trades
	}
	return nil
}

func (x *OrderStateStreamResponse_OrderState) GetCompletionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CompletionTime
	}
	return nil
}

func (x *OrderStateStreamResponse_OrderState) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *OrderStateStreamResponse_OrderState) GetInstrumentUid() string {
	if x != nil {
		return x.InstrumentUid
	}
	return ""
}

var File_tinvest_trb_orders_proto protoreflect.FileDescriptor

const file_tinvest_trb_orders_proto_rawDesc = "" +
	"\n" +
	"\x18tinvest/trb/orders.proto\x12\atinvest\x1a\x18tinvest/trb/common.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1fgoogle/api/field_behavior.proto\"l\n" +
	"\x13TradesStreamRequest\x12\x1a\n" +
	"\baccounts\x18\x01 \x03(\tR\baccounts\x12'\n" +
	"\rping_delay_ms\x18\x0f \x01(\x05H\x00R\vpingDelayMs\x88\x01\x01B\x10\n" +
	"\x0e_ping_delay_ms\"\xc6\x01\n" +
	"\x14TradesStreamResponse\x129\n" +
	"\forder_trades\x18\x01 \x01(\v2\x14.tinvest.OrderTradesH\x00R\vorderTrades\x12#\n" +
	"\x04ping\x18\x02 \x01(\v2\r.tinvest.PingH\x00R\x04ping\x12C\n" +
	"\fsubscription\x18\x03 \x01(\v2\x1d.tinvest.SubscriptionResponseH\x00R\fsubscriptionB\t\n" +
	"\apayload\"\xa1\x02\n" +
	"\vOrderTrades\x12\x19\n" +
	"\border_id\x18\x01 \x01(\tR\aorderId\x129\n" +
	"\n" +
	"created_at\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x125\n" +
	"\tdirection\x18\x03 \x01(\x0e2\x17.tinvest.OrderDirectionR\tdirection\x12\x12\n" +
	"\x04figi\x18\x04 \x01(\tR\x04figi\x12+\n" +
	"\x06trades\x18\x05 \x03(\v2\x13.tinvest.OrderTradeR\x06trades\x12\x1d\n" +
	"\n" +
	"account_id\x18\x06 \x01(\tR\taccountId\x12%\n" +
	"\x0einstrument_uid\x18\a \x01(\tR\rinstrumentUid\"\xa6\x01\n" +
	"\n" +
	"OrderTrade\x127\n" +
	"\tdate_time\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\bdateTime\x12(\n" +
	"\x05price\x18\x02 \x01(\v2\x12.tinvest.QuotationR\x05price\x12\x1a\n" +
	"\bquantity\x18\x03 \x01(\x03R\bquantity\x12\x19\n" +
	"\btrade_id\x18\x04 \x01(\tR\atradeId\"\xe5\x03\n" +
	"\x10PostOrderRequest\x12\x1b\n" +
	"\x04figi\x18\x01 \x01(\tB\x02\x18\x01H\x00R\x04figi\x88\x01\x01\x12 \n" +
	"\bquantity\x18\x02 \x01(\x03B\x04\xe2A\x01\x02R\bquantity\x12-\n" +
	"\x05price\x18\x03 \x01(\v2\x12.tinvest.QuotationH\x01R\x05price\x88\x01\x01\x12;\n" +
	"\tdirection\x18\x04 \x01(\x0e2\x17.tinvest.OrderDirectionB\x04\xe2A\x01\x02R\tdirection\x12#\n" +
	"\n" +
	"account_id\x18\x05 \x01(\tB\x04\xe2A\x01\x02R\taccountId\x127\n" +
	"\n" +
	"order_type\x18\x06 \x01(\x0e2\x12.tinvest.OrderTypeB\x04\xe2A\x01\x02R\torderType\x12\x1f\n" +
	"\border_id\x18\a \x01(\tB\x04\xe2A\x01\x02R\aorderId\x12#\n" +
	"\rinstrument_id\x18\b \x01(\tR\finstrumentId\x12<\n" +
	"\rtime_in_force\x18\t \x01(\x0e2\x18.tinvest.TimeInForceTypeR\vtimeInForce\x121\n" +
	"\n" +
	"price_type\x18\n" +
	" \x01(\x0e2\x12.tinvest.PriceTypeR\tpriceTypeB\a\n" +
	"\x05_figiB\b\n" +
	"\x06_price\"\xa8\b\n" +
	"\x11PostOrderResponse\x12\x19\n" +
	"\border_id\x18\x01 \x01(\tR\aorderId\x12[\n" +
	"\x17execution_report_status\x18\x02 \x01(\x0e2#.tinvest.OrderExecutionReportStatusR\x15executionReportStatus\x12%\n" +
	"\x0elots_requested\x18\x03 \x01(\x03R\rlotsRequested\x12#\n" +
	"\rlots_executed\x18\x04 \x01(\x03R\flotsExecuted\x12C\n" +
	"\x13initial_order_price\x18\x05 \x01(\v2\x13.tinvest.MoneyValueR\x11initialOrderPrice\x12E\n" +
	"\x14executed_order_price\x18\x06 \x01(\v2\x13.tinvest.MoneyValueR\x12executedOrderPrice\x12A\n" +
	"\x12total_order_amount\x18\a \x01(\v2\x13.tinvest.MoneyValueR\x10totalOrderAmount\x12B\n" +
	"\x12initial_commission\x18\b \x01(\v2\x13.tinvest.MoneyValueR\x11initialCommission\x12D\n" +
	"\x13executed_commission\x18\t \x01(\v2\x13.tinvest.MoneyValueR\x12executedCommission\x120\n" +
	"\taci_value\x18\n" +
	" \x01(\v2\x13.tinvest.MoneyValueR\baciValue\x12\x12\n" +
	"\x04figi\x18\v \x01(\tR\x04figi\x125\n" +
	"\tdirection\x18\f \x01(\x0e2\x17.tinvest.OrderDirectionR\tdirection\x12I\n" +
	"\x16initial_security_price\x18\r \x01(\v2\x13.tinvest.MoneyValueR\x14initialSecurityPrice\x121\n" +
	"\n" +
	"order_type\x18\x0e \x01(\x0e2\x12.tinvest.OrderTypeR\torderType\x12\x18\n" +
	"\amessage\x18\x0f \x01(\tR\amessage\x12G\n" +
	"\x16initial_order_price_pt\x18\x10 \x01(\v2\x12.tinvest.QuotationR\x13initialOrderPricePt\x12%\n" +
	"\x0einstrument_uid\x18\x11 \x01(\tR\rinstrumentUid\x12(\n" +
	"\x10order_request_id\x18\x14 \x01(\tR\x0eorderRequestId\x12G\n" +
	"\x11response_metadata\x18\xfe\x01 \x01(\v2\x19.tinvest.ResponseMetadataR\x10responseMetadata\"\xf5\x03\n" +
	"\x15PostOrderAsyncRequest\x12)\n" +
	"\rinstrument_id\x18\x01 \x01(\tB\x04\xe2A\x01\x02R\finstrumentId\x12 \n" +
	"\bquantity\x18\x02 \x01(\x03B\x04\xe2A\x01\x02R\bquantity\x12-\n" +
	"\x05price\x18\x03 \x01(\v2\x12.tinvest.QuotationH\x00R\x05price\x88\x01\x01\x12;\n" +
	"\tdirection\x18\x04 \x01(\x0e2\x17.tinvest.OrderDirectionB\x04\xe2A\x01\x02R\tdirection\x12#\n" +
	"\n" +
	"account_id\x18\x05 \x01(\tB\x04\xe2A\x01\x02R\taccountId\x127\n" +
	"\n" +
	"order_type\x18\x06 \x01(\x0e2\x12.tinvest.OrderTypeB\x04\xe2A\x01\x02R\torderType\x12\x1f\n" +
	"\border_id\x18\a \x01(\tB\x04\xe2A\x01\x02R\aorderId\x12A\n" +
	"\rtime_in_force\x18\b \x01(\x0e2\x18.tinvest.TimeInForceTypeH\x01R\vtimeInForce\x88\x01\x01\x126\n" +
	"\n" +
	"price_type\x18\t \x01(\x0e2\x12.tinvest.PriceTypeH\x02R\tpriceType\x88\x01\x01B\b\n" +
	"\x06_priceB\x10\n" +
	"\x0e_time_in_forceB\r\n" +
	"\v_price_type\"\xec\x01\n" +
	"\x16PostOrderAsyncResponse\x12.\n" +
	"\x10order_request_id\x18\x01 \x01(\tB\x04\xe2A\x01\x02R\x0eorderRequestId\x12a\n" +
	"\x17execution_report_status\x18\x02 \x01(\x0e2#.tinvest.OrderExecutionReportStatusB\x04\xe2A\x01\x02R\x15executionReportStatus\x12+\n" +
	"\x0ftrade_intent_id\x18\x03 \x01(\tH\x00R\rtradeIntentId\x88\x01\x01B\x12\n" +
	"\x10_trade_intent_id\"\xab\x01\n" +
	"\x12CancelOrderRequest\x12#\n" +
	"\n" +
	"account_id\x18\x01 \x01(\tB\x04\xe2A\x01\x02R\taccountId\x12\x1f\n" +
	"\border_id\x18\x02 \x01(\tB\x04\xe2A\x01\x02R\aorderId\x12=\n" +
	"\rorder_id_type\x18\x03 \x01(\x0e2\x14.tinvest.OrderIdTypeH\x00R\vorderIdType\x88\x01\x01B\x10\n" +
	"\x0e_order_id_type\"\x8e\x01\n" +
	"\x13CancelOrderResponse\x12.\n" +
	"\x04time\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\x04time\x12G\n" +
	"\x11response_metadata\x18\xfe\x01 \x01(\v2\x19.tinvest.ResponseMetadataR\x10responseMetadata\"\xe0\x01\n" +
	"\x14GetOrderStateRequest\x12#\n" +
	"\n" +
	"account_id\x18\x01 \x01(\tB\x04\xe2A\x01\x02R\taccountId\x12\x1f\n" +
	"\border_id\x18\x02 \x01(\tB\x04\xe2A\x01\x02R\aorderId\x121\n" +
	"\n" +
	"price_type\x18\x03 \x01(\x0e2\x12.tinvest.PriceTypeR\tpriceType\x12=\n" +
	"\rorder_id_type\x18\x04 \x01(\x0e2\x14.tinvest.OrderIdTypeH\x00R\vorderIdType\x88\x01\x01B\x10\n" +
	"\x0e_order_id_type\"7\n" +
	"\x10GetOrdersRequest\x12#\n" +
	"\n" +
	"account_id\x18\x01 \x01(\tB\x04\xe2A\x01\x02R\taccountId\"@\n" +
	"\x11GetOrdersResponse\x12+\n" +
	"\x06orders\x18\x01 \x03(\v2\x13.tinvest.OrderStateR\x06orders\"\xd6\b\n" +
	"\n" +
	"OrderState\x12\x19\n" +
	"\border_id\x18\x01 \x01(\tR\aorderId\x12[\n" +
	"\x17execution_report_status\x18\x02 \x01(\x0e2#.tinvest.OrderExecutionReportStatusR\x15executionReportStatus\x12%\n" +
	"\x0elots_requested\x18\x03 \x01(\x03R\rlotsRequested\x12#\n" +
	"\rlots_executed\x18\x04 \x01(\x03R\flotsExecuted\x12C\n" +
	"\x13initial_order_price\x18\x05 \x01(\v2\x13.tinvest.MoneyValueR\x11initialOrderPrice\x12E\n" +
	"\x14executed_order_price\x18\x06 \x01(\v2\x13.tinvest.MoneyValueR\x12executedOrderPrice\x12A\n" +
	"\x12total_order_amount\x18\a \x01(\v2\x13.tinvest.MoneyValueR\x10totalOrderAmount\x12I\n" +
	"\x16average_position_price\x18\b \x01(\v2\x13.tinvest.MoneyValueR\x14averagePositionPrice\x12B\n" +
	"\x12initial_commission\x18\t \x01(\v2\x13.tinvest.MoneyValueR\x11initialCommission\x12D\n" +
	"\x13executed_commission\x18\n" +
	" \x01(\v2\x13.tinvest.MoneyValueR\x12executedCommission\x12\x12\n" +
	"\x04figi\x18\v \x01(\tR\x04figi\x125\n" +
	"\tdirection\x18\f \x01(\x0e2\x17.tinvest.OrderDirectionR\tdirection\x12I\n" +
	"\x16initial_security_price\x18\r \x01(\v2\x13.tinvest.MoneyValueR\x14initialSecurityPrice\x12+\n" +
	"\x06stages\x18\x0e \x03(\v2\x13.tinvest.OrderStageR\x06stages\x12B\n" +
	"\x12service_commission\x18\x0f \x01(\v2\x13.tinvest.MoneyValueR\x11serviceCommission\x12\x1a\n" +
	"\bcurrency\x18\x10 \x01(\tR\bcurrency\x121\n" +
	"\n" +
	"order_type\x18\x11 \x01(\x0e2\x12.tinvest.OrderTypeR\torderType\x129\n" +
	"\n" +
	"order_date\x18\x12 \x01(\v2\x1a.google.protobuf.TimestampR\torderDate\x12%\n" +
	"\x0einstrument_uid\x18\x13 \x01(\tR\rinstrumentUid\x12(\n" +
	"\x10order_request_id\x18\x14 \x01(\tR\x0eorderRequestId\"\xb1\x01\n" +
	"\n" +
	"OrderStage\x12)\n" +
	"\x05price\x18\x01 \x01(\v2\x13.tinvest.MoneyValueR\x05price\x12\x1a\n" +
	"\bquantity\x18\x02 \x01(\x03R\bquantity\x12\x19\n" +
	"\btrade_id\x18\x03 \x01(\tR\atradeId\x12A\n" +
	"\x0eexecution_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\rexecutionTime\"\xac\x02\n" +
	"\x13ReplaceOrderRequest\x12#\n" +
	"\n" +
	"account_id\x18\x01 \x01(\tB\x04\xe2A\x01\x02R\taccountId\x12\x1f\n" +
	"\border_id\x18\x06 \x01(\tB\x04\xe2A\x01\x02R\aorderId\x12-\n" +
	"\x0fidempotency_key\x18\a \x01(\tB\x04\xe2A\x01\x02R\x0eidempotencyKey\x12 \n" +
	"\bquantity\x18\v \x01(\x03B\x04\xe2A\x01\x02R\bquantity\x12-\n" +
	"\x05price\x18\f \x01(\v2\x12.tinvest.QuotationH\x00R\x05price\x88\x01\x01\x126\n" +
	"\n" +
	"price_type\x18\r \x01(\x0e2\x12.tinvest.PriceTypeH\x01R\tpriceType\x88\x01\x01B\b\n" +
	"\x06_priceB\r\n" +
	"\v_price_type\"\x9c\x01\n" +
	"\x11GetMaxLotsRequest\x12#\n" +
	"\n" +
	"account_id\x18\x01 \x01(\tB\x04\xe2A\x01\x02R\taccountId\x12)\n" +
	"\rinstrument_id\x18\x02 \x01(\tB\x04\xe2A\x01\x02R\finstrumentId\x12-\n" +
	"\x05price\x18\x03 \x01(\v2\x12.tinvest.QuotationH\x00R\x05price\x88\x01\x01B\b\n" +
	"\x06_price\"\xcf\x04\n" +
	"\x12GetMaxLotsResponse\x12\x1a\n" +
	"\bcurrency\x18\x01 \x01(\tR\bcurrency\x12H\n" +
	"\n" +
	"buy_limits\x18\x02 \x01(\v2).tinvest.GetMaxLotsResponse.BuyLimitsViewR\tbuyLimits\x12U\n" +
	"\x11buy_margin_limits\x18\x03 \x01(\v2).tinvest.GetMaxLotsResponse.BuyLimitsViewR\x0fbuyMarginLimits\x12K\n" +
	"\vsell_limits\x18\x04 \x01(\v2*.tinvest.GetMaxLotsResponse.SellLimitsViewR\n" +
	"sellLimits\x12X\n" +
	"\x12sell_margin_limits\x18\x05 \x01(\v2*.tinvest.GetMaxLotsResponse.SellLimitsViewR\x10sellMarginLimits\x1a\x9e\x01\n" +
	"\rBuyLimitsView\x12<\n" +
	"\x10buy_money_amount\x18\x01 \x01(\v2\x12.tinvest.QuotationR\x0ebuyMoneyAmount\x12 \n" +
	"\fbuy_max_lots\x18\x02 \x01(\x03R\n" +
	"buyMaxLots\x12-\n" +
	"\x13buy_max_market_lots\x18\x03 \x01(\x03R\x10buyMaxMarketLots\x1a4\n" +
	"\x0eSellLimitsView\x12\"\n" +
	"\rsell_max_lots\x18\x01 \x01(\x03R\vsellMaxLots\"\xd7\x01\n" +
	"\x14GetOrderPriceRequest\x12\x1d\n" +
	"\n" +
	"account_id\x18\x01 \x01(\tR\taccountId\x12#\n" +
	"\rinstrument_id\x18\x02 \x01(\tR\finstrumentId\x12(\n" +
	"\x05price\x18\x03 \x01(\v2\x12.tinvest.QuotationR\x05price\x125\n" +
	"\tdirection\x18\f \x01(\x0e2\x17.tinvest.OrderDirectionR\tdirection\x12\x1a\n" +
	"\bquantity\x18\r \x01(\x03R\bquantity\"\xe4\x06\n" +
	"\x15GetOrderPriceResponse\x12A\n" +
	"\x12total_order_amount\x18\x01 \x01(\v2\x13.tinvest.MoneyValueR\x10totalOrderAmount\x12E\n" +
	"\x14initial_order_amount\x18\x05 \x01(\v2\x13.tinvest.MoneyValueR\x12initialOrderAmount\x12%\n" +
	"\x0elots_requested\x18\x03 \x01(\x03R\rlotsRequested\x12D\n" +
	"\x13executed_commission\x18\a \x01(\v2\x13.tinvest.MoneyValueR\x12executedCommission\x12K\n" +
	"\x17executed_commission_rub\x18\b \x01(\v2\x13.tinvest.MoneyValueR\x15executedCommissionRub\x12B\n" +
	"\x12service_commission\x18\t \x01(\v2\x13.tinvest.MoneyValueR\x11serviceCommission\x12<\n" +
	"\x0fdeal_commission\x18\n" +
	" \x01(\v2\x13.tinvest.MoneyValueR\x0edealCommission\x12I\n" +
	"\n" +
	"extra_bond\x18\f \x01(\v2(.tinvest.GetOrderPriceResponse.ExtraBondH\x00R\textraBond\x12O\n" +
	"\fextra_future\x18\r \x01(\v2*.tinvest.GetOrderPriceResponse.ExtraFutureH\x00R\vextraFuture\x1a\x89\x01\n" +
	"\tExtraBond\x120\n" +
	"\taci_value\x18\x02 \x01(\v2\x13.tinvest.MoneyValueR\baciValue\x12J\n" +
	"\x17nominal_conversion_rate\x18\x03 \x01(\v2\x12.tinvest.QuotationR\x15nominalConversionRate\x1aI\n" +
	"\vExtraFuture\x12:\n" +
	"\x0einitial_margin\x18\x02 \x01(\v2\x13.tinvest.MoneyValueR\rinitialMarginB\x12\n" +
	"\x10instrument_extra\"|\n" +
	"\x17OrderStateStreamRequest\x12\x1a\n" +
	"\baccounts\x18\x01 \x03(\tR\baccounts\x12/\n" +
	"\x11ping_delay_millis\x18\x0f \x01(\x05H\x00R\x0fpingDelayMillis\x88\x01\x01B\x14\n" +
	"\x12_ping_delay_millis\"\xe6\x01\n" +
	"\x14SubscriptionResponse\x12\x1f\n" +
	"\vtracking_id\x18\x01 \x01(\tR\n" +
	"trackingId\x129\n" +
	"\x06status\x18\x02 \x01(\x0e2!.tinvest.ResultSubscriptionStatusR\x06status\x12\x1b\n" +
	"\tstream_id\x18\x04 \x01(\tR\bstreamId\x12\x1a\n" +
	"\baccounts\x18\x05 \x03(\tR\baccounts\x12/\n" +
	"\x05error\x18\a \x01(\v2\x14.tinvest.ErrorDetailH\x00R\x05error\x88\x01\x01B\b\n" +
	"\x06_error\"\x87\x10\n" +
	"\x18OrderStateStreamResponse\x12O\n" +
	"\vorder_state\x18\x01 \x01(\v2,.tinvest.OrderStateStreamResponse.OrderStateH\x00R\n" +
	"orderState\x12#\n" +
	"\x04ping\x18\x02 \x01(\v2\r.tinvest.PingH\x00R\x04ping\x12C\n" +
	"\fsubscription\x18\x03 \x01(\v2\x1d.tinvest.SubscriptionResponseH\x00R\fsubscription\x1a\xdc\n" +
	"\n" +
	"\n" +
	"OrderState\x12\x19\n" +
	"\border_id\x18\x01 \x01(\tR\aorderId\x12-\n" +
	"\x10order_request_id\x18\x02 \x01(\tH\x00R\x0eorderRequestId\x88\x01\x01\x12\x1f\n" +
	"\vclient_code\x18\x03 \x01(\tR\n" +
	"clientCode\x129\n" +
	"\n" +
	"created_at\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x12[\n" +
	"\x17execution_report_status\x18\x05 \x01(\x0e2#.tinvest.OrderExecutionReportStatusR\x15executionReportStatus\x12W\n" +
	"\vstatus_info\x18\x06 \x01(\x0e21.tinvest.OrderStateStreamResponse.StatusCauseInfoH\x01R\n" +
	"statusInfo\x88\x01\x01\x12\x16\n" +
	"\x06ticker\x18\a \x01(\tR\x06ticker\x12\x1d\n" +
	"\n" +
	"class_code\x18\b \x01(\tR\tclassCode\x12\x19\n" +
	"\blot_size\x18\t \x01(\x05R\alotSize\x125\n" +
	"\tdirection\x18\n" +
	" \x01(\x0e2\x17.tinvest.OrderDirectionR\tdirection\x12<\n" +
	"\rtime_in_force\x18\v \x01(\x0e2\x18.tinvest.TimeInForceTypeR\vtimeInForce\x121\n" +
	"\n" +
	"order_type\x18\f \x01(\x0e2\x12.tinvest.OrderTypeR\torderType\x12\x1d\n" +
	"\n" +
	"account_id\x18\r \x01(\tR\taccountId\x12C\n" +
	"\x13initial_order_price\x18\x16 \x01(\v2\x13.tinvest.MoneyValueR\x11initialOrderPrice\x124\n" +
	"\vorder_price\x18\x17 \x01(\v2\x13.tinvest.MoneyValueR\n" +
	"orderPrice\x120\n" +
	"\x06amount\x18\x18 \x01(\v2\x13.tinvest.MoneyValueH\x02R\x06amount\x88\x01\x01\x12E\n" +
	"\x14executed_order_price\x18\x19 \x01(\v2\x13.tinvest.MoneyValueR\x12executedOrderPrice\x12\x1a\n" +
	"\bcurrency\x18\x1a \x01(\tR\bcurrency\x12%\n" +
	"\x0elots_requested\x18\x1b \x01(\x03R\rlotsRequested\x12#\n" +
	"\rlots_executed\x18\x1c \x01(\x03R\flotsExecuted\x12\x1b\n" +
	"\tlots_left\x18\x1d \x01(\x03R\blotsLeft\x12%\n" +
	"\x0elots_cancelled\x18\x1e \x01(\x03R\rlotsCancelled\x12I\n" +
	"\x06marker\x18\x1f \x01(\x0e2,.tinvest.OrderStateStreamResponse.MarkerTypeH\x03R\x06marker\x88\x01\x01\x12+\n" +
	"\x06trades\x18! \x03(\v2\x13.tinvest.OrderTradeR\x06trades\x12C\n" +
	"\x0fcompletion_time\x18# \x01(\v2\x1a.google.protobuf.TimestampR\x0ecompletionTime\x12\x1a\n" +
	"\bexchange\x18$ \x01(\tR\bexchange\x12%\n" +
	"\x0einstrument_uid\x18) \x01(\tR\rinstrumentUidB\x13\n" +
	"\x11_order_request_idB\x0e\n" +
	"\f_status_infoB\t\n" +
	"\a_amountB\t\n" +
	"\a_marker\"\xaf\x01\n" +
	"\n" +
	"MarkerType\x12\x12\n" +
	"\x0eMARKER_UNKNOWN\x10\x00\x12\x11\n" +
	"\rMARKER_BROKER\x10\x01\x12\x0f\n" +
	"\vMARKER_CHAT\x10\x02\x12\x10\n" +
	"\fMARKER_PAPER\x10\x03\x12\x11\n" +
	"\rMARKER_MARGIN\x10\x04\x12\x10\n" +
	"\fMARKER_TKBNM\x10\x05\x12\x10\n" +
	"\fMARKER_SHORT\x10\x06\x12\x11\n" +
	"\rMARKER_SPECMM\x10\a\x12\r\n" +
	"\tMARKER_PO\x10\b\"\x93\x02\n" +
	"\x0fStatusCauseInfo\x12\x15\n" +
	"\x11CAUSE_UNSPECIFIED\x10\x00\x12\x1d\n" +
	"\x19CAUSE_CANCELLED_BY_CLIENT\x10\x0f\x12\x1f\n" +
	"\x1bCAUSE_CANCELLED_BY_EXCHANGE\x10\x01\x12'\n" +
	"#CAUSE_CANCELLED_NOT_ENOUGH_POSITION\x10\x02\x12#\n" +
	"\x1fCAUSE_CANCELLED_BY_CLIENT_BLOCK\x10\x03\x12\x1c\n" +
	"\x18CAUSE_REJECTED_BY_BROKER\x10\x04\x12\x1e\n" +
	"\x1aCAUSE_REJECTED_BY_EXCHANGE\x10\x05\x12\x1d\n" +
	"\x19CAUSE_CANCELLED_BY_BROKER\x10\x06B\t\n" +
	"\apayload*d\n" +
	"\x0eOrderDirection\x12\x1f\n" +
	"\x1bORDER_DIRECTION_UNSPECIFIED\x10\x00\x12\x17\n" +
	"\x13ORDER_DIRECTION_BUY\x10\x01\x12\x18\n" +
	"\x14ORDER_DIRECTION_SELL\x10\x02*n\n" +
	"\tOrderType\x12\x1a\n" +
	"\x16ORDER_TYPE_UNSPECIFIED\x10\x00\x12\x14\n" +
	"\x10ORDER_TYPE_LIMIT\x10\x01\x12\x15\n" +
	"\x11ORDER_TYPE_MARKET\x10\x02\x12\x18\n" +
	"\x14ORDER_TYPE_BESTPRICE\x10\x03*\x80\x02\n" +
	"\x1aOrderExecutionReportStatus\x12'\n" +
	"#EXECUTION_REPORT_STATUS_UNSPECIFIED\x10\x00\x12 \n" +
	"\x1cEXECUTION_REPORT_STATUS_FILL\x10\x01\x12$\n" +
	" EXECUTION_REPORT_STATUS_REJECTED\x10\x02\x12%\n" +
	"!EXECUTION_REPORT_STATUS_CANCELLED\x10\x03\x12\x1f\n" +
	"\x1bEXECUTION_REPORT_STATUS_NEW\x10\x04\x12)\n" +
	"%EXECUTION_REPORT_STATUS_PARTIALLYFILL\x10\x05*\x88\x01\n" +
	"\x0fTimeInForceType\x12\x1d\n" +
	"\x19TIME_IN_FORCE_UNSPECIFIED\x10\x00\x12\x15\n" +
	"\x11TIME_IN_FORCE_DAY\x10\x01\x12\x1f\n" +
	"\x1bTIME_IN_FORCE_FILL_AND_KILL\x10\x02\x12\x1e\n" +
	"\x1aTIME_IN_FORCE_FILL_OR_KILL\x10\x03*c\n" +
	"\vOrderIdType\x12\x1d\n" +
	"\x19ORDER_ID_TYPE_UNSPECIFIED\x10\x00\x12\x1a\n" +
	"\x16ORDER_ID_TYPE_EXCHANGE\x10\x01\x12\x19\n" +
	"\x15ORDER_ID_TYPE_REQUEST\x10\x022\xbf\x01\n" +
	"\x13OrdersStreamService\x12M\n" +
	"\fTradesStream\x12\x1c.tinvest.TradesStreamRequest\x1a\x1d.tinvest.TradesStreamResponse0\x01\x12Y\n" +
	"\x10OrderStateStream\x12 .tinvest.OrderStateStreamRequest\x1a!.tinvest.OrderStateStreamResponse0\x012\xda\x04\n" +
	"\rOrdersService\x12B\n" +
	"\tPostOrder\x12\x19.tinvest.PostOrderRequest\x1a\x1a.tinvest.PostOrderResponse\x12Q\n" +
	"\x0ePostOrderAsync\x12\x1e.tinvest.PostOrderAsyncRequest\x1a\x1f.tinvest.PostOrderAsyncResponse\x12H\n" +
	"\vCancelOrder\x12\x1b.tinvest.CancelOrderRequest\x1a\x1c.tinvest.CancelOrderResponse\x12C\n" +
	"\rGetOrderState\x12\x1d.tinvest.GetOrderStateRequest\x1a\x13.tinvest.OrderState\x12B\n" +
	"\tGetOrders\x12\x19.tinvest.GetOrdersRequest\x1a\x1a.tinvest.GetOrdersResponse\x12H\n" +
	"\fReplaceOrder\x12\x1c.tinvest.ReplaceOrderRequest\x1a\x1a.tinvest.PostOrderResponse\x12E\n" +
	"\n" +
	"GetMaxLots\x12\x1a.tinvest.GetMaxLotsRequest\x1a\x1b.tinvest.GetMaxLotsResponse\x12N\n" +
	"\rGetOrderPrice\x12\x1d.tinvest.GetOrderPriceRequest\x1a\x1e.tinvest.GetOrderPriceResponseB\x87\x01\n" +
	"\x1cru.tinkoff.piapi.contract.v1P\x01Z2github.com/Mar1eena/trb_proto/services/tinvest/trb\xa2\x02\x05TIAPI\xaa\x02\x14Tinkoff.InvestApi.V1\xca\x02\x11Tinkoff\\Invest\\V1b\x06proto3"

var (
	file_tinvest_trb_orders_proto_rawDescOnce sync.Once
	file_tinvest_trb_orders_proto_rawDescData []byte
)

func file_tinvest_trb_orders_proto_rawDescGZIP() []byte {
	file_tinvest_trb_orders_proto_rawDescOnce.Do(func() {
		file_tinvest_trb_orders_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_tinvest_trb_orders_proto_rawDesc), len(file_tinvest_trb_orders_proto_rawDesc)))
	})
	return file_tinvest_trb_orders_proto_rawDescData
}

var file_tinvest_trb_orders_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_tinvest_trb_orders_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_tinvest_trb_orders_proto_goTypes = []any{
	(OrderDirection)(0),                           // 0: tinvest.OrderDirection
	(OrderType)(0),                                // 1: tinvest.OrderType
	(OrderExecutionReportStatus)(0),               // 2: tinvest.OrderExecutionReportStatus
	(TimeInForceType)(0),                          // 3: tinvest.TimeInForceType
	(OrderIdType)(0),                              // 4: tinvest.OrderIdType
	(OrderStateStreamResponse_MarkerType)(0),      // 5: tinvest.OrderStateStreamResponse.MarkerType
	(OrderStateStreamResponse_StatusCauseInfo)(0), // 6: tinvest.OrderStateStreamResponse.StatusCauseInfo
	(*TradesStreamRequest)(nil),                   // 7: tinvest.TradesStreamRequest
	(*TradesStreamResponse)(nil),                  // 8: tinvest.TradesStreamResponse
	(*OrderTrades)(nil),                           // 9: tinvest.OrderTrades
	(*OrderTrade)(nil),                            // 10: tinvest.OrderTrade
	(*PostOrderRequest)(nil),                      // 11: tinvest.PostOrderRequest
	(*PostOrderResponse)(nil),                     // 12: tinvest.PostOrderResponse
	(*PostOrderAsyncRequest)(nil),                 // 13: tinvest.PostOrderAsyncRequest
	(*PostOrderAsyncResponse)(nil),                // 14: tinvest.PostOrderAsyncResponse
	(*CancelOrderRequest)(nil),                    // 15: tinvest.CancelOrderRequest
	(*CancelOrderResponse)(nil),                   // 16: tinvest.CancelOrderResponse
	(*GetOrderStateRequest)(nil),                  // 17: tinvest.GetOrderStateRequest
	(*GetOrdersRequest)(nil),                      // 18: tinvest.GetOrdersRequest
	(*GetOrdersResponse)(nil),                     // 19: tinvest.GetOrdersResponse
	(*OrderState)(nil),                            // 20: tinvest.OrderState
	(*OrderStage)(nil),                            // 21: tinvest.OrderStage
	(*ReplaceOrderRequest)(nil),                   // 22: tinvest.ReplaceOrderRequest
	(*GetMaxLotsRequest)(nil),                     // 23: tinvest.GetMaxLotsRequest
	(*GetMaxLotsResponse)(nil),                    // 24: tinvest.GetMaxLotsResponse
	(*GetOrderPriceRequest)(nil),                  // 25: tinvest.GetOrderPriceRequest
	(*GetOrderPriceResponse)(nil),                 // 26: tinvest.GetOrderPriceResponse
	(*OrderStateStreamRequest)(nil),               // 27: tinvest.OrderStateStreamRequest
	(*SubscriptionResponse)(nil),                  // 28: tinvest.SubscriptionResponse
	(*OrderStateStreamResponse)(nil),              // 29: tinvest.OrderStateStreamResponse
	(*GetMaxLotsResponse_BuyLimitsView)(nil),      // 30: tinvest.GetMaxLotsResponse.BuyLimitsView
	(*GetMaxLotsResponse_SellLimitsView)(nil),     // 31: tinvest.GetMaxLotsResponse.SellLimitsView
	(*GetOrderPriceResponse_ExtraBond)(nil),       // 32: tinvest.GetOrderPriceResponse.ExtraBond
	(*GetOrderPriceResponse_ExtraFuture)(nil),     // 33: tinvest.GetOrderPriceResponse.ExtraFuture
	(*OrderStateStreamResponse_OrderState)(nil),   // 34: tinvest.OrderStateStreamResponse.OrderState
	(*Ping)(nil),                                  // 35: tinvest.Ping
	(*timestamppb.Timestamp)(nil),                 // 36: google.protobuf.Timestamp
	(*Quotation)(nil),                             // 37: tinvest.Quotation
	(PriceType)(0),                                // 38: tinvest.PriceType
	(*MoneyValue)(nil),                            // 39: tinvest.MoneyValue
	(*ResponseMetadata)(nil),                      // 40: tinvest.ResponseMetadata
	(ResultSubscriptionStatus)(0),                 // 41: tinvest.ResultSubscriptionStatus
	(*ErrorDetail)(nil),                           // 42: tinvest.ErrorDetail
}
var file_tinvest_trb_orders_proto_depIdxs = []int32{
	9,   // 0: tinvest.TradesStreamResponse.order_trades:type_name -> tinvest.OrderTrades
	35,  // 1: tinvest.TradesStreamResponse.ping:type_name -> tinvest.Ping
	28,  // 2: tinvest.TradesStreamResponse.subscription:type_name -> tinvest.SubscriptionResponse
	36,  // 3: tinvest.OrderTrades.created_at:type_name -> google.protobuf.Timestamp
	0,   // 4: tinvest.OrderTrades.direction:type_name -> tinvest.OrderDirection
	10,  // 5: tinvest.OrderTrades.trades:type_name -> tinvest.OrderTrade
	36,  // 6: tinvest.OrderTrade.date_time:type_name -> google.protobuf.Timestamp
	37,  // 7: tinvest.OrderTrade.price:type_name -> tinvest.Quotation
	37,  // 8: tinvest.PostOrderRequest.price:type_name -> tinvest.Quotation
	0,   // 9: tinvest.PostOrderRequest.direction:type_name -> tinvest.OrderDirection
	1,   // 10: tinvest.PostOrderRequest.order_type:type_name -> tinvest.OrderType
	3,   // 11: tinvest.PostOrderRequest.time_in_force:type_name -> tinvest.TimeInForceType
	38,  // 12: tinvest.PostOrderRequest.price_type:type_name -> tinvest.PriceType
	2,   // 13: tinvest.PostOrderResponse.execution_report_status:type_name -> tinvest.OrderExecutionReportStatus
	39,  // 14: tinvest.PostOrderResponse.initial_order_price:type_name -> tinvest.MoneyValue
	39,  // 15: tinvest.PostOrderResponse.executed_order_price:type_name -> tinvest.MoneyValue
	39,  // 16: tinvest.PostOrderResponse.total_order_amount:type_name -> tinvest.MoneyValue
	39,  // 17: tinvest.PostOrderResponse.initial_commission:type_name -> tinvest.MoneyValue
	39,  // 18: tinvest.PostOrderResponse.executed_commission:type_name -> tinvest.MoneyValue
	39,  // 19: tinvest.PostOrderResponse.aci_value:type_name -> tinvest.MoneyValue
	0,   // 20: tinvest.PostOrderResponse.direction:type_name -> tinvest.OrderDirection
	39,  // 21: tinvest.PostOrderResponse.initial_security_price:type_name -> tinvest.MoneyValue
	1,   // 22: tinvest.PostOrderResponse.order_type:type_name -> tinvest.OrderType
	37,  // 23: tinvest.PostOrderResponse.initial_order_price_pt:type_name -> tinvest.Quotation
	40,  // 24: tinvest.PostOrderResponse.response_metadata:type_name -> tinvest.ResponseMetadata
	37,  // 25: tinvest.PostOrderAsyncRequest.price:type_name -> tinvest.Quotation
	0,   // 26: tinvest.PostOrderAsyncRequest.direction:type_name -> tinvest.OrderDirection
	1,   // 27: tinvest.PostOrderAsyncRequest.order_type:type_name -> tinvest.OrderType
	3,   // 28: tinvest.PostOrderAsyncRequest.time_in_force:type_name -> tinvest.TimeInForceType
	38,  // 29: tinvest.PostOrderAsyncRequest.price_type:type_name -> tinvest.PriceType
	2,   // 30: tinvest.PostOrderAsyncResponse.execution_report_status:type_name -> tinvest.OrderExecutionReportStatus
	4,   // 31: tinvest.CancelOrderRequest.order_id_type:type_name -> tinvest.OrderIdType
	36,  // 32: tinvest.CancelOrderResponse.time:type_name -> google.protobuf.Timestamp
	40,  // 33: tinvest.CancelOrderResponse.response_metadata:type_name -> tinvest.ResponseMetadata
	38,  // 34: tinvest.GetOrderStateRequest.price_type:type_name -> tinvest.PriceType
	4,   // 35: tinvest.GetOrderStateRequest.order_id_type:type_name -> tinvest.OrderIdType
	20,  // 36: tinvest.GetOrdersResponse.orders:type_name -> tinvest.OrderState
	2,   // 37: tinvest.OrderState.execution_report_status:type_name -> tinvest.OrderExecutionReportStatus
	39,  // 38: tinvest.OrderState.initial_order_price:type_name -> tinvest.MoneyValue
	39,  // 39: tinvest.OrderState.executed_order_price:type_name -> tinvest.MoneyValue
	39,  // 40: tinvest.OrderState.total_order_amount:type_name -> tinvest.MoneyValue
	39,  // 41: tinvest.OrderState.average_position_price:type_name -> tinvest.MoneyValue
	39,  // 42: tinvest.OrderState.initial_commission:type_name -> tinvest.MoneyValue
	39,  // 43: tinvest.OrderState.executed_commission:type_name -> tinvest.MoneyValue
	0,   // 44: tinvest.OrderState.direction:type_name -> tinvest.OrderDirection
	39,  // 45: tinvest.OrderState.initial_security_price:type_name -> tinvest.MoneyValue
	21,  // 46: tinvest.OrderState.stages:type_name -> tinvest.OrderStage
	39,  // 47: tinvest.OrderState.service_commission:type_name -> tinvest.MoneyValue
	1,   // 48: tinvest.OrderState.order_type:type_name -> tinvest.OrderType
	36,  // 49: tinvest.OrderState.order_date:type_name -> google.protobuf.Timestamp
	39,  // 50: tinvest.OrderStage.price:type_name -> tinvest.MoneyValue
	36,  // 51: tinvest.OrderStage.execution_time:type_name -> google.protobuf.Timestamp
	37,  // 52: tinvest.ReplaceOrderRequest.price:type_name -> tinvest.Quotation
	38,  // 53: tinvest.ReplaceOrderRequest.price_type:type_name -> tinvest.PriceType
	37,  // 54: tinvest.GetMaxLotsRequest.price:type_name -> tinvest.Quotation
	30,  // 55: tinvest.GetMaxLotsResponse.buy_limits:type_name -> tinvest.GetMaxLotsResponse.BuyLimitsView
	30,  // 56: tinvest.GetMaxLotsResponse.buy_margin_limits:type_name -> tinvest.GetMaxLotsResponse.BuyLimitsView
	31,  // 57: tinvest.GetMaxLotsResponse.sell_limits:type_name -> tinvest.GetMaxLotsResponse.SellLimitsView
	31,  // 58: tinvest.GetMaxLotsResponse.sell_margin_limits:type_name -> tinvest.GetMaxLotsResponse.SellLimitsView
	37,  // 59: tinvest.GetOrderPriceRequest.price:type_name -> tinvest.Quotation
	0,   // 60: tinvest.GetOrderPriceRequest.direction:type_name -> tinvest.OrderDirection
	39,  // 61: tinvest.GetOrderPriceResponse.total_order_amount:type_name -> tinvest.MoneyValue
	39,  // 62: tinvest.GetOrderPriceResponse.initial_order_amount:type_name -> tinvest.MoneyValue
	39,  // 63: tinvest.GetOrderPriceResponse.executed_commission:type_name -> tinvest.MoneyValue
	39,  // 64: tinvest.GetOrderPriceResponse.executed_commission_rub:type_name -> tinvest.MoneyValue
	39,  // 65: tinvest.GetOrderPriceResponse.service_commission:type_name -> tinvest.MoneyValue
	39,  // 66: tinvest.GetOrderPriceResponse.deal_commission:type_name -> tinvest.MoneyValue
	32,  // 67: tinvest.GetOrderPriceResponse.extra_bond:type_name -> tinvest.GetOrderPriceResponse.ExtraBond
	33,  // 68: tinvest.GetOrderPriceResponse.extra_future:type_name -> tinvest.GetOrderPriceResponse.ExtraFuture
	41,  // 69: tinvest.SubscriptionResponse.status:type_name -> tinvest.ResultSubscriptionStatus
	42,  // 70: tinvest.SubscriptionResponse.error:type_name -> tinvest.ErrorDetail
	34,  // 71: tinvest.OrderStateStreamResponse.order_state:type_name -> tinvest.OrderStateStreamResponse.OrderState
	35,  // 72: tinvest.OrderStateStreamResponse.ping:type_name -> tinvest.Ping
	28,  // 73: tinvest.OrderStateStreamResponse.subscription:type_name -> tinvest.SubscriptionResponse
	37,  // 74: tinvest.GetMaxLotsResponse.BuyLimitsView.buy_money_amount:type_name -> tinvest.Quotation
	39,  // 75: tinvest.GetOrderPriceResponse.ExtraBond.aci_value:type_name -> tinvest.MoneyValue
	37,  // 76: tinvest.GetOrderPriceResponse.ExtraBond.nominal_conversion_rate:type_name -> tinvest.Quotation
	39,  // 77: tinvest.GetOrderPriceResponse.ExtraFuture.initial_margin:type_name -> tinvest.MoneyValue
	36,  // 78: tinvest.OrderStateStreamResponse.OrderState.created_at:type_name -> google.protobuf.Timestamp
	2,   // 79: tinvest.OrderStateStreamResponse.OrderState.execution_report_status:type_name -> tinvest.OrderExecutionReportStatus
	6,   // 80: tinvest.OrderStateStreamResponse.OrderState.status_info:type_name -> tinvest.OrderStateStreamResponse.StatusCauseInfo
	0,   // 81: tinvest.OrderStateStreamResponse.OrderState.direction:type_name -> tinvest.OrderDirection
	3,   // 82: tinvest.OrderStateStreamResponse.OrderState.time_in_force:type_name -> tinvest.TimeInForceType
	1,   // 83: tinvest.OrderStateStreamResponse.OrderState.order_type:type_name -> tinvest.OrderType
	39,  // 84: tinvest.OrderStateStreamResponse.OrderState.initial_order_price:type_name -> tinvest.MoneyValue
	39,  // 85: tinvest.OrderStateStreamResponse.OrderState.order_price:type_name -> tinvest.MoneyValue
	39,  // 86: tinvest.OrderStateStreamResponse.OrderState.amount:type_name -> tinvest.MoneyValue
	39,  // 87: tinvest.OrderStateStreamResponse.OrderState.executed_order_price:type_name -> tinvest.MoneyValue
	5,   // 88: tinvest.OrderStateStreamResponse.OrderState.marker:type_name -> tinvest.OrderStateStreamResponse.MarkerType
	10,  // 89: tinvest.OrderStateStreamResponse.OrderState.trades:type_name -> tinvest.OrderTrade
	36,  // 90: tinvest.OrderStateStreamResponse.OrderState.completion_time:type_name -> google.protobuf.Timestamp
	7,   // 91: tinvest.OrdersStreamService.TradesStream:input_type -> tinvest.TradesStreamRequest
	27,  // 92: tinvest.OrdersStreamService.OrderStateStream:input_type -> tinvest.OrderStateStreamRequest
	11,  // 93: tinvest.OrdersService.PostOrder:input_type -> tinvest.PostOrderRequest
	13,  // 94: tinvest.OrdersService.PostOrderAsync:input_type -> tinvest.PostOrderAsyncRequest
	15,  // 95: tinvest.OrdersService.CancelOrder:input_type -> tinvest.CancelOrderRequest
	17,  // 96: tinvest.OrdersService.GetOrderState:input_type -> tinvest.GetOrderStateRequest
	18,  // 97: tinvest.OrdersService.GetOrders:input_type -> tinvest.GetOrdersRequest
	22,  // 98: tinvest.OrdersService.ReplaceOrder:input_type -> tinvest.ReplaceOrderRequest
	23,  // 99: tinvest.OrdersService.GetMaxLots:input_type -> tinvest.GetMaxLotsRequest
	25,  // 100: tinvest.OrdersService.GetOrderPrice:input_type -> tinvest.GetOrderPriceRequest
	8,   // 101: tinvest.OrdersStreamService.TradesStream:output_type -> tinvest.TradesStreamResponse
	29,  // 102: tinvest.OrdersStreamService.OrderStateStream:output_type -> tinvest.OrderStateStreamResponse
	12,  // 103: tinvest.OrdersService.PostOrder:output_type -> tinvest.PostOrderResponse
	14,  // 104: tinvest.OrdersService.PostOrderAsync:output_type -> tinvest.PostOrderAsyncResponse
	16,  // 105: tinvest.OrdersService.CancelOrder:output_type -> tinvest.CancelOrderResponse
	20,  // 106: tinvest.OrdersService.GetOrderState:output_type -> tinvest.OrderState
	19,  // 107: tinvest.OrdersService.GetOrders:output_type -> tinvest.GetOrdersResponse
	12,  // 108: tinvest.OrdersService.ReplaceOrder:output_type -> tinvest.PostOrderResponse
	24,  // 109: tinvest.OrdersService.GetMaxLots:output_type -> tinvest.GetMaxLotsResponse
	26,  // 110: tinvest.OrdersService.GetOrderPrice:output_type -> tinvest.GetOrderPriceResponse
	101, // [101:111] is the sub-list for method output_type
	91,  // [91:101] is the sub-list for method input_type
	91,  // [91:91] is the sub-list for extension type_name
	91,  // [91:91] is the sub-list for extension extendee
	0,   // [0:91] is the sub-list for field type_name
}

func init() { file_tinvest_trb_orders_proto_init() }
func file_tinvest_trb_orders_proto_init() {
	if File_tinvest_trb_orders_proto != nil {
		return
	}
	file_tinvest_trb_common_proto_init()
	file_tinvest_trb_orders_proto_msgTypes[0].OneofWrappers = []any{}
	file_tinvest_trb_orders_proto_msgTypes[1].OneofWrappers = []any{
		(*TradesStreamResponse_OrderTrades)(nil),
		(*TradesStreamResponse_Ping)(nil),
		(*TradesStreamResponse_Subscription)(nil),
	}
	file_tinvest_trb_orders_proto_msgTypes[4].OneofWrappers = []any{}
	file_tinvest_trb_orders_proto_msgTypes[6].OneofWrappers = []any{}
	file_tinvest_trb_orders_proto_msgTypes[7].OneofWrappers = []any{}
	file_tinvest_trb_orders_proto_msgTypes[8].OneofWrappers = []any{}
	file_tinvest_trb_orders_proto_msgTypes[10].OneofWrappers = []any{}
	file_tinvest_trb_orders_proto_msgTypes[15].OneofWrappers = []any{}
	file_tinvest_trb_orders_proto_msgTypes[16].OneofWrappers = []any{}
	file_tinvest_trb_orders_proto_msgTypes[19].OneofWrappers = []any{
		(*GetOrderPriceResponse_ExtraBond_)(nil),
		(*GetOrderPriceResponse_ExtraFuture_)(nil),
	}
	file_tinvest_trb_orders_proto_msgTypes[20].OneofWrappers = []any{}
	file_tinvest_trb_orders_proto_msgTypes[21].OneofWrappers = []any{}
	file_tinvest_trb_orders_proto_msgTypes[22].OneofWrappers = []any{
		(*OrderStateStreamResponse_OrderState_)(nil),
		(*OrderStateStreamResponse_Ping)(nil),
		(*OrderStateStreamResponse_Subscription)(nil),
	}
	file_tinvest_trb_orders_proto_msgTypes[27].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_tinvest_trb_orders_proto_rawDesc), len(file_tinvest_trb_orders_proto_rawDesc)),
			NumEnums:      7,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_tinvest_trb_orders_proto_goTypes,
		DependencyIndexes: file_tinvest_trb_orders_proto_depIdxs,
		EnumInfos:         file_tinvest_trb_orders_proto_enumTypes,
		MessageInfos:      file_tinvest_trb_orders_proto_msgTypes,
	}.Build()
	File_tinvest_trb_orders_proto = out.File
	file_tinvest_trb_orders_proto_goTypes = nil
	file_tinvest_trb_orders_proto_depIdxs = nil
}

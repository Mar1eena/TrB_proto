// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: tinvest/trb/instruments.proto

package trb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Тип купонов.
type CouponType int32

const (
	CouponType_COUPON_TYPE_UNSPECIFIED CouponType = 0 //Неопределенное значение.
	CouponType_COUPON_TYPE_CONSTANT    CouponType = 1 //Постоянный.
	CouponType_COUPON_TYPE_FLOATING    CouponType = 2 //Плавающий.
	CouponType_COUPON_TYPE_DISCOUNT    CouponType = 3 //Дисконт.
	CouponType_COUPON_TYPE_MORTGAGE    CouponType = 4 //Ипотечный.
	CouponType_COUPON_TYPE_FIX         CouponType = 5 //Фиксированный.
	CouponType_COUPON_TYPE_VARIABLE    CouponType = 6 //Переменный.
	CouponType_COUPON_TYPE_OTHER       CouponType = 7 //Прочее.
)

// Enum value maps for CouponType.
var (
	CouponType_name = map[int32]string{
		0: "COUPON_TYPE_UNSPECIFIED",
		1: "COUPON_TYPE_CONSTANT",
		2: "COUPON_TYPE_FLOATING",
		3: "COUPON_TYPE_DISCOUNT",
		4: "COUPON_TYPE_MORTGAGE",
		5: "COUPON_TYPE_FIX",
		6: "COUPON_TYPE_VARIABLE",
		7: "COUPON_TYPE_OTHER",
	}
	CouponType_value = map[string]int32{
		"COUPON_TYPE_UNSPECIFIED": 0,
		"COUPON_TYPE_CONSTANT":    1,
		"COUPON_TYPE_FLOATING":    2,
		"COUPON_TYPE_DISCOUNT":    3,
		"COUPON_TYPE_MORTGAGE":    4,
		"COUPON_TYPE_FIX":         5,
		"COUPON_TYPE_VARIABLE":    6,
		"COUPON_TYPE_OTHER":       7,
	}
)

func (x CouponType) Enum() *CouponType {
	p := new(CouponType)
	*p = x
	return p
}

func (x CouponType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CouponType) Descriptor() protoreflect.EnumDescriptor {
	return file_tinvest_trb_instruments_proto_enumTypes[0].Descriptor()
}

func (CouponType) Type() protoreflect.EnumType {
	return &file_tinvest_trb_instruments_proto_enumTypes[0]
}

func (x CouponType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CouponType.Descriptor instead.
func (CouponType) EnumDescriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{0}
}

// Тип опциона по направлению сделки.
type OptionDirection int32

const (
	OptionDirection_OPTION_DIRECTION_UNSPECIFIED OptionDirection = 0 //Тип не определен.
	OptionDirection_OPTION_DIRECTION_PUT         OptionDirection = 1 //Опцион на продажу.
	OptionDirection_OPTION_DIRECTION_CALL        OptionDirection = 2 //Опцион на покупку.
)

// Enum value maps for OptionDirection.
var (
	OptionDirection_name = map[int32]string{
		0: "OPTION_DIRECTION_UNSPECIFIED",
		1: "OPTION_DIRECTION_PUT",
		2: "OPTION_DIRECTION_CALL",
	}
	OptionDirection_value = map[string]int32{
		"OPTION_DIRECTION_UNSPECIFIED": 0,
		"OPTION_DIRECTION_PUT":         1,
		"OPTION_DIRECTION_CALL":        2,
	}
)

func (x OptionDirection) Enum() *OptionDirection {
	p := new(OptionDirection)
	*p = x
	return p
}

func (x OptionDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OptionDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_tinvest_trb_instruments_proto_enumTypes[1].Descriptor()
}

func (OptionDirection) Type() protoreflect.EnumType {
	return &file_tinvest_trb_instruments_proto_enumTypes[1]
}

func (x OptionDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OptionDirection.Descriptor instead.
func (OptionDirection) EnumDescriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{1}
}

// Тип расчетов по опциону.
type OptionPaymentType int32

const (
	OptionPaymentType_OPTION_PAYMENT_TYPE_UNSPECIFIED OptionPaymentType = 0 //Тип не определен.
	OptionPaymentType_OPTION_PAYMENT_TYPE_PREMIUM     OptionPaymentType = 1 //Опционы с использованием премии в расчетах.
	OptionPaymentType_OPTION_PAYMENT_TYPE_MARGINAL    OptionPaymentType = 2 //Маржируемые опционы.
)

// Enum value maps for OptionPaymentType.
var (
	OptionPaymentType_name = map[int32]string{
		0: "OPTION_PAYMENT_TYPE_UNSPECIFIED",
		1: "OPTION_PAYMENT_TYPE_PREMIUM",
		2: "OPTION_PAYMENT_TYPE_MARGINAL",
	}
	OptionPaymentType_value = map[string]int32{
		"OPTION_PAYMENT_TYPE_UNSPECIFIED": 0,
		"OPTION_PAYMENT_TYPE_PREMIUM":     1,
		"OPTION_PAYMENT_TYPE_MARGINAL":    2,
	}
)

func (x OptionPaymentType) Enum() *OptionPaymentType {
	p := new(OptionPaymentType)
	*p = x
	return p
}

func (x OptionPaymentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OptionPaymentType) Descriptor() protoreflect.EnumDescriptor {
	return file_tinvest_trb_instruments_proto_enumTypes[2].Descriptor()
}

func (OptionPaymentType) Type() protoreflect.EnumType {
	return &file_tinvest_trb_instruments_proto_enumTypes[2]
}

func (x OptionPaymentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OptionPaymentType.Descriptor instead.
func (OptionPaymentType) EnumDescriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{2}
}

// Тип опциона по стилю.
type OptionStyle int32

const (
	OptionStyle_OPTION_STYLE_UNSPECIFIED OptionStyle = 0 //Тип не определен.
	OptionStyle_OPTION_STYLE_AMERICAN    OptionStyle = 1 //Американский опцион.
	OptionStyle_OPTION_STYLE_EUROPEAN    OptionStyle = 2 //Европейский опцион.
)

// Enum value maps for OptionStyle.
var (
	OptionStyle_name = map[int32]string{
		0: "OPTION_STYLE_UNSPECIFIED",
		1: "OPTION_STYLE_AMERICAN",
		2: "OPTION_STYLE_EUROPEAN",
	}
	OptionStyle_value = map[string]int32{
		"OPTION_STYLE_UNSPECIFIED": 0,
		"OPTION_STYLE_AMERICAN":    1,
		"OPTION_STYLE_EUROPEAN":    2,
	}
)

func (x OptionStyle) Enum() *OptionStyle {
	p := new(OptionStyle)
	*p = x
	return p
}

func (x OptionStyle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OptionStyle) Descriptor() protoreflect.EnumDescriptor {
	return file_tinvest_trb_instruments_proto_enumTypes[3].Descriptor()
}

func (OptionStyle) Type() protoreflect.EnumType {
	return &file_tinvest_trb_instruments_proto_enumTypes[3]
}

func (x OptionStyle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OptionStyle.Descriptor instead.
func (OptionStyle) EnumDescriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{3}
}

// Тип опциона по способу исполнения.
type OptionSettlementType int32

const (
	OptionSettlementType_OPTION_EXECUTION_TYPE_UNSPECIFIED       OptionSettlementType = 0 //Тип не определен.
	OptionSettlementType_OPTION_EXECUTION_TYPE_PHYSICAL_DELIVERY OptionSettlementType = 1 // Поставочный тип опциона.
	OptionSettlementType_OPTION_EXECUTION_TYPE_CASH_SETTLEMENT   OptionSettlementType = 2 //Расчетный тип опциона.
)

// Enum value maps for OptionSettlementType.
var (
	OptionSettlementType_name = map[int32]string{
		0: "OPTION_EXECUTION_TYPE_UNSPECIFIED",
		1: "OPTION_EXECUTION_TYPE_PHYSICAL_DELIVERY",
		2: "OPTION_EXECUTION_TYPE_CASH_SETTLEMENT",
	}
	OptionSettlementType_value = map[string]int32{
		"OPTION_EXECUTION_TYPE_UNSPECIFIED":       0,
		"OPTION_EXECUTION_TYPE_PHYSICAL_DELIVERY": 1,
		"OPTION_EXECUTION_TYPE_CASH_SETTLEMENT":   2,
	}
)

func (x OptionSettlementType) Enum() *OptionSettlementType {
	p := new(OptionSettlementType)
	*p = x
	return p
}

func (x OptionSettlementType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OptionSettlementType) Descriptor() protoreflect.EnumDescriptor {
	return file_tinvest_trb_instruments_proto_enumTypes[4].Descriptor()
}

func (OptionSettlementType) Type() protoreflect.EnumType {
	return &file_tinvest_trb_instruments_proto_enumTypes[4]
}

func (x OptionSettlementType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OptionSettlementType.Descriptor instead.
func (OptionSettlementType) EnumDescriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{4}
}

// Тип идентификатора инструмента. [Подробнее об идентификации инструментов](./faq_identification/).
type InstrumentIdType int32

const (
	InstrumentIdType_INSTRUMENT_ID_UNSPECIFIED       InstrumentIdType = 0 //Значение не определено.
	InstrumentIdType_INSTRUMENT_ID_TYPE_FIGI         InstrumentIdType = 1 //FIGI.
	InstrumentIdType_INSTRUMENT_ID_TYPE_TICKER       InstrumentIdType = 2 //Ticker.
	InstrumentIdType_INSTRUMENT_ID_TYPE_UID          InstrumentIdType = 3 //Уникальный идентификатор.
	InstrumentIdType_INSTRUMENT_ID_TYPE_POSITION_UID InstrumentIdType = 4 //Идентификатор позиции.
)

// Enum value maps for InstrumentIdType.
var (
	InstrumentIdType_name = map[int32]string{
		0: "INSTRUMENT_ID_UNSPECIFIED",
		1: "INSTRUMENT_ID_TYPE_FIGI",
		2: "INSTRUMENT_ID_TYPE_TICKER",
		3: "INSTRUMENT_ID_TYPE_UID",
		4: "INSTRUMENT_ID_TYPE_POSITION_UID",
	}
	InstrumentIdType_value = map[string]int32{
		"INSTRUMENT_ID_UNSPECIFIED":       0,
		"INSTRUMENT_ID_TYPE_FIGI":         1,
		"INSTRUMENT_ID_TYPE_TICKER":       2,
		"INSTRUMENT_ID_TYPE_UID":          3,
		"INSTRUMENT_ID_TYPE_POSITION_UID": 4,
	}
)

func (x InstrumentIdType) Enum() *InstrumentIdType {
	p := new(InstrumentIdType)
	*p = x
	return p
}

func (x InstrumentIdType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstrumentIdType) Descriptor() protoreflect.EnumDescriptor {
	return file_tinvest_trb_instruments_proto_enumTypes[5].Descriptor()
}

func (InstrumentIdType) Type() protoreflect.EnumType {
	return &file_tinvest_trb_instruments_proto_enumTypes[5]
}

func (x InstrumentIdType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstrumentIdType.Descriptor instead.
func (InstrumentIdType) EnumDescriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{5}
}

// Тип акций.
type ShareType int32

const (
	ShareType_SHARE_TYPE_UNSPECIFIED     ShareType = 0 //Значение не определено.
	ShareType_SHARE_TYPE_COMMON          ShareType = 1 //Обыкновенная.
	ShareType_SHARE_TYPE_PREFERRED       ShareType = 2 //Привилегированная.
	ShareType_SHARE_TYPE_ADR             ShareType = 3 //Американские депозитарные расписки.
	ShareType_SHARE_TYPE_GDR             ShareType = 4 //Глобальные депозитарные расписки.
	ShareType_SHARE_TYPE_MLP             ShareType = 5 //Товарищество с ограниченной ответственностью.
	ShareType_SHARE_TYPE_NY_REG_SHRS     ShareType = 6 //Акции из реестра Нью-Йорка.
	ShareType_SHARE_TYPE_CLOSED_END_FUND ShareType = 7 //Закрытый инвестиционный фонд.
	ShareType_SHARE_TYPE_REIT            ShareType = 8 //Траст недвижимости.
)

// Enum value maps for ShareType.
var (
	ShareType_name = map[int32]string{
		0: "SHARE_TYPE_UNSPECIFIED",
		1: "SHARE_TYPE_COMMON",
		2: "SHARE_TYPE_PREFERRED",
		3: "SHARE_TYPE_ADR",
		4: "SHARE_TYPE_GDR",
		5: "SHARE_TYPE_MLP",
		6: "SHARE_TYPE_NY_REG_SHRS",
		7: "SHARE_TYPE_CLOSED_END_FUND",
		8: "SHARE_TYPE_REIT",
	}
	ShareType_value = map[string]int32{
		"SHARE_TYPE_UNSPECIFIED":     0,
		"SHARE_TYPE_COMMON":          1,
		"SHARE_TYPE_PREFERRED":       2,
		"SHARE_TYPE_ADR":             3,
		"SHARE_TYPE_GDR":             4,
		"SHARE_TYPE_MLP":             5,
		"SHARE_TYPE_NY_REG_SHRS":     6,
		"SHARE_TYPE_CLOSED_END_FUND": 7,
		"SHARE_TYPE_REIT":            8,
	}
)

func (x ShareType) Enum() *ShareType {
	p := new(ShareType)
	*p = x
	return p
}

func (x ShareType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShareType) Descriptor() protoreflect.EnumDescriptor {
	return file_tinvest_trb_instruments_proto_enumTypes[6].Descriptor()
}

func (ShareType) Type() protoreflect.EnumType {
	return &file_tinvest_trb_instruments_proto_enumTypes[6]
}

func (x ShareType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShareType.Descriptor instead.
func (ShareType) EnumDescriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{6}
}

// Тип актива.
type AssetType int32

const (
	AssetType_ASSET_TYPE_UNSPECIFIED AssetType = 0 //Тип не определен.
	AssetType_ASSET_TYPE_CURRENCY    AssetType = 1 //Валюта.
	AssetType_ASSET_TYPE_COMMODITY   AssetType = 2 //Товар.
	AssetType_ASSET_TYPE_INDEX       AssetType = 3 //Индекс.
	AssetType_ASSET_TYPE_SECURITY    AssetType = 4 //Ценная бумага.
)

// Enum value maps for AssetType.
var (
	AssetType_name = map[int32]string{
		0: "ASSET_TYPE_UNSPECIFIED",
		1: "ASSET_TYPE_CURRENCY",
		2: "ASSET_TYPE_COMMODITY",
		3: "ASSET_TYPE_INDEX",
		4: "ASSET_TYPE_SECURITY",
	}
	AssetType_value = map[string]int32{
		"ASSET_TYPE_UNSPECIFIED": 0,
		"ASSET_TYPE_CURRENCY":    1,
		"ASSET_TYPE_COMMODITY":   2,
		"ASSET_TYPE_INDEX":       3,
		"ASSET_TYPE_SECURITY":    4,
	}
)

func (x AssetType) Enum() *AssetType {
	p := new(AssetType)
	*p = x
	return p
}

func (x AssetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssetType) Descriptor() protoreflect.EnumDescriptor {
	return file_tinvest_trb_instruments_proto_enumTypes[7].Descriptor()
}

func (AssetType) Type() protoreflect.EnumType {
	return &file_tinvest_trb_instruments_proto_enumTypes[7]
}

func (x AssetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssetType.Descriptor instead.
func (AssetType) EnumDescriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{7}
}

// Тип структурной ноты.
type StructuredProductType int32

const (
	StructuredProductType_SP_TYPE_UNSPECIFIED     StructuredProductType = 0 //Тип не определен.
	StructuredProductType_SP_TYPE_DELIVERABLE     StructuredProductType = 1 //Поставочный.
	StructuredProductType_SP_TYPE_NON_DELIVERABLE StructuredProductType = 2 //Беспоставочный.
)

// Enum value maps for StructuredProductType.
var (
	StructuredProductType_name = map[int32]string{
		0: "SP_TYPE_UNSPECIFIED",
		1: "SP_TYPE_DELIVERABLE",
		2: "SP_TYPE_NON_DELIVERABLE",
	}
	StructuredProductType_value = map[string]int32{
		"SP_TYPE_UNSPECIFIED":     0,
		"SP_TYPE_DELIVERABLE":     1,
		"SP_TYPE_NON_DELIVERABLE": 2,
	}
)

func (x StructuredProductType) Enum() *StructuredProductType {
	p := new(StructuredProductType)
	*p = x
	return p
}

func (x StructuredProductType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StructuredProductType) Descriptor() protoreflect.EnumDescriptor {
	return file_tinvest_trb_instruments_proto_enumTypes[8].Descriptor()
}

func (StructuredProductType) Type() protoreflect.EnumType {
	return &file_tinvest_trb_instruments_proto_enumTypes[8]
}

func (x StructuredProductType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StructuredProductType.Descriptor instead.
func (StructuredProductType) EnumDescriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{8}
}

// Тип действия со списком избранных инструментов.
type EditFavoritesActionType int32

const (
	EditFavoritesActionType_EDIT_FAVORITES_ACTION_TYPE_UNSPECIFIED EditFavoritesActionType = 0 //Тип не определен.
	EditFavoritesActionType_EDIT_FAVORITES_ACTION_TYPE_ADD         EditFavoritesActionType = 1 //Добавить в список.
	EditFavoritesActionType_EDIT_FAVORITES_ACTION_TYPE_DEL         EditFavoritesActionType = 2 //Удалить из списка.
)

// Enum value maps for EditFavoritesActionType.
var (
	EditFavoritesActionType_name = map[int32]string{
		0: "EDIT_FAVORITES_ACTION_TYPE_UNSPECIFIED",
		1: "EDIT_FAVORITES_ACTION_TYPE_ADD",
		2: "EDIT_FAVORITES_ACTION_TYPE_DEL",
	}
	EditFavoritesActionType_value = map[string]int32{
		"EDIT_FAVORITES_ACTION_TYPE_UNSPECIFIED": 0,
		"EDIT_FAVORITES_ACTION_TYPE_ADD":         1,
		"EDIT_FAVORITES_ACTION_TYPE_DEL":         2,
	}
)

func (x EditFavoritesActionType) Enum() *EditFavoritesActionType {
	p := new(EditFavoritesActionType)
	*p = x
	return p
}

func (x EditFavoritesActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EditFavoritesActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_tinvest_trb_instruments_proto_enumTypes[9].Descriptor()
}

func (EditFavoritesActionType) Type() protoreflect.EnumType {
	return &file_tinvest_trb_instruments_proto_enumTypes[9]
}

func (x EditFavoritesActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EditFavoritesActionType.Descriptor instead.
func (EditFavoritesActionType) EnumDescriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{9}
}

// Реальная площадка исполнения расчетов.
type RealExchange int32

const (
	RealExchange_REAL_EXCHANGE_UNSPECIFIED RealExchange = 0 //Тип не определен.
	RealExchange_REAL_EXCHANGE_MOEX        RealExchange = 1 //Московская биржа.
	RealExchange_REAL_EXCHANGE_RTS         RealExchange = 2 //Санкт-Петербургская биржа.
	RealExchange_REAL_EXCHANGE_OTC         RealExchange = 3 //Внебиржевой инструмент.
	RealExchange_REAL_EXCHANGE_DEALER      RealExchange = 4 //Инструмент, торгуемый на площадке брокера.
)

// Enum value maps for RealExchange.
var (
	RealExchange_name = map[int32]string{
		0: "REAL_EXCHANGE_UNSPECIFIED",
		1: "REAL_EXCHANGE_MOEX",
		2: "REAL_EXCHANGE_RTS",
		3: "REAL_EXCHANGE_OTC",
		4: "REAL_EXCHANGE_DEALER",
	}
	RealExchange_value = map[string]int32{
		"REAL_EXCHANGE_UNSPECIFIED": 0,
		"REAL_EXCHANGE_MOEX":        1,
		"REAL_EXCHANGE_RTS":         2,
		"REAL_EXCHANGE_OTC":         3,
		"REAL_EXCHANGE_DEALER":      4,
	}
)

func (x RealExchange) Enum() *RealExchange {
	p := new(RealExchange)
	*p = x
	return p
}

func (x RealExchange) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RealExchange) Descriptor() protoreflect.EnumDescriptor {
	return file_tinvest_trb_instruments_proto_enumTypes[10].Descriptor()
}

func (RealExchange) Type() protoreflect.EnumType {
	return &file_tinvest_trb_instruments_proto_enumTypes[10]
}

func (x RealExchange) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RealExchange.Descriptor instead.
func (RealExchange) EnumDescriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{10}
}

type Recommendation int32

const (
	Recommendation_RECOMMENDATION_UNSPECIFIED Recommendation = 0 // Не определено.
	Recommendation_RECOMMENDATION_BUY         Recommendation = 1 // Покупать.
	Recommendation_RECOMMENDATION_HOLD        Recommendation = 2 // Держать.
	Recommendation_RECOMMENDATION_SELL        Recommendation = 3 // Продавать.
)

// Enum value maps for Recommendation.
var (
	Recommendation_name = map[int32]string{
		0: "RECOMMENDATION_UNSPECIFIED",
		1: "RECOMMENDATION_BUY",
		2: "RECOMMENDATION_HOLD",
		3: "RECOMMENDATION_SELL",
	}
	Recommendation_value = map[string]int32{
		"RECOMMENDATION_UNSPECIFIED": 0,
		"RECOMMENDATION_BUY":         1,
		"RECOMMENDATION_HOLD":        2,
		"RECOMMENDATION_SELL":        3,
	}
)

func (x Recommendation) Enum() *Recommendation {
	p := new(Recommendation)
	*p = x
	return p
}

func (x Recommendation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Recommendation) Descriptor() protoreflect.EnumDescriptor {
	return file_tinvest_trb_instruments_proto_enumTypes[11].Descriptor()
}

func (Recommendation) Type() protoreflect.EnumType {
	return &file_tinvest_trb_instruments_proto_enumTypes[11]
}

func (x Recommendation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Recommendation.Descriptor instead.
func (Recommendation) EnumDescriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{11}
}

// Уровень риска облигации.
type RiskLevel int32

const (
	RiskLevel_RISK_LEVEL_UNSPECIFIED RiskLevel = 0 //Не указан.
	RiskLevel_RISK_LEVEL_LOW         RiskLevel = 1 //Низкий уровень риска.
	RiskLevel_RISK_LEVEL_MODERATE    RiskLevel = 2 //Средний уровень риска.
	RiskLevel_RISK_LEVEL_HIGH        RiskLevel = 3 //Высокий уровень риска.
)

// Enum value maps for RiskLevel.
var (
	RiskLevel_name = map[int32]string{
		0: "RISK_LEVEL_UNSPECIFIED",
		1: "RISK_LEVEL_LOW",
		2: "RISK_LEVEL_MODERATE",
		3: "RISK_LEVEL_HIGH",
	}
	RiskLevel_value = map[string]int32{
		"RISK_LEVEL_UNSPECIFIED": 0,
		"RISK_LEVEL_LOW":         1,
		"RISK_LEVEL_MODERATE":    2,
		"RISK_LEVEL_HIGH":        3,
	}
)

func (x RiskLevel) Enum() *RiskLevel {
	p := new(RiskLevel)
	*p = x
	return p
}

func (x RiskLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RiskLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_tinvest_trb_instruments_proto_enumTypes[12].Descriptor()
}

func (RiskLevel) Type() protoreflect.EnumType {
	return &file_tinvest_trb_instruments_proto_enumTypes[12]
}

func (x RiskLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RiskLevel.Descriptor instead.
func (RiskLevel) EnumDescriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{12}
}

type BondType int32

const (
	BondType_BOND_TYPE_UNSPECIFIED BondType = 0 // Тип облигации не определен.
	BondType_BOND_TYPE_REPLACED    BondType = 1 // Замещающая облигация.
)

// Enum value maps for BondType.
var (
	BondType_name = map[int32]string{
		0: "BOND_TYPE_UNSPECIFIED",
		1: "BOND_TYPE_REPLACED",
	}
	BondType_value = map[string]int32{
		"BOND_TYPE_UNSPECIFIED": 0,
		"BOND_TYPE_REPLACED":    1,
	}
)

func (x BondType) Enum() *BondType {
	p := new(BondType)
	*p = x
	return p
}

func (x BondType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BondType) Descriptor() protoreflect.EnumDescriptor {
	return file_tinvest_trb_instruments_proto_enumTypes[13].Descriptor()
}

func (BondType) Type() protoreflect.EnumType {
	return &file_tinvest_trb_instruments_proto_enumTypes[13]
}

func (x BondType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BondType.Descriptor instead.
func (BondType) EnumDescriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{13}
}

// Площадка торговли.
type InstrumentExchangeType int32

const (
	InstrumentExchangeType_INSTRUMENT_EXCHANGE_UNSPECIFIED InstrumentExchangeType = 0 // Площадка торговли не определена.
	InstrumentExchangeType_INSTRUMENT_EXCHANGE_DEALER      InstrumentExchangeType = 1 // Бумага, торгуемая у дилера.
)

// Enum value maps for InstrumentExchangeType.
var (
	InstrumentExchangeType_name = map[int32]string{
		0: "INSTRUMENT_EXCHANGE_UNSPECIFIED",
		1: "INSTRUMENT_EXCHANGE_DEALER",
	}
	InstrumentExchangeType_value = map[string]int32{
		"INSTRUMENT_EXCHANGE_UNSPECIFIED": 0,
		"INSTRUMENT_EXCHANGE_DEALER":      1,
	}
)

func (x InstrumentExchangeType) Enum() *InstrumentExchangeType {
	p := new(InstrumentExchangeType)
	*p = x
	return p
}

func (x InstrumentExchangeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstrumentExchangeType) Descriptor() protoreflect.EnumDescriptor {
	return file_tinvest_trb_instruments_proto_enumTypes[14].Descriptor()
}

func (InstrumentExchangeType) Type() protoreflect.EnumType {
	return &file_tinvest_trb_instruments_proto_enumTypes[14]
}

func (x InstrumentExchangeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstrumentExchangeType.Descriptor instead.
func (InstrumentExchangeType) EnumDescriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{14}
}

type GetBondEventsRequest_EventType int32

const (
	GetBondEventsRequest_EVENT_TYPE_UNSPECIFIED GetBondEventsRequest_EventType = 0 //Неопределенное значение.
	GetBondEventsRequest_EVENT_TYPE_CPN         GetBondEventsRequest_EventType = 1 // Купон.
	GetBondEventsRequest_EVENT_TYPE_CALL        GetBondEventsRequest_EventType = 2 // Опцион (оферта).
	GetBondEventsRequest_EVENT_TYPE_MTY         GetBondEventsRequest_EventType = 3 // Погашение.
	GetBondEventsRequest_EVENT_TYPE_CONV        GetBondEventsRequest_EventType = 4 // Конвертация.
)

// Enum value maps for GetBondEventsRequest_EventType.
var (
	GetBondEventsRequest_EventType_name = map[int32]string{
		0: "EVENT_TYPE_UNSPECIFIED",
		1: "EVENT_TYPE_CPN",
		2: "EVENT_TYPE_CALL",
		3: "EVENT_TYPE_MTY",
		4: "EVENT_TYPE_CONV",
	}
	GetBondEventsRequest_EventType_value = map[string]int32{
		"EVENT_TYPE_UNSPECIFIED": 0,
		"EVENT_TYPE_CPN":         1,
		"EVENT_TYPE_CALL":        2,
		"EVENT_TYPE_MTY":         3,
		"EVENT_TYPE_CONV":        4,
	}
)

func (x GetBondEventsRequest_EventType) Enum() *GetBondEventsRequest_EventType {
	p := new(GetBondEventsRequest_EventType)
	*p = x
	return p
}

func (x GetBondEventsRequest_EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetBondEventsRequest_EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_tinvest_trb_instruments_proto_enumTypes[15].Descriptor()
}

func (GetBondEventsRequest_EventType) Type() protoreflect.EnumType {
	return &file_tinvest_trb_instruments_proto_enumTypes[15]
}

func (x GetBondEventsRequest_EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetBondEventsRequest_EventType.Descriptor instead.
func (GetBondEventsRequest_EventType) EnumDescriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{11, 0}
}

type GetAssetReportsResponse_AssetReportPeriodType int32

const (
	GetAssetReportsResponse_PERIOD_TYPE_UNSPECIFIED GetAssetReportsResponse_AssetReportPeriodType = 0 // Не указан.
	GetAssetReportsResponse_PERIOD_TYPE_QUARTER     GetAssetReportsResponse_AssetReportPeriodType = 1 // Квартальный.
	GetAssetReportsResponse_PERIOD_TYPE_SEMIANNUAL  GetAssetReportsResponse_AssetReportPeriodType = 2 // Полугодовой.
	GetAssetReportsResponse_PERIOD_TYPE_ANNUAL      GetAssetReportsResponse_AssetReportPeriodType = 3 // Годовой.
)

// Enum value maps for GetAssetReportsResponse_AssetReportPeriodType.
var (
	GetAssetReportsResponse_AssetReportPeriodType_name = map[int32]string{
		0: "PERIOD_TYPE_UNSPECIFIED",
		1: "PERIOD_TYPE_QUARTER",
		2: "PERIOD_TYPE_SEMIANNUAL",
		3: "PERIOD_TYPE_ANNUAL",
	}
	GetAssetReportsResponse_AssetReportPeriodType_value = map[string]int32{
		"PERIOD_TYPE_UNSPECIFIED": 0,
		"PERIOD_TYPE_QUARTER":     1,
		"PERIOD_TYPE_SEMIANNUAL":  2,
		"PERIOD_TYPE_ANNUAL":      3,
	}
)

func (x GetAssetReportsResponse_AssetReportPeriodType) Enum() *GetAssetReportsResponse_AssetReportPeriodType {
	p := new(GetAssetReportsResponse_AssetReportPeriodType)
	*p = x
	return p
}

func (x GetAssetReportsResponse_AssetReportPeriodType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetAssetReportsResponse_AssetReportPeriodType) Descriptor() protoreflect.EnumDescriptor {
	return file_tinvest_trb_instruments_proto_enumTypes[16].Descriptor()
}

func (GetAssetReportsResponse_AssetReportPeriodType) Type() protoreflect.EnumType {
	return &file_tinvest_trb_instruments_proto_enumTypes[16]
}

func (x GetAssetReportsResponse_AssetReportPeriodType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetAssetReportsResponse_AssetReportPeriodType.Descriptor instead.
func (GetAssetReportsResponse_AssetReportPeriodType) EnumDescriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{83, 0}
}

// Запрос расписания торгов.
type TradingSchedulesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Exchange      *string                `protobuf:"bytes,1,opt,name=exchange,proto3,oneof" json:"exchange,omitempty"` //Наименование биржи или расчетного календаря. <br/>Если не передается, возвращается информация по всем доступным торговым площадкам.
	From          *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=from,proto3,oneof" json:"from,omitempty"`         //Начало периода по UTC.
	To            *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=to,proto3,oneof" json:"to,omitempty"`             //Окончание периода по UTC.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TradingSchedulesRequest) Reset() {
	*x = TradingSchedulesRequest{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradingSchedulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingSchedulesRequest) ProtoMessage() {}

func (x *TradingSchedulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingSchedulesRequest.ProtoReflect.Descriptor instead.
func (*TradingSchedulesRequest) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{0}
}

func (x *TradingSchedulesRequest) GetExchange() string {
	if x != nil && x.Exchange != nil {
		return *x.Exchange
	}
	return ""
}

func (x *TradingSchedulesRequest) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *TradingSchedulesRequest) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

// Список торговых площадок.
type TradingSchedulesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Exchanges     []*TradingSchedule     `protobuf:"bytes,1,rep,name=exchanges,proto3" json:"exchanges,omitempty"` // Список торговых площадок и режимов торгов.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TradingSchedulesResponse) Reset() {
	*x = TradingSchedulesResponse{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradingSchedulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingSchedulesResponse) ProtoMessage() {}

func (x *TradingSchedulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingSchedulesResponse.ProtoReflect.Descriptor instead.
func (*TradingSchedulesResponse) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{1}
}

func (x *TradingSchedulesResponse) GetExchanges() []*TradingSchedule {
	if x != nil {
		return x.Exchanges
	}
	return nil
}

// Данные по торговой площадке.
type TradingSchedule struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Exchange      string                 `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange,omitempty"` // Наименование торговой площадки.
	Days          []*TradingDay          `protobuf:"bytes,2,rep,name=days,proto3" json:"days,omitempty"`         // Массив с торговыми и неторговыми днями.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TradingSchedule) Reset() {
	*x = TradingSchedule{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradingSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingSchedule) ProtoMessage() {}

func (x *TradingSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingSchedule.ProtoReflect.Descriptor instead.
func (*TradingSchedule) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{2}
}

func (x *TradingSchedule) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *TradingSchedule) GetDays() []*TradingDay {
	if x != nil {
		return x.Days
	}
	return nil
}

// Информация о времени торгов.
type TradingDay struct {
	state                          protoimpl.MessageState `protogen:"open.v1"`
	Date                           *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`                                                                                                 // Дата.
	IsTradingDay                   bool                   `protobuf:"varint,2,opt,name=is_trading_day,json=isTradingDay,proto3" json:"is_trading_day,omitempty"`                                                          // Признак торгового дня на бирже.
	StartTime                      *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                      // Время начала торгов по UTC.
	EndTime                        *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                            // Время окончания торгов по UTC.
	OpeningAuctionStartTime        *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=opening_auction_start_time,json=openingAuctionStartTime,proto3" json:"opening_auction_start_time,omitempty"`                        // Время начала аукциона открытия по UTC.
	ClosingAuctionEndTime          *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=closing_auction_end_time,json=closingAuctionEndTime,proto3" json:"closing_auction_end_time,omitempty"`                              // Время окончания аукциона закрытия по UTC.
	EveningOpeningAuctionStartTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=evening_opening_auction_start_time,json=eveningOpeningAuctionStartTime,proto3" json:"evening_opening_auction_start_time,omitempty"` // Время начала аукциона открытия вечерней сессии по UTC.
	EveningStartTime               *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=evening_start_time,json=eveningStartTime,proto3" json:"evening_start_time,omitempty"`                                              // Время начала вечерней сессии по UTC.
	EveningEndTime                 *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=evening_end_time,json=eveningEndTime,proto3" json:"evening_end_time,omitempty"`                                                    // Время окончания вечерней сессии по UTC.
	ClearingStartTime              *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=clearing_start_time,json=clearingStartTime,proto3" json:"clearing_start_time,omitempty"`                                           // Время начала основного клиринга по UTC.
	ClearingEndTime                *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=clearing_end_time,json=clearingEndTime,proto3" json:"clearing_end_time,omitempty"`                                                 // Время окончания основного клиринга по UTC.
	PremarketStartTime             *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=premarket_start_time,json=premarketStartTime,proto3" json:"premarket_start_time,omitempty"`                                        // Время начала премаркета по UTC.
	PremarketEndTime               *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=premarket_end_time,json=premarketEndTime,proto3" json:"premarket_end_time,omitempty"`                                              // Время окончания премаркета по UTC.
	ClosingAuctionStartTime        *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=closing_auction_start_time,json=closingAuctionStartTime,proto3" json:"closing_auction_start_time,omitempty"`                       // Время начала аукциона закрытия по UTC.
	OpeningAuctionEndTime          *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=opening_auction_end_time,json=openingAuctionEndTime,proto3" json:"opening_auction_end_time,omitempty"`                             // Время окончания аукциона открытия по UTC.
	Intervals                      []*TradingInterval     `protobuf:"bytes,18,rep,name=intervals,proto3" json:"intervals,omitempty"`                                                                                      // Торговые интервалы.
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *TradingDay) Reset() {
	*x = TradingDay{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradingDay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingDay) ProtoMessage() {}

func (x *TradingDay) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingDay.ProtoReflect.Descriptor instead.
func (*TradingDay) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{3}
}

func (x *TradingDay) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *TradingDay) GetIsTradingDay() bool {
	if x != nil {
		return x.IsTradingDay
	}
	return false
}

func (x *TradingDay) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *TradingDay) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *TradingDay) GetOpeningAuctionStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.OpeningAuctionStartTime
	}
	return nil
}

func (x *TradingDay) GetClosingAuctionEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ClosingAuctionEndTime
	}
	return nil
}

func (x *TradingDay) GetEveningOpeningAuctionStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EveningOpeningAuctionStartTime
	}
	return nil
}

func (x *TradingDay) GetEveningStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EveningStartTime
	}
	return nil
}

func (x *TradingDay) GetEveningEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EveningEndTime
	}
	return nil
}

func (x *TradingDay) GetClearingStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ClearingStartTime
	}
	return nil
}

func (x *TradingDay) GetClearingEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ClearingEndTime
	}
	return nil
}

func (x *TradingDay) GetPremarketStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.PremarketStartTime
	}
	return nil
}

func (x *TradingDay) GetPremarketEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.PremarketEndTime
	}
	return nil
}

func (x *TradingDay) GetClosingAuctionStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ClosingAuctionStartTime
	}
	return nil
}

func (x *TradingDay) GetOpeningAuctionEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.OpeningAuctionEndTime
	}
	return nil
}

func (x *TradingDay) GetIntervals() []*TradingInterval {
	if x != nil {
		return x.Intervals
	}
	return nil
}

// Запрос получения инструмента по идентификатору.
type InstrumentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IdType        InstrumentIdType       `protobuf:"varint,1,opt,name=id_type,json=idType,proto3,enum=tinvest.InstrumentIdType" json:"id_type,omitempty"` // Тип идентификатора инструмента. Возможные значения — `figi`, `ticker`. [Подробнее об идентификации инструментов](./faq_identification/).
	ClassCode     *string                `protobuf:"bytes,2,opt,name=class_code,json=classCode,proto3,oneof" json:"class_code,omitempty"`                 // Идентификатор `class_code`. Обязательный, если `id_type = ticker`.
	Id            string                 `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`                                                      // Идентификатор запрашиваемого инструмента.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InstrumentRequest) Reset() {
	*x = InstrumentRequest{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InstrumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentRequest) ProtoMessage() {}

func (x *InstrumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentRequest.ProtoReflect.Descriptor instead.
func (*InstrumentRequest) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{4}
}

func (x *InstrumentRequest) GetIdType() InstrumentIdType {
	if x != nil {
		return x.IdType
	}
	return InstrumentIdType_INSTRUMENT_ID_UNSPECIFIED
}

func (x *InstrumentRequest) GetClassCode() string {
	if x != nil && x.ClassCode != nil {
		return *x.ClassCode
	}
	return ""
}

func (x *InstrumentRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Запрос получения инструментов.
type InstrumentsRequest struct {
	state              protoimpl.MessageState  `protogen:"open.v1"`
	InstrumentStatus   *InstrumentStatus       `protobuf:"varint,1,opt,name=instrument_status,json=instrumentStatus,proto3,enum=tinvest.InstrumentStatus,oneof" json:"instrument_status,omitempty"`             //Статус запрашиваемых инструментов. [Возможные значения](#instrumentstatus).
	InstrumentExchange *InstrumentExchangeType `protobuf:"varint,2,opt,name=instrument_exchange,json=instrumentExchange,proto3,enum=tinvest.InstrumentExchangeType,oneof" json:"instrument_exchange,omitempty"` // Тип площадки торговли. [Возможные значения](#instrumentexchangetype).
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *InstrumentsRequest) Reset() {
	*x = InstrumentsRequest{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InstrumentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentsRequest) ProtoMessage() {}

func (x *InstrumentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentsRequest.ProtoReflect.Descriptor instead.
func (*InstrumentsRequest) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{5}
}

func (x *InstrumentsRequest) GetInstrumentStatus() InstrumentStatus {
	if x != nil && x.InstrumentStatus != nil {
		return *x.InstrumentStatus
	}
	return InstrumentStatus_INSTRUMENT_STATUS_UNSPECIFIED
}

func (x *InstrumentsRequest) GetInstrumentExchange() InstrumentExchangeType {
	if x != nil && x.InstrumentExchange != nil {
		return *x.InstrumentExchange
	}
	return InstrumentExchangeType_INSTRUMENT_EXCHANGE_UNSPECIFIED
}

// Параметры фильтрации опционов.
type FilterOptionsRequest struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	BasicAssetUid         *string                `protobuf:"bytes,1,opt,name=basic_asset_uid,json=basicAssetUid,proto3,oneof" json:"basic_asset_uid,omitempty"`                           //Идентификатор базового актива опциона.  Обязательный параметр.
	BasicAssetPositionUid *string                `protobuf:"bytes,2,opt,name=basic_asset_position_uid,json=basicAssetPositionUid,proto3,oneof" json:"basic_asset_position_uid,omitempty"` //Идентификатор позиции базового актива опциона.
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *FilterOptionsRequest) Reset() {
	*x = FilterOptionsRequest{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilterOptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterOptionsRequest) ProtoMessage() {}

func (x *FilterOptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterOptionsRequest.ProtoReflect.Descriptor instead.
func (*FilterOptionsRequest) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{6}
}

func (x *FilterOptionsRequest) GetBasicAssetUid() string {
	if x != nil && x.BasicAssetUid != nil {
		return *x.BasicAssetUid
	}
	return ""
}

func (x *FilterOptionsRequest) GetBasicAssetPositionUid() string {
	if x != nil && x.BasicAssetPositionUid != nil {
		return *x.BasicAssetPositionUid
	}
	return ""
}

// Информация об облигации.
type BondResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Instrument    *Bond                  `protobuf:"bytes,1,opt,name=instrument,proto3" json:"instrument,omitempty"` // Информация об облигации.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BondResponse) Reset() {
	*x = BondResponse{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BondResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BondResponse) ProtoMessage() {}

func (x *BondResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BondResponse.ProtoReflect.Descriptor instead.
func (*BondResponse) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{7}
}

func (x *BondResponse) GetInstrument() *Bond {
	if x != nil {
		return x.Instrument
	}
	return nil
}

// Список облигаций.
type BondsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Instruments   []*Bond                `protobuf:"bytes,1,rep,name=instruments,proto3" json:"instruments,omitempty"` //Массив облигаций.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BondsResponse) Reset() {
	*x = BondsResponse{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BondsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BondsResponse) ProtoMessage() {}

func (x *BondsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BondsResponse.ProtoReflect.Descriptor instead.
func (*BondsResponse) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{8}
}

func (x *BondsResponse) GetInstruments() []*Bond {
	if x != nil {
		return x.Instruments
	}
	return nil
}

// Запрос купонов по облигации.
type GetBondCouponsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated: Marked as deprecated in tinvest/trb/instruments.proto.
	Figi          string                 `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                                     //FIGI-идентификатор инструмента.
	From          *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=from,proto3,oneof" json:"from,omitempty"`                               //Начало запрашиваемого периода по UTC. Фильтрация по `coupon_date` — дата выплаты купона.
	To            *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=to,proto3,oneof" json:"to,omitempty"`                                   //Окончание запрашиваемого периода по UTC. Фильтрация по `coupon_date` — дата выплаты купона.
	InstrumentId  string                 `protobuf:"bytes,4,opt,name=instrument_id,json=instrumentId,proto3" json:"instrument_id,omitempty"` //Идентификатор инструмента — `figi` или `instrument_uid`.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBondCouponsRequest) Reset() {
	*x = GetBondCouponsRequest{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBondCouponsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBondCouponsRequest) ProtoMessage() {}

func (x *GetBondCouponsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBondCouponsRequest.ProtoReflect.Descriptor instead.
func (*GetBondCouponsRequest) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{9}
}

// Deprecated: Marked as deprecated in tinvest/trb/instruments.proto.
func (x *GetBondCouponsRequest) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *GetBondCouponsRequest) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *GetBondCouponsRequest) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *GetBondCouponsRequest) GetInstrumentId() string {
	if x != nil {
		return x.InstrumentId
	}
	return ""
}

// Купоны по облигации.
type GetBondCouponsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Events        []*Coupon              `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBondCouponsResponse) Reset() {
	*x = GetBondCouponsResponse{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBondCouponsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBondCouponsResponse) ProtoMessage() {}

func (x *GetBondCouponsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBondCouponsResponse.ProtoReflect.Descriptor instead.
func (*GetBondCouponsResponse) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{10}
}

func (x *GetBondCouponsResponse) GetEvents() []*Coupon {
	if x != nil {
		return x.Events
	}
	return nil
}

// События по облигации.
type GetBondEventsRequest struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	From          *timestamppb.Timestamp         `protobuf:"bytes,2,opt,name=from,proto3,oneof" json:"from,omitempty"`                                        //Начало запрашиваемого периода по UTC.
	To            *timestamppb.Timestamp         `protobuf:"bytes,3,opt,name=to,proto3,oneof" json:"to,omitempty"`                                            //Окончание запрашиваемого периода по UTC.
	InstrumentId  string                         `protobuf:"bytes,4,opt,name=instrument_id,json=instrumentId,proto3" json:"instrument_id,omitempty"`          //Идентификатор инструмента — `figi` или `instrument_uid`.
	Type          GetBondEventsRequest_EventType `protobuf:"varint,5,opt,name=type,proto3,enum=tinvest.GetBondEventsRequest_EventType" json:"type,omitempty"` //Тип события
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBondEventsRequest) Reset() {
	*x = GetBondEventsRequest{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBondEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBondEventsRequest) ProtoMessage() {}

func (x *GetBondEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBondEventsRequest.ProtoReflect.Descriptor instead.
func (*GetBondEventsRequest) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{11}
}

func (x *GetBondEventsRequest) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *GetBondEventsRequest) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *GetBondEventsRequest) GetInstrumentId() string {
	if x != nil {
		return x.InstrumentId
	}
	return ""
}

func (x *GetBondEventsRequest) GetType() GetBondEventsRequest_EventType {
	if x != nil {
		return x.Type
	}
	return GetBondEventsRequest_EVENT_TYPE_UNSPECIFIED
}

// Объект передачи информации о событии облигации.
type GetBondEventsResponse struct {
	state         protoimpl.MessageState             `protogen:"open.v1"`
	Events        []*GetBondEventsResponse_BondEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBondEventsResponse) Reset() {
	*x = GetBondEventsResponse{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBondEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBondEventsResponse) ProtoMessage() {}

func (x *GetBondEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBondEventsResponse.ProtoReflect.Descriptor instead.
func (*GetBondEventsResponse) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{12}
}

func (x *GetBondEventsResponse) GetEvents() []*GetBondEventsResponse_BondEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

// Объект передачи информации о купоне облигации.
type Coupon struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Figi            string                 `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                                                        //FIGI-идентификатор инструмента.
	CouponDate      *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=coupon_date,json=couponDate,proto3" json:"coupon_date,omitempty"`                          //Дата выплаты купона.
	CouponNumber    int64                  `protobuf:"varint,3,opt,name=coupon_number,json=couponNumber,proto3" json:"coupon_number,omitempty"`                   //Номер купона.
	FixDate         *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=fix_date,json=fixDate,proto3" json:"fix_date,omitempty"`                                   //Дата фиксации реестра для выплаты купона — опционально.
	PayOneBond      *MoneyValue            `protobuf:"bytes,5,opt,name=pay_one_bond,json=payOneBond,proto3" json:"pay_one_bond,omitempty"`                        //Выплата на одну облигацию.
	CouponType      CouponType             `protobuf:"varint,6,opt,name=coupon_type,json=couponType,proto3,enum=tinvest.CouponType" json:"coupon_type,omitempty"` //Тип купона.
	CouponStartDate *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=coupon_start_date,json=couponStartDate,proto3" json:"coupon_start_date,omitempty"`         //Начало купонного периода.
	CouponEndDate   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=coupon_end_date,json=couponEndDate,proto3" json:"coupon_end_date,omitempty"`               //Окончание купонного периода.
	CouponPeriod    int32                  `protobuf:"varint,9,opt,name=coupon_period,json=couponPeriod,proto3" json:"coupon_period,omitempty"`                   //Купонный период в днях.
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Coupon) Reset() {
	*x = Coupon{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Coupon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coupon) ProtoMessage() {}

func (x *Coupon) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coupon.ProtoReflect.Descriptor instead.
func (*Coupon) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{13}
}

func (x *Coupon) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *Coupon) GetCouponDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CouponDate
	}
	return nil
}

func (x *Coupon) GetCouponNumber() int64 {
	if x != nil {
		return x.CouponNumber
	}
	return 0
}

func (x *Coupon) GetFixDate() *timestamppb.Timestamp {
	if x != nil {
		return x.FixDate
	}
	return nil
}

func (x *Coupon) GetPayOneBond() *MoneyValue {
	if x != nil {
		return x.PayOneBond
	}
	return nil
}

func (x *Coupon) GetCouponType() CouponType {
	if x != nil {
		return x.CouponType
	}
	return CouponType_COUPON_TYPE_UNSPECIFIED
}

func (x *Coupon) GetCouponStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CouponStartDate
	}
	return nil
}

func (x *Coupon) GetCouponEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CouponEndDate
	}
	return nil
}

func (x *Coupon) GetCouponPeriod() int32 {
	if x != nil {
		return x.CouponPeriod
	}
	return 0
}

// Данные по валюте.
type CurrencyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Instrument    *Currency              `protobuf:"bytes,1,opt,name=instrument,proto3" json:"instrument,omitempty"` // Информация о валюте.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CurrencyResponse) Reset() {
	*x = CurrencyResponse{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CurrencyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyResponse) ProtoMessage() {}

func (x *CurrencyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyResponse.ProtoReflect.Descriptor instead.
func (*CurrencyResponse) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{14}
}

func (x *CurrencyResponse) GetInstrument() *Currency {
	if x != nil {
		return x.Instrument
	}
	return nil
}

// Данные по валютам.
type CurrenciesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Instruments   []*Currency            `protobuf:"bytes,1,rep,name=instruments,proto3" json:"instruments,omitempty"` //Массив валют.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CurrenciesResponse) Reset() {
	*x = CurrenciesResponse{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CurrenciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrenciesResponse) ProtoMessage() {}

func (x *CurrenciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrenciesResponse.ProtoReflect.Descriptor instead.
func (*CurrenciesResponse) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{15}
}

func (x *CurrenciesResponse) GetInstruments() []*Currency {
	if x != nil {
		return x.Instruments
	}
	return nil
}

// Данные по фонду.
type EtfResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Instrument    *Etf                   `protobuf:"bytes,1,opt,name=instrument,proto3" json:"instrument,omitempty"` // Информация о фонде.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EtfResponse) Reset() {
	*x = EtfResponse{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EtfResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EtfResponse) ProtoMessage() {}

func (x *EtfResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EtfResponse.ProtoReflect.Descriptor instead.
func (*EtfResponse) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{16}
}

func (x *EtfResponse) GetInstrument() *Etf {
	if x != nil {
		return x.Instrument
	}
	return nil
}

// Данные по фондам.
type EtfsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Instruments   []*Etf                 `protobuf:"bytes,1,rep,name=instruments,proto3" json:"instruments,omitempty"` //Массив фондов.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EtfsResponse) Reset() {
	*x = EtfsResponse{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EtfsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EtfsResponse) ProtoMessage() {}

func (x *EtfsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EtfsResponse.ProtoReflect.Descriptor instead.
func (*EtfsResponse) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{17}
}

func (x *EtfsResponse) GetInstruments() []*Etf {
	if x != nil {
		return x.Instruments
	}
	return nil
}

// Данные по фьючерсу.
type FutureResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Instrument    *Future                `protobuf:"bytes,1,opt,name=instrument,proto3" json:"instrument,omitempty"` // Информация о фьючерсу.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FutureResponse) Reset() {
	*x = FutureResponse{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FutureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FutureResponse) ProtoMessage() {}

func (x *FutureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FutureResponse.ProtoReflect.Descriptor instead.
func (*FutureResponse) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{18}
}

func (x *FutureResponse) GetInstrument() *Future {
	if x != nil {
		return x.Instrument
	}
	return nil
}

// Данные по фьючерсам.
type FuturesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Instruments   []*Future              `protobuf:"bytes,1,rep,name=instruments,proto3" json:"instruments,omitempty"` //Массив фьючерсов.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FuturesResponse) Reset() {
	*x = FuturesResponse{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FuturesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuturesResponse) ProtoMessage() {}

func (x *FuturesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuturesResponse.ProtoReflect.Descriptor instead.
func (*FuturesResponse) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{19}
}

func (x *FuturesResponse) GetInstruments() []*Future {
	if x != nil {
		return x.Instruments
	}
	return nil
}

// Данные по опциону.
type OptionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Instrument    *Option                `protobuf:"bytes,1,opt,name=instrument,proto3" json:"instrument,omitempty"` // Информация по опциону.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OptionResponse) Reset() {
	*x = OptionResponse{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionResponse) ProtoMessage() {}

func (x *OptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionResponse.ProtoReflect.Descriptor instead.
func (*OptionResponse) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{20}
}

func (x *OptionResponse) GetInstrument() *Option {
	if x != nil {
		return x.Instrument
	}
	return nil
}

// Данные по опционам.
type OptionsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Instruments   []*Option              `protobuf:"bytes,1,rep,name=instruments,proto3" json:"instruments,omitempty"` //Массив данных по опциону.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OptionsResponse) Reset() {
	*x = OptionsResponse{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionsResponse) ProtoMessage() {}

func (x *OptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionsResponse.ProtoReflect.Descriptor instead.
func (*OptionsResponse) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{21}
}

func (x *OptionsResponse) GetInstruments() []*Option {
	if x != nil {
		return x.Instruments
	}
	return nil
}

// Опцион.
type Option struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Uid                   string                 `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`                                                                                 //Уникальный идентификатор инструмента.
	PositionUid           string                 `protobuf:"bytes,2,opt,name=position_uid,json=positionUid,proto3" json:"position_uid,omitempty"`                                              //Уникальный идентификатор позиции.
	Ticker                string                 `protobuf:"bytes,3,opt,name=ticker,proto3" json:"ticker,omitempty"`                                                                           //Тикер инструмента.
	ClassCode             string                 `protobuf:"bytes,4,opt,name=class_code,json=classCode,proto3" json:"class_code,omitempty"`                                                    //Класс-код.
	BasicAssetPositionUid string                 `protobuf:"bytes,5,opt,name=basic_asset_position_uid,json=basicAssetPositionUid,proto3" json:"basic_asset_position_uid,omitempty"`            //Уникальный идентификатор позиции основного инструмента.
	TradingStatus         SecurityTradingStatus  `protobuf:"varint,21,opt,name=trading_status,json=tradingStatus,proto3,enum=tinvest.SecurityTradingStatus" json:"trading_status,omitempty"`   //Текущий режим торгов инструмента.
	RealExchange          RealExchange           `protobuf:"varint,31,opt,name=real_exchange,json=realExchange,proto3,enum=tinvest.RealExchange" json:"real_exchange,omitempty"`               //Реальная площадка исполнения расчетов (биржа).
	Direction             OptionDirection        `protobuf:"varint,41,opt,name=direction,proto3,enum=tinvest.OptionDirection" json:"direction,omitempty"`                                      //Направление опциона.
	PaymentType           OptionPaymentType      `protobuf:"varint,42,opt,name=payment_type,json=paymentType,proto3,enum=tinvest.OptionPaymentType" json:"payment_type,omitempty"`             //Тип расчетов по опциону.
	Style                 OptionStyle            `protobuf:"varint,43,opt,name=style,proto3,enum=tinvest.OptionStyle" json:"style,omitempty"`                                                  //Стиль опциона.
	SettlementType        OptionSettlementType   `protobuf:"varint,44,opt,name=settlement_type,json=settlementType,proto3,enum=tinvest.OptionSettlementType" json:"settlement_type,omitempty"` //Способ исполнения опциона.
	Name                  string                 `protobuf:"bytes,101,opt,name=name,proto3" json:"name,omitempty"`                                                                             //Название инструмента.
	Currency              string                 `protobuf:"bytes,111,opt,name=currency,proto3" json:"currency,omitempty"`                                                                     //Валюта.
	SettlementCurrency    string                 `protobuf:"bytes,112,opt,name=settlement_currency,json=settlementCurrency,proto3" json:"settlement_currency,omitempty"`                       //Валюта, в которой оценивается контракт.
	AssetType             string                 `protobuf:"bytes,131,opt,name=asset_type,json=assetType,proto3" json:"asset_type,omitempty"`                                                  //Тип актива.
	BasicAsset            string                 `protobuf:"bytes,132,opt,name=basic_asset,json=basicAsset,proto3" json:"basic_asset,omitempty"`                                               //Основной актив.
	Exchange              string                 `protobuf:"bytes,141,opt,name=exchange,proto3" json:"exchange,omitempty"`                                                                     // Tорговая площадка (секция биржи).
	CountryOfRisk         string                 `protobuf:"bytes,151,opt,name=country_of_risk,json=countryOfRisk,proto3" json:"country_of_risk,omitempty"`                                    //Код страны рисков.
	CountryOfRiskName     string                 `protobuf:"bytes,152,opt,name=country_of_risk_name,json=countryOfRiskName,proto3" json:"country_of_risk_name,omitempty"`                      //Наименование страны рисков.
	Sector                string                 `protobuf:"bytes,161,opt,name=sector,proto3" json:"sector,omitempty"`                                                                         //Сектор экономики.
	Brand                 *BrandData             `protobuf:"bytes,162,opt,name=brand,proto3" json:"brand,omitempty"`                                                                           // Информация о бренде.
	Lot                   int32                  `protobuf:"varint,201,opt,name=lot,proto3" json:"lot,omitempty"`                                                                              //Количество бумаг в лоте.
	BasicAssetSize        *Quotation             `protobuf:"bytes,211,opt,name=basic_asset_size,json=basicAssetSize,proto3" json:"basic_asset_size,omitempty"`                                 //Размер основного актива.
	// Deprecated: Marked as deprecated in tinvest/trb/instruments.proto.
	Klong *Quotation `protobuf:"bytes,221,opt,name=klong,proto3" json:"klong,omitempty"` //Коэффициент ставки риска длинной позиции по клиенту. 2 – клиент со стандартным уровнем риска (КСУР); 1 – клиент с повышенным уровнем риска (КПУР).
	// Deprecated: Marked as deprecated in tinvest/trb/instruments.proto.
	Kshort                *Quotation             `protobuf:"bytes,222,opt,name=kshort,proto3" json:"kshort,omitempty"`                                                                 //Коэффициент ставки риска короткой позиции по клиенту. 2 – клиент со стандартным уровнем риска (КСУР); 1 – клиент с повышенным уровнем риска (КПУР).
	Dlong                 *Quotation             `protobuf:"bytes,223,opt,name=dlong,proto3" json:"dlong,omitempty"`                                                                   //Ставка риска начальной маржи для КСУР лонг. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
	Dshort                *Quotation             `protobuf:"bytes,224,opt,name=dshort,proto3" json:"dshort,omitempty"`                                                                 //Ставка риска начальной маржи для КСУР шорт. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
	DlongMin              *Quotation             `protobuf:"bytes,225,opt,name=dlong_min,json=dlongMin,proto3" json:"dlong_min,omitempty"`                                             //Ставка риска начальной маржи для КПУР лонг. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
	DshortMin             *Quotation             `protobuf:"bytes,226,opt,name=dshort_min,json=dshortMin,proto3" json:"dshort_min,omitempty"`                                          //Ставка риска начальной маржи для КПУР шорт. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
	MinPriceIncrement     *Quotation             `protobuf:"bytes,231,opt,name=min_price_increment,json=minPriceIncrement,proto3" json:"min_price_increment,omitempty"`                //Минимальный шаг цены.
	StrikePrice           *MoneyValue            `protobuf:"bytes,241,opt,name=strike_price,json=strikePrice,proto3" json:"strike_price,omitempty"`                                    //Цена страйка.
	DlongClient           *Quotation             `protobuf:"bytes,290,opt,name=dlong_client,json=dlongClient,proto3" json:"dlong_client,omitempty"`                                    //Ставка риска в лонг с учетом текущего уровня риска портфеля клиента. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
	DshortClient          *Quotation             `protobuf:"bytes,291,opt,name=dshort_client,json=dshortClient,proto3" json:"dshort_client,omitempty"`                                 //Ставка риска в шорт с учетом текущего уровня риска портфеля клиента. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
	ExpirationDate        *timestamppb.Timestamp `protobuf:"bytes,301,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`                           //Дата истечения срока в формате UTC.
	FirstTradeDate        *timestamppb.Timestamp `protobuf:"bytes,311,opt,name=first_trade_date,json=firstTradeDate,proto3" json:"first_trade_date,omitempty"`                         //Дата начала обращения контракта в формате UTC.
	LastTradeDate         *timestamppb.Timestamp `protobuf:"bytes,312,opt,name=last_trade_date,json=lastTradeDate,proto3" json:"last_trade_date,omitempty"`                            //Дата исполнения в формате UTC.
	First_1MinCandleDate  *timestamppb.Timestamp `protobuf:"bytes,321,opt,name=first_1min_candle_date,json=first1minCandleDate,proto3" json:"first_1min_candle_date,omitempty"`        //Дата первой минутной свечи в формате UTC.
	First_1DayCandleDate  *timestamppb.Timestamp `protobuf:"bytes,322,opt,name=first_1day_candle_date,json=first1dayCandleDate,proto3" json:"first_1day_candle_date,omitempty"`        //Дата первой дневной свечи в формате UTC.
	ShortEnabledFlag      bool                   `protobuf:"varint,401,opt,name=short_enabled_flag,json=shortEnabledFlag,proto3" json:"short_enabled_flag,omitempty"`                  //Признак доступности для операций шорт.
	ForIisFlag            bool                   `protobuf:"varint,402,opt,name=for_iis_flag,json=forIisFlag,proto3" json:"for_iis_flag,omitempty"`                                    //Возможность покупки или продажи на ИИС.
	OtcFlag               bool                   `protobuf:"varint,403,opt,name=otc_flag,json=otcFlag,proto3" json:"otc_flag,omitempty"`                                               //Флаг, используемый ранее для определения внебиржевых инструментов. На данный момент не используется для торгуемых через API инструментов. Может использоваться как фильтр для операций, совершавшихся некоторое время назад на ОТС площадке.
	BuyAvailableFlag      bool                   `protobuf:"varint,404,opt,name=buy_available_flag,json=buyAvailableFlag,proto3" json:"buy_available_flag,omitempty"`                  //Признак доступности для покупки.
	SellAvailableFlag     bool                   `protobuf:"varint,405,opt,name=sell_available_flag,json=sellAvailableFlag,proto3" json:"sell_available_flag,omitempty"`               //Признак доступности для продажи.
	ForQualInvestorFlag   bool                   `protobuf:"varint,406,opt,name=for_qual_investor_flag,json=forQualInvestorFlag,proto3" json:"for_qual_investor_flag,omitempty"`       //Флаг, отображающий доступность торговли инструментом только для квалифицированных инвесторов.
	WeekendFlag           bool                   `protobuf:"varint,407,opt,name=weekend_flag,json=weekendFlag,proto3" json:"weekend_flag,omitempty"`                                   //Флаг, отображающий доступность торговли инструментом по выходным.
	BlockedTcaFlag        bool                   `protobuf:"varint,408,opt,name=blocked_tca_flag,json=blockedTcaFlag,proto3" json:"blocked_tca_flag,omitempty"`                        //Флаг заблокированного ТКС.
	ApiTradeAvailableFlag bool                   `protobuf:"varint,409,opt,name=api_trade_available_flag,json=apiTradeAvailableFlag,proto3" json:"api_trade_available_flag,omitempty"` //Возможность торговать инструментом через API.
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *Option) Reset() {
	*x = Option{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Option) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Option) ProtoMessage() {}

func (x *Option) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Option.ProtoReflect.Descriptor instead.
func (*Option) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{22}
}

func (x *Option) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Option) GetPositionUid() string {
	if x != nil {
		return x.PositionUid
	}
	return ""
}

func (x *Option) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *Option) GetClassCode() string {
	if x != nil {
		return x.ClassCode
	}
	return ""
}

func (x *Option) GetBasicAssetPositionUid() string {
	if x != nil {
		return x.BasicAssetPositionUid
	}
	return ""
}

func (x *Option) GetTradingStatus() SecurityTradingStatus {
	if x != nil {
		return x.TradingStatus
	}
	return SecurityTradingStatus_SECURITY_TRADING_STATUS_UNSPECIFIED
}

func (x *Option) GetRealExchange() RealExchange {
	if x != nil {
		return x.RealExchange
	}
	return RealExchange_REAL_EXCHANGE_UNSPECIFIED
}

func (x *Option) GetDirection() OptionDirection {
	if x != nil {
		return x.Direction
	}
	return OptionDirection_OPTION_DIRECTION_UNSPECIFIED
}

func (x *Option) GetPaymentType() OptionPaymentType {
	if x != nil {
		return x.PaymentType
	}
	return OptionPaymentType_OPTION_PAYMENT_TYPE_UNSPECIFIED
}

func (x *Option) GetStyle() OptionStyle {
	if x != nil {
		return x.Style
	}
	return OptionStyle_OPTION_STYLE_UNSPECIFIED
}

func (x *Option) GetSettlementType() OptionSettlementType {
	if x != nil {
		return x.SettlementType
	}
	return OptionSettlementType_OPTION_EXECUTION_TYPE_UNSPECIFIED
}

func (x *Option) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Option) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Option) GetSettlementCurrency() string {
	if x != nil {
		return x.SettlementCurrency
	}
	return ""
}

func (x *Option) GetAssetType() string {
	if x != nil {
		return x.AssetType
	}
	return ""
}

func (x *Option) GetBasicAsset() string {
	if x != nil {
		return x.BasicAsset
	}
	return ""
}

func (x *Option) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *Option) GetCountryOfRisk() string {
	if x != nil {
		return x.CountryOfRisk
	}
	return ""
}

func (x *Option) GetCountryOfRiskName() string {
	if x != nil {
		return x.CountryOfRiskName
	}
	return ""
}

func (x *Option) GetSector() string {
	if x != nil {
		return x.Sector
	}
	return ""
}

func (x *Option) GetBrand() *BrandData {
	if x != nil {
		return x.Brand
	}
	return nil
}

func (x *Option) GetLot() int32 {
	if x != nil {
		return x.Lot
	}
	return 0
}

func (x *Option) GetBasicAssetSize() *Quotation {
	if x != nil {
		return x.BasicAssetSize
	}
	return nil
}

// Deprecated: Marked as deprecated in tinvest/trb/instruments.proto.
func (x *Option) GetKlong() *Quotation {
	if x != nil {
		return x.Klong
	}
	return nil
}

// Deprecated: Marked as deprecated in tinvest/trb/instruments.proto.
func (x *Option) GetKshort() *Quotation {
	if x != nil {
		return x.Kshort
	}
	return nil
}

func (x *Option) GetDlong() *Quotation {
	if x != nil {
		return x.Dlong
	}
	return nil
}

func (x *Option) GetDshort() *Quotation {
	if x != nil {
		return x.Dshort
	}
	return nil
}

func (x *Option) GetDlongMin() *Quotation {
	if x != nil {
		return x.DlongMin
	}
	return nil
}

func (x *Option) GetDshortMin() *Quotation {
	if x != nil {
		return x.DshortMin
	}
	return nil
}

func (x *Option) GetMinPriceIncrement() *Quotation {
	if x != nil {
		return x.MinPriceIncrement
	}
	return nil
}

func (x *Option) GetStrikePrice() *MoneyValue {
	if x != nil {
		return x.StrikePrice
	}
	return nil
}

func (x *Option) GetDlongClient() *Quotation {
	if x != nil {
		return x.DlongClient
	}
	return nil
}

func (x *Option) GetDshortClient() *Quotation {
	if x != nil {
		return x.DshortClient
	}
	return nil
}

func (x *Option) GetExpirationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpirationDate
	}
	return nil
}

func (x *Option) GetFirstTradeDate() *timestamppb.Timestamp {
	if x != nil {
		return x.FirstTradeDate
	}
	return nil
}

func (x *Option) GetLastTradeDate() *timestamppb.Timestamp {
	if x != nil {
		return x.LastTradeDate
	}
	return nil
}

func (x *Option) GetFirst_1MinCandleDate() *timestamppb.Timestamp {
	if x != nil {
		return x.First_1MinCandleDate
	}
	return nil
}

func (x *Option) GetFirst_1DayCandleDate() *timestamppb.Timestamp {
	if x != nil {
		return x.First_1DayCandleDate
	}
	return nil
}

func (x *Option) GetShortEnabledFlag() bool {
	if x != nil {
		return x.ShortEnabledFlag
	}
	return false
}

func (x *Option) GetForIisFlag() bool {
	if x != nil {
		return x.ForIisFlag
	}
	return false
}

func (x *Option) GetOtcFlag() bool {
	if x != nil {
		return x.OtcFlag
	}
	return false
}

func (x *Option) GetBuyAvailableFlag() bool {
	if x != nil {
		return x.BuyAvailableFlag
	}
	return false
}

func (x *Option) GetSellAvailableFlag() bool {
	if x != nil {
		return x.SellAvailableFlag
	}
	return false
}

func (x *Option) GetForQualInvestorFlag() bool {
	if x != nil {
		return x.ForQualInvestorFlag
	}
	return false
}

func (x *Option) GetWeekendFlag() bool {
	if x != nil {
		return x.WeekendFlag
	}
	return false
}

func (x *Option) GetBlockedTcaFlag() bool {
	if x != nil {
		return x.BlockedTcaFlag
	}
	return false
}

func (x *Option) GetApiTradeAvailableFlag() bool {
	if x != nil {
		return x.ApiTradeAvailableFlag
	}
	return false
}

// Данные по акции.
type ShareResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Instrument    *Share                 `protobuf:"bytes,1,opt,name=instrument,proto3" json:"instrument,omitempty"` // Информация об акции.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShareResponse) Reset() {
	*x = ShareResponse{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShareResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareResponse) ProtoMessage() {}

func (x *ShareResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareResponse.ProtoReflect.Descriptor instead.
func (*ShareResponse) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{23}
}

func (x *ShareResponse) GetInstrument() *Share {
	if x != nil {
		return x.Instrument
	}
	return nil
}

// Данные по акциям.
type SharesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Instruments   []*Share               `protobuf:"bytes,1,rep,name=instruments,proto3" json:"instruments,omitempty"` //Массив акций.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SharesResponse) Reset() {
	*x = SharesResponse{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SharesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharesResponse) ProtoMessage() {}

func (x *SharesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharesResponse.ProtoReflect.Descriptor instead.
func (*SharesResponse) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{24}
}

func (x *SharesResponse) GetInstruments() []*Share {
	if x != nil {
		return x.Instruments
	}
	return nil
}

// Объект передачи информации об облигации.
type Bond struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Figi      string                 `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                            //FIGI-идентификатор инструмента.
	Ticker    string                 `protobuf:"bytes,2,opt,name=ticker,proto3" json:"ticker,omitempty"`                        //Тикер инструмента.
	ClassCode string                 `protobuf:"bytes,3,opt,name=class_code,json=classCode,proto3" json:"class_code,omitempty"` //Класс-код (секция торгов).
	Isin      string                 `protobuf:"bytes,4,opt,name=isin,proto3" json:"isin,omitempty"`                            //ISIN-идентификатор инструмента.
	Lot       int32                  `protobuf:"varint,5,opt,name=lot,proto3" json:"lot,omitempty"`                             //Лотность инструмента. Возможно совершение операций только на количества ценной бумаги, кратные параметру `lot`. [Подробнее](./glossary#lot).
	Currency  string                 `protobuf:"bytes,6,opt,name=currency,proto3" json:"currency,omitempty"`                    //Валюта расчетов.
	// Deprecated: Marked as deprecated in tinvest/trb/instruments.proto.
	Klong *Quotation `protobuf:"bytes,7,opt,name=klong,proto3" json:"klong,omitempty"` //Коэффициент ставки риска длинной позиции по клиенту. 2 – клиент со стандартным уровнем риска (КСУР); 1 – клиент с повышенным уровнем риска (КПУР).
	// Deprecated: Marked as deprecated in tinvest/trb/instruments.proto.
	Kshort                *Quotation             `protobuf:"bytes,8,opt,name=kshort,proto3" json:"kshort,omitempty"`                                                                         //Коэффициент ставки риска короткой позиции по клиенту. 2 – клиент со стандартным уровнем риска (КСУР); 1 – клиент с повышенным уровнем риска (КПУР).
	Dlong                 *Quotation             `protobuf:"bytes,9,opt,name=dlong,proto3" json:"dlong,omitempty"`                                                                           //Ставка риска начальной маржи для КСУР лонг. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
	Dshort                *Quotation             `protobuf:"bytes,10,opt,name=dshort,proto3" json:"dshort,omitempty"`                                                                        //Ставка риска начальной маржи для КСУР шорт. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
	DlongMin              *Quotation             `protobuf:"bytes,11,opt,name=dlong_min,json=dlongMin,proto3" json:"dlong_min,omitempty"`                                                    // Ставка риска начальной маржи для КПУР лонг. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
	DshortMin             *Quotation             `protobuf:"bytes,12,opt,name=dshort_min,json=dshortMin,proto3" json:"dshort_min,omitempty"`                                                 //Ставка риска начальной маржи для КПУР шорт. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
	ShortEnabledFlag      bool                   `protobuf:"varint,13,opt,name=short_enabled_flag,json=shortEnabledFlag,proto3" json:"short_enabled_flag,omitempty"`                         //Признак доступности для операций в шорт.
	Name                  string                 `protobuf:"bytes,15,opt,name=name,proto3" json:"name,omitempty"`                                                                            //Название инструмента.
	Exchange              string                 `protobuf:"bytes,16,opt,name=exchange,proto3" json:"exchange,omitempty"`                                                                    //Tорговая площадка (секция биржи).
	CouponQuantityPerYear int32                  `protobuf:"varint,17,opt,name=coupon_quantity_per_year,json=couponQuantityPerYear,proto3" json:"coupon_quantity_per_year,omitempty"`        //Количество выплат по купонам в год.
	MaturityDate          *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=maturity_date,json=maturityDate,proto3" json:"maturity_date,omitempty"`                                        //Дата погашения облигации по UTC.
	Nominal               *MoneyValue            `protobuf:"bytes,19,opt,name=nominal,proto3" json:"nominal,omitempty"`                                                                      //Номинал облигации.
	InitialNominal        *MoneyValue            `protobuf:"bytes,20,opt,name=initial_nominal,json=initialNominal,proto3" json:"initial_nominal,omitempty"`                                  //Первоначальный номинал облигации.
	StateRegDate          *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=state_reg_date,json=stateRegDate,proto3" json:"state_reg_date,omitempty"`                                      //Дата выпуска облигации по UTC.
	PlacementDate         *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=placement_date,json=placementDate,proto3" json:"placement_date,omitempty"`                                     //Дата размещения по UTC.
	PlacementPrice        *MoneyValue            `protobuf:"bytes,23,opt,name=placement_price,json=placementPrice,proto3" json:"placement_price,omitempty"`                                  //Цена размещения.
	AciValue              *MoneyValue            `protobuf:"bytes,24,opt,name=aci_value,json=aciValue,proto3" json:"aci_value,omitempty"`                                                    //Значение НКД (накопленного купонного дохода) на дату.
	CountryOfRisk         string                 `protobuf:"bytes,25,opt,name=country_of_risk,json=countryOfRisk,proto3" json:"country_of_risk,omitempty"`                                   //Код страны риска — то есть страны, в которой компания ведет основной бизнес.
	CountryOfRiskName     string                 `protobuf:"bytes,26,opt,name=country_of_risk_name,json=countryOfRiskName,proto3" json:"country_of_risk_name,omitempty"`                     //Наименование страны риска — то есть страны, в которой компания ведет основной бизнес.
	Sector                string                 `protobuf:"bytes,27,opt,name=sector,proto3" json:"sector,omitempty"`                                                                        //Сектор экономики.
	IssueKind             string                 `protobuf:"bytes,28,opt,name=issue_kind,json=issueKind,proto3" json:"issue_kind,omitempty"`                                                 //Форма выпуска. Возможные значения: <br/>**documentary** — документарная; <br/>**non_documentary** — бездокументарная.
	IssueSize             int64                  `protobuf:"varint,29,opt,name=issue_size,json=issueSize,proto3" json:"issue_size,omitempty"`                                                //Размер выпуска.
	IssueSizePlan         int64                  `protobuf:"varint,30,opt,name=issue_size_plan,json=issueSizePlan,proto3" json:"issue_size_plan,omitempty"`                                  //Плановый размер выпуска.
	TradingStatus         SecurityTradingStatus  `protobuf:"varint,31,opt,name=trading_status,json=tradingStatus,proto3,enum=tinvest.SecurityTradingStatus" json:"trading_status,omitempty"` //Текущий режим торгов инструмента.
	OtcFlag               bool                   `protobuf:"varint,32,opt,name=otc_flag,json=otcFlag,proto3" json:"otc_flag,omitempty"`                                                      //Флаг, используемый ранее для определения внебиржевых инструментов. На данный момент не используется для торгуемых через API инструментов. Может использоваться как фильтр для операций, совершавшихся некоторое время назад на ОТС площадке.
	BuyAvailableFlag      bool                   `protobuf:"varint,33,opt,name=buy_available_flag,json=buyAvailableFlag,proto3" json:"buy_available_flag,omitempty"`                         //Признак доступности для покупки.
	SellAvailableFlag     bool                   `protobuf:"varint,34,opt,name=sell_available_flag,json=sellAvailableFlag,proto3" json:"sell_available_flag,omitempty"`                      //Признак доступности для продажи.
	FloatingCouponFlag    bool                   `protobuf:"varint,35,opt,name=floating_coupon_flag,json=floatingCouponFlag,proto3" json:"floating_coupon_flag,omitempty"`                   //Признак облигации с плавающим купоном.
	PerpetualFlag         bool                   `protobuf:"varint,36,opt,name=perpetual_flag,json=perpetualFlag,proto3" json:"perpetual_flag,omitempty"`                                    //Признак бессрочной облигации.
	AmortizationFlag      bool                   `protobuf:"varint,37,opt,name=amortization_flag,json=amortizationFlag,proto3" json:"amortization_flag,omitempty"`                           //Признак облигации с амортизацией долга.
	MinPriceIncrement     *Quotation             `protobuf:"bytes,38,opt,name=min_price_increment,json=minPriceIncrement,proto3" json:"min_price_increment,omitempty"`                       //Шаг цены.
	ApiTradeAvailableFlag bool                   `protobuf:"varint,39,opt,name=api_trade_available_flag,json=apiTradeAvailableFlag,proto3" json:"api_trade_available_flag,omitempty"`        //Параметр указывает на возможность торговать инструментом через API.
	Uid                   string                 `protobuf:"bytes,40,opt,name=uid,proto3" json:"uid,omitempty"`                                                                              //Уникальный идентификатор инструмента.
	RealExchange          RealExchange           `protobuf:"varint,41,opt,name=real_exchange,json=realExchange,proto3,enum=tinvest.RealExchange" json:"real_exchange,omitempty"`             //Реальная площадка исполнения расчетов. (биржа)
	PositionUid           string                 `protobuf:"bytes,42,opt,name=position_uid,json=positionUid,proto3" json:"position_uid,omitempty"`                                           //Уникальный идентификатор позиции инструмента.
	AssetUid              string                 `protobuf:"bytes,43,opt,name=asset_uid,json=assetUid,proto3" json:"asset_uid,omitempty"`                                                    //Уникальный идентификатор актива.
	ForIisFlag            bool                   `protobuf:"varint,51,opt,name=for_iis_flag,json=forIisFlag,proto3" json:"for_iis_flag,omitempty"`                                           //Признак доступности для ИИС.
	ForQualInvestorFlag   bool                   `protobuf:"varint,52,opt,name=for_qual_investor_flag,json=forQualInvestorFlag,proto3" json:"for_qual_investor_flag,omitempty"`              //Флаг, отображающий доступность торговли инструментом только для квалифицированных инвесторов.
	WeekendFlag           bool                   `protobuf:"varint,53,opt,name=weekend_flag,json=weekendFlag,proto3" json:"weekend_flag,omitempty"`                                          //Флаг, отображающий доступность торговли инструментом по выходным.
	BlockedTcaFlag        bool                   `protobuf:"varint,54,opt,name=blocked_tca_flag,json=blockedTcaFlag,proto3" json:"blocked_tca_flag,omitempty"`                               //Флаг заблокированного ТКС.
	SubordinatedFlag      bool                   `protobuf:"varint,55,opt,name=subordinated_flag,json=subordinatedFlag,proto3" json:"subordinated_flag,omitempty"`                           //Признак субординированной облигации.
	LiquidityFlag         bool                   `protobuf:"varint,56,opt,name=liquidity_flag,json=liquidityFlag,proto3" json:"liquidity_flag,omitempty"`                                    //Флаг достаточной ликвидности.
	First_1MinCandleDate  *timestamppb.Timestamp `protobuf:"bytes,61,opt,name=first_1min_candle_date,json=first1minCandleDate,proto3" json:"first_1min_candle_date,omitempty"`               //Дата первой минутной свечи.
	First_1DayCandleDate  *timestamppb.Timestamp `protobuf:"bytes,62,opt,name=first_1day_candle_date,json=first1dayCandleDate,proto3" json:"first_1day_candle_date,omitempty"`               //Дата первой дневной свечи.
	RiskLevel             RiskLevel              `protobuf:"varint,63,opt,name=risk_level,json=riskLevel,proto3,enum=tinvest.RiskLevel" json:"risk_level,omitempty"`                         //Уровень риска.
	Brand                 *BrandData             `protobuf:"bytes,64,opt,name=brand,proto3" json:"brand,omitempty"`                                                                          // Информация о бренде.
	BondType              BondType               `protobuf:"varint,65,opt,name=bond_type,json=bondType,proto3,enum=tinvest.BondType" json:"bond_type,omitempty"`                             // Тип облигации.
	CallDate              *timestamppb.Timestamp `protobuf:"bytes,69,opt,name=call_date,json=callDate,proto3" json:"call_date,omitempty"`                                                    // Дата погашения облигации.
	DlongClient           *Quotation             `protobuf:"bytes,90,opt,name=dlong_client,json=dlongClient,proto3" json:"dlong_client,omitempty"`                                           //Ставка риска в лонг с учетом текущего уровня риска портфеля клиента. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
	DshortClient          *Quotation             `protobuf:"bytes,91,opt,name=dshort_client,json=dshortClient,proto3" json:"dshort_client,omitempty"`                                        //Ставка риска в шорт с учетом текущего уровня риска портфеля клиента. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *Bond) Reset() {
	*x = Bond{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Bond) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bond) ProtoMessage() {}

func (x *Bond) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bond.ProtoReflect.Descriptor instead.
func (*Bond) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{25}
}

func (x *Bond) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *Bond) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *Bond) GetClassCode() string {
	if x != nil {
		return x.ClassCode
	}
	return ""
}

func (x *Bond) GetIsin() string {
	if x != nil {
		return x.Isin
	}
	return ""
}

func (x *Bond) GetLot() int32 {
	if x != nil {
		return x.Lot
	}
	return 0
}

func (x *Bond) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

// Deprecated: Marked as deprecated in tinvest/trb/instruments.proto.
func (x *Bond) GetKlong() *Quotation {
	if x != nil {
		return x.Klong
	}
	return nil
}

// Deprecated: Marked as deprecated in tinvest/trb/instruments.proto.
func (x *Bond) GetKshort() *Quotation {
	if x != nil {
		return x.Kshort
	}
	return nil
}

func (x *Bond) GetDlong() *Quotation {
	if x != nil {
		return x.Dlong
	}
	return nil
}

func (x *Bond) GetDshort() *Quotation {
	if x != nil {
		return x.Dshort
	}
	return nil
}

func (x *Bond) GetDlongMin() *Quotation {
	if x != nil {
		return x.DlongMin
	}
	return nil
}

func (x *Bond) GetDshortMin() *Quotation {
	if x != nil {
		return x.DshortMin
	}
	return nil
}

func (x *Bond) GetShortEnabledFlag() bool {
	if x != nil {
		return x.ShortEnabledFlag
	}
	return false
}

func (x *Bond) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Bond) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *Bond) GetCouponQuantityPerYear() int32 {
	if x != nil {
		return x.CouponQuantityPerYear
	}
	return 0
}

func (x *Bond) GetMaturityDate() *timestamppb.Timestamp {
	if x != nil {
		return x.MaturityDate
	}
	return nil
}

func (x *Bond) GetNominal() *MoneyValue {
	if x != nil {
		return x.Nominal
	}
	return nil
}

func (x *Bond) GetInitialNominal() *MoneyValue {
	if x != nil {
		return x.InitialNominal
	}
	return nil
}

func (x *Bond) GetStateRegDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StateRegDate
	}
	return nil
}

func (x *Bond) GetPlacementDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PlacementDate
	}
	return nil
}

func (x *Bond) GetPlacementPrice() *MoneyValue {
	if x != nil {
		return x.PlacementPrice
	}
	return nil
}

func (x *Bond) GetAciValue() *MoneyValue {
	if x != nil {
		return x.AciValue
	}
	return nil
}

func (x *Bond) GetCountryOfRisk() string {
	if x != nil {
		return x.CountryOfRisk
	}
	return ""
}

func (x *Bond) GetCountryOfRiskName() string {
	if x != nil {
		return x.CountryOfRiskName
	}
	return ""
}

func (x *Bond) GetSector() string {
	if x != nil {
		return x.Sector
	}
	return ""
}

func (x *Bond) GetIssueKind() string {
	if x != nil {
		return x.IssueKind
	}
	return ""
}

func (x *Bond) GetIssueSize() int64 {
	if x != nil {
		return x.IssueSize
	}
	return 0
}

func (x *Bond) GetIssueSizePlan() int64 {
	if x != nil {
		return x.IssueSizePlan
	}
	return 0
}

func (x *Bond) GetTradingStatus() SecurityTradingStatus {
	if x != nil {
		return x.TradingStatus
	}
	return SecurityTradingStatus_SECURITY_TRADING_STATUS_UNSPECIFIED
}

func (x *Bond) GetOtcFlag() bool {
	if x != nil {
		return x.OtcFlag
	}
	return false
}

func (x *Bond) GetBuyAvailableFlag() bool {
	if x != nil {
		return x.BuyAvailableFlag
	}
	return false
}

func (x *Bond) GetSellAvailableFlag() bool {
	if x != nil {
		return x.SellAvailableFlag
	}
	return false
}

func (x *Bond) GetFloatingCouponFlag() bool {
	if x != nil {
		return x.FloatingCouponFlag
	}
	return false
}

func (x *Bond) GetPerpetualFlag() bool {
	if x != nil {
		return x.PerpetualFlag
	}
	return false
}

func (x *Bond) GetAmortizationFlag() bool {
	if x != nil {
		return x.AmortizationFlag
	}
	return false
}

func (x *Bond) GetMinPriceIncrement() *Quotation {
	if x != nil {
		return x.MinPriceIncrement
	}
	return nil
}

func (x *Bond) GetApiTradeAvailableFlag() bool {
	if x != nil {
		return x.ApiTradeAvailableFlag
	}
	return false
}

func (x *Bond) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Bond) GetRealExchange() RealExchange {
	if x != nil {
		return x.RealExchange
	}
	return RealExchange_REAL_EXCHANGE_UNSPECIFIED
}

func (x *Bond) GetPositionUid() string {
	if x != nil {
		return x.PositionUid
	}
	return ""
}

func (x *Bond) GetAssetUid() string {
	if x != nil {
		return x.AssetUid
	}
	return ""
}

func (x *Bond) GetForIisFlag() bool {
	if x != nil {
		return x.ForIisFlag
	}
	return false
}

func (x *Bond) GetForQualInvestorFlag() bool {
	if x != nil {
		return x.ForQualInvestorFlag
	}
	return false
}

func (x *Bond) GetWeekendFlag() bool {
	if x != nil {
		return x.WeekendFlag
	}
	return false
}

func (x *Bond) GetBlockedTcaFlag() bool {
	if x != nil {
		return x.BlockedTcaFlag
	}
	return false
}

func (x *Bond) GetSubordinatedFlag() bool {
	if x != nil {
		return x.SubordinatedFlag
	}
	return false
}

func (x *Bond) GetLiquidityFlag() bool {
	if x != nil {
		return x.LiquidityFlag
	}
	return false
}

func (x *Bond) GetFirst_1MinCandleDate() *timestamppb.Timestamp {
	if x != nil {
		return x.First_1MinCandleDate
	}
	return nil
}

func (x *Bond) GetFirst_1DayCandleDate() *timestamppb.Timestamp {
	if x != nil {
		return x.First_1DayCandleDate
	}
	return nil
}

func (x *Bond) GetRiskLevel() RiskLevel {
	if x != nil {
		return x.RiskLevel
	}
	return RiskLevel_RISK_LEVEL_UNSPECIFIED
}

func (x *Bond) GetBrand() *BrandData {
	if x != nil {
		return x.Brand
	}
	return nil
}

func (x *Bond) GetBondType() BondType {
	if x != nil {
		return x.BondType
	}
	return BondType_BOND_TYPE_UNSPECIFIED
}

func (x *Bond) GetCallDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CallDate
	}
	return nil
}

func (x *Bond) GetDlongClient() *Quotation {
	if x != nil {
		return x.DlongClient
	}
	return nil
}

func (x *Bond) GetDshortClient() *Quotation {
	if x != nil {
		return x.DshortClient
	}
	return nil
}

// Объект передачи информации о валюте.
type Currency struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Figi      string                 `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                            //FIGI-идентификатор инструмента.
	Ticker    string                 `protobuf:"bytes,2,opt,name=ticker,proto3" json:"ticker,omitempty"`                        //Тикер инструмента.
	ClassCode string                 `protobuf:"bytes,3,opt,name=class_code,json=classCode,proto3" json:"class_code,omitempty"` //Класс-код (секция торгов).
	Isin      string                 `protobuf:"bytes,4,opt,name=isin,proto3" json:"isin,omitempty"`                            //ISIN-идентификатор инструмента.
	Lot       int32                  `protobuf:"varint,5,opt,name=lot,proto3" json:"lot,omitempty"`                             //Лотность инструмента. Возможно совершение операций только на количества ценной бумаги, кратные параметру `lot`. [Подробнее](./glossary#lot).
	Currency  string                 `protobuf:"bytes,6,opt,name=currency,proto3" json:"currency,omitempty"`                    //Валюта расчетов.
	// Deprecated: Marked as deprecated in tinvest/trb/instruments.proto.
	Klong *Quotation `protobuf:"bytes,7,opt,name=klong,proto3" json:"klong,omitempty"` //Коэффициент ставки риска длинной позиции по клиенту. 2 – клиент со стандартным уровнем риска (КСУР); 1 – клиент с повышенным уровнем риска (КПУР).
	// Deprecated: Marked as deprecated in tinvest/trb/instruments.proto.
	Kshort                *Quotation             `protobuf:"bytes,8,opt,name=kshort,proto3" json:"kshort,omitempty"`                                                                         //Коэффициент ставки риска короткой позиции по клиенту. 2 – клиент со стандартным уровнем риска (КСУР); 1 – клиент с повышенным уровнем риска (КПУР).
	Dlong                 *Quotation             `protobuf:"bytes,9,opt,name=dlong,proto3" json:"dlong,omitempty"`                                                                           //Ставка риска начальной маржи для КСУР лонг. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
	Dshort                *Quotation             `protobuf:"bytes,10,opt,name=dshort,proto3" json:"dshort,omitempty"`                                                                        //Ставка риска начальной маржи для КСУР шорт. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
	DlongMin              *Quotation             `protobuf:"bytes,11,opt,name=dlong_min,json=dlongMin,proto3" json:"dlong_min,omitempty"`                                                    //Ставка риска начальной маржи для КПУР лонг. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
	DshortMin             *Quotation             `protobuf:"bytes,12,opt,name=dshort_min,json=dshortMin,proto3" json:"dshort_min,omitempty"`                                                 //Ставка риска начальной маржи для КПУР шорт. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
	ShortEnabledFlag      bool                   `protobuf:"varint,13,opt,name=short_enabled_flag,json=shortEnabledFlag,proto3" json:"short_enabled_flag,omitempty"`                         //Признак доступности для операций в шорт.
	Name                  string                 `protobuf:"bytes,15,opt,name=name,proto3" json:"name,omitempty"`                                                                            //Название инструмента.
	Exchange              string                 `protobuf:"bytes,16,opt,name=exchange,proto3" json:"exchange,omitempty"`                                                                    //Tорговая площадка (секция биржи).
	Nominal               *MoneyValue            `protobuf:"bytes,17,opt,name=nominal,proto3" json:"nominal,omitempty"`                                                                      //Номинал.
	CountryOfRisk         string                 `protobuf:"bytes,18,opt,name=country_of_risk,json=countryOfRisk,proto3" json:"country_of_risk,omitempty"`                                   //Код страны риска — то есть страны, в которой компания ведет основной бизнес.
	CountryOfRiskName     string                 `protobuf:"bytes,19,opt,name=country_of_risk_name,json=countryOfRiskName,proto3" json:"country_of_risk_name,omitempty"`                     //Наименование страны риска — то есть страны, в которой компания ведет основной бизнес.
	TradingStatus         SecurityTradingStatus  `protobuf:"varint,20,opt,name=trading_status,json=tradingStatus,proto3,enum=tinvest.SecurityTradingStatus" json:"trading_status,omitempty"` //Текущий режим торгов инструмента.
	OtcFlag               bool                   `protobuf:"varint,21,opt,name=otc_flag,json=otcFlag,proto3" json:"otc_flag,omitempty"`                                                      //Флаг, используемый ранее для определения внебиржевых инструментов. На данный момент не используется для торгуемых через API инструментов. Может использоваться как фильтр для операций, совершавшихся некоторое время назад на ОТС площадке.
	BuyAvailableFlag      bool                   `protobuf:"varint,22,opt,name=buy_available_flag,json=buyAvailableFlag,proto3" json:"buy_available_flag,omitempty"`                         //Признак доступности для покупки.
	SellAvailableFlag     bool                   `protobuf:"varint,23,opt,name=sell_available_flag,json=sellAvailableFlag,proto3" json:"sell_available_flag,omitempty"`                      //Признак доступности для продажи.
	IsoCurrencyName       string                 `protobuf:"bytes,24,opt,name=iso_currency_name,json=isoCurrencyName,proto3" json:"iso_currency_name,omitempty"`                             //Строковый ISO-код валюты.
	MinPriceIncrement     *Quotation             `protobuf:"bytes,25,opt,name=min_price_increment,json=minPriceIncrement,proto3" json:"min_price_increment,omitempty"`                       //Шаг цены.
	ApiTradeAvailableFlag bool                   `protobuf:"varint,26,opt,name=api_trade_available_flag,json=apiTradeAvailableFlag,proto3" json:"api_trade_available_flag,omitempty"`        //Параметр указывает на возможность торговать инструментом через API.
	Uid                   string                 `protobuf:"bytes,27,opt,name=uid,proto3" json:"uid,omitempty"`                                                                              //Уникальный идентификатор инструмента.
	RealExchange          RealExchange           `protobuf:"varint,28,opt,name=real_exchange,json=realExchange,proto3,enum=tinvest.RealExchange" json:"real_exchange,omitempty"`             //Реальная площадка исполнения расчетов (биржа).
	PositionUid           string                 `protobuf:"bytes,29,opt,name=position_uid,json=positionUid,proto3" json:"position_uid,omitempty"`                                           //Уникальный идентификатор позиции инструмента.
	ForIisFlag            bool                   `protobuf:"varint,41,opt,name=for_iis_flag,json=forIisFlag,proto3" json:"for_iis_flag,omitempty"`                                           //Признак доступности для ИИС.
	ForQualInvestorFlag   bool                   `protobuf:"varint,52,opt,name=for_qual_investor_flag,json=forQualInvestorFlag,proto3" json:"for_qual_investor_flag,omitempty"`              //Флаг, отображающий доступность торговли инструментом только для квалифицированных инвесторов.
	WeekendFlag           bool                   `protobuf:"varint,53,opt,name=weekend_flag,json=weekendFlag,proto3" json:"weekend_flag,omitempty"`                                          //Флаг, отображающий доступность торговли инструментом по выходным.
	BlockedTcaFlag        bool                   `protobuf:"varint,54,opt,name=blocked_tca_flag,json=blockedTcaFlag,proto3" json:"blocked_tca_flag,omitempty"`                               //Флаг заблокированного ТКС.
	First_1MinCandleDate  *timestamppb.Timestamp `protobuf:"bytes,56,opt,name=first_1min_candle_date,json=first1minCandleDate,proto3" json:"first_1min_candle_date,omitempty"`               //Дата первой минутной свечи.
	First_1DayCandleDate  *timestamppb.Timestamp `protobuf:"bytes,57,opt,name=first_1day_candle_date,json=first1dayCandleDate,proto3" json:"first_1day_candle_date,omitempty"`               //Дата первой дневной свечи.
	Brand                 *BrandData             `protobuf:"bytes,60,opt,name=brand,proto3" json:"brand,omitempty"`                                                                          // Информация о бренде.
	DlongClient           *Quotation             `protobuf:"bytes,90,opt,name=dlong_client,json=dlongClient,proto3" json:"dlong_client,omitempty"`                                           //Ставка риска в лонг с учетом текущего уровня риска портфеля клиента. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
	DshortClient          *Quotation             `protobuf:"bytes,91,opt,name=dshort_client,json=dshortClient,proto3" json:"dshort_client,omitempty"`                                        //Ставка риска в шорт с учетом текущего уровня риска портфеля клиента. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *Currency) Reset() {
	*x = Currency{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Currency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Currency) ProtoMessage() {}

func (x *Currency) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Currency.ProtoReflect.Descriptor instead.
func (*Currency) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{26}
}

func (x *Currency) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *Currency) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *Currency) GetClassCode() string {
	if x != nil {
		return x.ClassCode
	}
	return ""
}

func (x *Currency) GetIsin() string {
	if x != nil {
		return x.Isin
	}
	return ""
}

func (x *Currency) GetLot() int32 {
	if x != nil {
		return x.Lot
	}
	return 0
}

func (x *Currency) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

// Deprecated: Marked as deprecated in tinvest/trb/instruments.proto.
func (x *Currency) GetKlong() *Quotation {
	if x != nil {
		return x.Klong
	}
	return nil
}

// Deprecated: Marked as deprecated in tinvest/trb/instruments.proto.
func (x *Currency) GetKshort() *Quotation {
	if x != nil {
		return x.Kshort
	}
	return nil
}

func (x *Currency) GetDlong() *Quotation {
	if x != nil {
		return x.Dlong
	}
	return nil
}

func (x *Currency) GetDshort() *Quotation {
	if x != nil {
		return x.Dshort
	}
	return nil
}

func (x *Currency) GetDlongMin() *Quotation {
	if x != nil {
		return x.DlongMin
	}
	return nil
}

func (x *Currency) GetDshortMin() *Quotation {
	if x != nil {
		return x.DshortMin
	}
	return nil
}

func (x *Currency) GetShortEnabledFlag() bool {
	if x != nil {
		return x.ShortEnabledFlag
	}
	return false
}

func (x *Currency) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Currency) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *Currency) GetNominal() *MoneyValue {
	if x != nil {
		return x.Nominal
	}
	return nil
}

func (x *Currency) GetCountryOfRisk() string {
	if x != nil {
		return x.CountryOfRisk
	}
	return ""
}

func (x *Currency) GetCountryOfRiskName() string {
	if x != nil {
		return x.CountryOfRiskName
	}
	return ""
}

func (x *Currency) GetTradingStatus() SecurityTradingStatus {
	if x != nil {
		return x.TradingStatus
	}
	return SecurityTradingStatus_SECURITY_TRADING_STATUS_UNSPECIFIED
}

func (x *Currency) GetOtcFlag() bool {
	if x != nil {
		return x.OtcFlag
	}
	return false
}

func (x *Currency) GetBuyAvailableFlag() bool {
	if x != nil {
		return x.BuyAvailableFlag
	}
	return false
}

func (x *Currency) GetSellAvailableFlag() bool {
	if x != nil {
		return x.SellAvailableFlag
	}
	return false
}

func (x *Currency) GetIsoCurrencyName() string {
	if x != nil {
		return x.IsoCurrencyName
	}
	return ""
}

func (x *Currency) GetMinPriceIncrement() *Quotation {
	if x != nil {
		return x.MinPriceIncrement
	}
	return nil
}

func (x *Currency) GetApiTradeAvailableFlag() bool {
	if x != nil {
		return x.ApiTradeAvailableFlag
	}
	return false
}

func (x *Currency) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Currency) GetRealExchange() RealExchange {
	if x != nil {
		return x.RealExchange
	}
	return RealExchange_REAL_EXCHANGE_UNSPECIFIED
}

func (x *Currency) GetPositionUid() string {
	if x != nil {
		return x.PositionUid
	}
	return ""
}

func (x *Currency) GetForIisFlag() bool {
	if x != nil {
		return x.ForIisFlag
	}
	return false
}

func (x *Currency) GetForQualInvestorFlag() bool {
	if x != nil {
		return x.ForQualInvestorFlag
	}
	return false
}

func (x *Currency) GetWeekendFlag() bool {
	if x != nil {
		return x.WeekendFlag
	}
	return false
}

func (x *Currency) GetBlockedTcaFlag() bool {
	if x != nil {
		return x.BlockedTcaFlag
	}
	return false
}

func (x *Currency) GetFirst_1MinCandleDate() *timestamppb.Timestamp {
	if x != nil {
		return x.First_1MinCandleDate
	}
	return nil
}

func (x *Currency) GetFirst_1DayCandleDate() *timestamppb.Timestamp {
	if x != nil {
		return x.First_1DayCandleDate
	}
	return nil
}

func (x *Currency) GetBrand() *BrandData {
	if x != nil {
		return x.Brand
	}
	return nil
}

func (x *Currency) GetDlongClient() *Quotation {
	if x != nil {
		return x.DlongClient
	}
	return nil
}

func (x *Currency) GetDshortClient() *Quotation {
	if x != nil {
		return x.DshortClient
	}
	return nil
}

// Объект передачи информации об инвестиционном фонде.
type Etf struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Figi      string                 `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                            //FIGI-идентификатор инструмента.
	Ticker    string                 `protobuf:"bytes,2,opt,name=ticker,proto3" json:"ticker,omitempty"`                        //Тикер инструмента.
	ClassCode string                 `protobuf:"bytes,3,opt,name=class_code,json=classCode,proto3" json:"class_code,omitempty"` //Класс-код (секция торгов).
	Isin      string                 `protobuf:"bytes,4,opt,name=isin,proto3" json:"isin,omitempty"`                            //ISIN-идентификатор инструмента.
	Lot       int32                  `protobuf:"varint,5,opt,name=lot,proto3" json:"lot,omitempty"`                             //Лотность инструмента. Возможно совершение операций только на количества ценной бумаги, кратные параметру `lot`. [Подробнее](./glossary#lot).
	Currency  string                 `protobuf:"bytes,6,opt,name=currency,proto3" json:"currency,omitempty"`                    //Валюта расчетов.
	// Deprecated: Marked as deprecated in tinvest/trb/instruments.proto.
	Klong *Quotation `protobuf:"bytes,7,opt,name=klong,proto3" json:"klong,omitempty"` //Коэффициент ставки риска длинной позиции по клиенту. 2 – клиент со стандартным уровнем риска (КСУР); 1 – клиент с повышенным уровнем риска (КПУР).
	// Deprecated: Marked as deprecated in tinvest/trb/instruments.proto.
	Kshort                *Quotation             `protobuf:"bytes,8,opt,name=kshort,proto3" json:"kshort,omitempty"`                                                                                         //Коэффициент ставки риска короткой позиции по клиенту. 2 – клиент со стандартным уровнем риска (КСУР); 1 – клиент с повышенным уровнем риска (КПУР).
	Dlong                 *Quotation             `protobuf:"bytes,9,opt,name=dlong,proto3" json:"dlong,omitempty"`                                                                                           //Ставка риска начальной маржи для КСУР лонг. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
	Dshort                *Quotation             `protobuf:"bytes,10,opt,name=dshort,proto3" json:"dshort,omitempty"`                                                                                        //Ставка риска начальной маржи для КСУР шорт. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
	DlongMin              *Quotation             `protobuf:"bytes,11,opt,name=dlong_min,json=dlongMin,proto3" json:"dlong_min,omitempty"`                                                                    //Ставка риска начальной маржи для КПУР лонг. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
	DshortMin             *Quotation             `protobuf:"bytes,12,opt,name=dshort_min,json=dshortMin,proto3" json:"dshort_min,omitempty"`                                                                 //Ставка риска начальной маржи для КПУР шорт. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
	ShortEnabledFlag      bool                   `protobuf:"varint,13,opt,name=short_enabled_flag,json=shortEnabledFlag,proto3" json:"short_enabled_flag,omitempty"`                                         //Признак доступности для операций в шорт.
	Name                  string                 `protobuf:"bytes,15,opt,name=name,proto3" json:"name,omitempty"`                                                                                            //Название инструмента.
	Exchange              string                 `protobuf:"bytes,16,opt,name=exchange,proto3" json:"exchange,omitempty"`                                                                                    //Tорговая площадка (секция биржи).
	FixedCommission       *Quotation             `protobuf:"bytes,17,opt,name=fixed_commission,json=fixedCommission,proto3" json:"fixed_commission,omitempty"`                                               //Размер фиксированной комиссии фонда.
	FocusType             string                 `protobuf:"bytes,18,opt,name=focus_type,json=focusType,proto3" json:"focus_type,omitempty"`                                                                 //Возможные значения: <br/>**equity** — акции;<br/>**fixed_income** — облигации;<br/>**mixed_allocation** — смешанный;<br/>**money_market** — денежный рынок;<br/>**real_estate** — недвижимость;<br/>**commodity** — товары;<br/>**specialty** — специальный;<br/>**private_equity** — private equity;<br/>**alternative_investment** — альтернативные инвестиции.
	ReleasedDate          *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=released_date,json=releasedDate,proto3" json:"released_date,omitempty"`                                                        //Дата выпуска по UTC.
	NumShares             *Quotation             `protobuf:"bytes,20,opt,name=num_shares,json=numShares,proto3" json:"num_shares,omitempty"`                                                                 //Количество паев фонда в обращении.
	CountryOfRisk         string                 `protobuf:"bytes,21,opt,name=country_of_risk,json=countryOfRisk,proto3" json:"country_of_risk,omitempty"`                                                   //Код страны риска — то есть страны, в которой компания ведет основной бизнес.
	CountryOfRiskName     string                 `protobuf:"bytes,22,opt,name=country_of_risk_name,json=countryOfRiskName,proto3" json:"country_of_risk_name,omitempty"`                                     //Наименование страны риска — то есть страны, в которой компания ведет основной бизнес.
	Sector                string                 `protobuf:"bytes,23,opt,name=sector,proto3" json:"sector,omitempty"`                                                                                        //Сектор экономики.
	RebalancingFreq       string                 `protobuf:"bytes,24,opt,name=rebalancing_freq,json=rebalancingFreq,proto3" json:"rebalancing_freq,omitempty"`                                               //Частота ребалансировки.
	TradingStatus         SecurityTradingStatus  `protobuf:"varint,25,opt,name=trading_status,json=tradingStatus,proto3,enum=tinvest.SecurityTradingStatus" json:"trading_status,omitempty"`                 //Текущий режим торгов инструмента.
	OtcFlag               bool                   `protobuf:"varint,26,opt,name=otc_flag,json=otcFlag,proto3" json:"otc_flag,omitempty"`                                                                      //Флаг, используемый ранее для определения внебиржевых инструментов. На данный момент не используется для торгуемых через API инструментов. Может использоваться как фильтр для операций, совершавшихся некоторое время назад на ОТС площадке.
	BuyAvailableFlag      bool                   `protobuf:"varint,27,opt,name=buy_available_flag,json=buyAvailableFlag,proto3" json:"buy_available_flag,omitempty"`                                         //Признак доступности для покупки.
	SellAvailableFlag     bool                   `protobuf:"varint,28,opt,name=sell_available_flag,json=sellAvailableFlag,proto3" json:"sell_available_flag,omitempty"`                                      //Признак доступности для продажи.
	MinPriceIncrement     *Quotation             `protobuf:"bytes,29,opt,name=min_price_increment,json=minPriceIncrement,proto3" json:"min_price_increment,omitempty"`                                       //Шаг цены.
	ApiTradeAvailableFlag bool                   `protobuf:"varint,30,opt,name=api_trade_available_flag,json=apiTradeAvailableFlag,proto3" json:"api_trade_available_flag,omitempty"`                        //Параметр указывает на возможность торговать инструментом через API.
	Uid                   string                 `protobuf:"bytes,31,opt,name=uid,proto3" json:"uid,omitempty"`                                                                                              //Уникальный идентификатор инструмента.
	RealExchange          RealExchange           `protobuf:"varint,32,opt,name=real_exchange,json=realExchange,proto3,enum=tinvest.RealExchange" json:"real_exchange,omitempty"`                             //Реальная площадка исполнения расчетов (биржа).
	PositionUid           string                 `protobuf:"bytes,33,opt,name=position_uid,json=positionUid,proto3" json:"position_uid,omitempty"`                                                           //Уникальный идентификатор позиции инструмента.
	AssetUid              string                 `protobuf:"bytes,34,opt,name=asset_uid,json=assetUid,proto3" json:"asset_uid,omitempty"`                                                                    //Уникальный идентификатор актива.
	InstrumentExchange    InstrumentExchangeType `protobuf:"varint,35,opt,name=instrument_exchange,json=instrumentExchange,proto3,enum=tinvest.InstrumentExchangeType" json:"instrument_exchange,omitempty"` //Тип площадки торговли.
	ForIisFlag            bool                   `protobuf:"varint,41,opt,name=for_iis_flag,json=forIisFlag,proto3" json:"for_iis_flag,omitempty"`                                                           //Признак доступности для ИИС.
	ForQualInvestorFlag   bool                   `protobuf:"varint,42,opt,name=for_qual_investor_flag,json=forQualInvestorFlag,proto3" json:"for_qual_investor_flag,omitempty"`                              //Флаг, отображающий доступность торговли инструментом только для квалифицированных инвесторов.
	WeekendFlag           bool                   `protobuf:"varint,43,opt,name=weekend_flag,json=weekendFlag,proto3" json:"weekend_flag,omitempty"`                                                          //ФлагФлаг, отображающий доступность торговли инструментом по выходным.
	BlockedTcaFlag        bool                   `protobuf:"varint,44,opt,name=blocked_tca_flag,json=blockedTcaFlag,proto3" json:"blocked_tca_flag,omitempty"`                                               //Флаг заблокированного ТКС.
	LiquidityFlag         bool                   `protobuf:"varint,45,opt,name=liquidity_flag,json=liquidityFlag,proto3" json:"liquidity_flag,omitempty"`                                                    //Флаг достаточной ликвидности.
	First_1MinCandleDate  *timestamppb.Timestamp `protobuf:"bytes,56,opt,name=first_1min_candle_date,json=first1minCandleDate,proto3" json:"first_1min_candle_date,omitempty"`                               //Дата первой минутной свечи.
	First_1DayCandleDate  *timestamppb.Timestamp `protobuf:"bytes,57,opt,name=first_1day_candle_date,json=first1dayCandleDate,proto3" json:"first_1day_candle_date,omitempty"`                               //Дата первой дневной свечи.
	Brand                 *BrandData             `protobuf:"bytes,60,opt,name=brand,proto3" json:"brand,omitempty"`                                                                                          // Информация о бренде.
	DlongClient           *Quotation             `protobuf:"bytes,90,opt,name=dlong_client,json=dlongClient,proto3" json:"dlong_client,omitempty"`                                                           //Ставка риска в лонг с учетом текущего уровня риска портфеля клиента. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
	DshortClient          *Quotation             `protobuf:"bytes,91,opt,name=dshort_client,json=dshortClient,proto3" json:"dshort_client,omitempty"`                                                        //Ставка риска в шорт с учетом текущего уровня риска портфеля клиента. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *Etf) Reset() {
	*x = Etf{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Etf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Etf) ProtoMessage() {}

func (x *Etf) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Etf.ProtoReflect.Descriptor instead.
func (*Etf) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{27}
}

func (x *Etf) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *Etf) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *Etf) GetClassCode() string {
	if x != nil {
		return x.ClassCode
	}
	return ""
}

func (x *Etf) GetIsin() string {
	if x != nil {
		return x.Isin
	}
	return ""
}

func (x *Etf) GetLot() int32 {
	if x != nil {
		return x.Lot
	}
	return 0
}

func (x *Etf) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

// Deprecated: Marked as deprecated in tinvest/trb/instruments.proto.
func (x *Etf) GetKlong() *Quotation {
	if x != nil {
		return x.Klong
	}
	return nil
}

// Deprecated: Marked as deprecated in tinvest/trb/instruments.proto.
func (x *Etf) GetKshort() *Quotation {
	if x != nil {
		return x.Kshort
	}
	return nil
}

func (x *Etf) GetDlong() *Quotation {
	if x != nil {
		return x.Dlong
	}
	return nil
}

func (x *Etf) GetDshort() *Quotation {
	if x != nil {
		return x.Dshort
	}
	return nil
}

func (x *Etf) GetDlongMin() *Quotation {
	if x != nil {
		return x.DlongMin
	}
	return nil
}

func (x *Etf) GetDshortMin() *Quotation {
	if x != nil {
		return x.DshortMin
	}
	return nil
}

func (x *Etf) GetShortEnabledFlag() bool {
	if x != nil {
		return x.ShortEnabledFlag
	}
	return false
}

func (x *Etf) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Etf) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *Etf) GetFixedCommission() *Quotation {
	if x != nil {
		return x.FixedCommission
	}
	return nil
}

func (x *Etf) GetFocusType() string {
	if x != nil {
		return x.FocusType
	}
	return ""
}

func (x *Etf) GetReleasedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReleasedDate
	}
	return nil
}

func (x *Etf) GetNumShares() *Quotation {
	if x != nil {
		return x.NumShares
	}
	return nil
}

func (x *Etf) GetCountryOfRisk() string {
	if x != nil {
		return x.CountryOfRisk
	}
	return ""
}

func (x *Etf) GetCountryOfRiskName() string {
	if x != nil {
		return x.CountryOfRiskName
	}
	return ""
}

func (x *Etf) GetSector() string {
	if x != nil {
		return x.Sector
	}
	return ""
}

func (x *Etf) GetRebalancingFreq() string {
	if x != nil {
		return x.RebalancingFreq
	}
	return ""
}

func (x *Etf) GetTradingStatus() SecurityTradingStatus {
	if x != nil {
		return x.TradingStatus
	}
	return SecurityTradingStatus_SECURITY_TRADING_STATUS_UNSPECIFIED
}

func (x *Etf) GetOtcFlag() bool {
	if x != nil {
		return x.OtcFlag
	}
	return false
}

func (x *Etf) GetBuyAvailableFlag() bool {
	if x != nil {
		return x.BuyAvailableFlag
	}
	return false
}

func (x *Etf) GetSellAvailableFlag() bool {
	if x != nil {
		return x.SellAvailableFlag
	}
	return false
}

func (x *Etf) GetMinPriceIncrement() *Quotation {
	if x != nil {
		return x.MinPriceIncrement
	}
	return nil
}

func (x *Etf) GetApiTradeAvailableFlag() bool {
	if x != nil {
		return x.ApiTradeAvailableFlag
	}
	return false
}

func (x *Etf) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Etf) GetRealExchange() RealExchange {
	if x != nil {
		return x.RealExchange
	}
	return RealExchange_REAL_EXCHANGE_UNSPECIFIED
}

func (x *Etf) GetPositionUid() string {
	if x != nil {
		return x.PositionUid
	}
	return ""
}

func (x *Etf) GetAssetUid() string {
	if x != nil {
		return x.AssetUid
	}
	return ""
}

func (x *Etf) GetInstrumentExchange() InstrumentExchangeType {
	if x != nil {
		return x.InstrumentExchange
	}
	return InstrumentExchangeType_INSTRUMENT_EXCHANGE_UNSPECIFIED
}

func (x *Etf) GetForIisFlag() bool {
	if x != nil {
		return x.ForIisFlag
	}
	return false
}

func (x *Etf) GetForQualInvestorFlag() bool {
	if x != nil {
		return x.ForQualInvestorFlag
	}
	return false
}

func (x *Etf) GetWeekendFlag() bool {
	if x != nil {
		return x.WeekendFlag
	}
	return false
}

func (x *Etf) GetBlockedTcaFlag() bool {
	if x != nil {
		return x.BlockedTcaFlag
	}
	return false
}

func (x *Etf) GetLiquidityFlag() bool {
	if x != nil {
		return x.LiquidityFlag
	}
	return false
}

func (x *Etf) GetFirst_1MinCandleDate() *timestamppb.Timestamp {
	if x != nil {
		return x.First_1MinCandleDate
	}
	return nil
}

func (x *Etf) GetFirst_1DayCandleDate() *timestamppb.Timestamp {
	if x != nil {
		return x.First_1DayCandleDate
	}
	return nil
}

func (x *Etf) GetBrand() *BrandData {
	if x != nil {
		return x.Brand
	}
	return nil
}

func (x *Etf) GetDlongClient() *Quotation {
	if x != nil {
		return x.DlongClient
	}
	return nil
}

func (x *Etf) GetDshortClient() *Quotation {
	if x != nil {
		return x.DshortClient
	}
	return nil
}

// Объект передачи информации о фьючерсе.
type Future struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Figi      string                 `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                            //FIGI-идентификатор инструмента.
	Ticker    string                 `protobuf:"bytes,2,opt,name=ticker,proto3" json:"ticker,omitempty"`                        //Тикер инструмента.
	ClassCode string                 `protobuf:"bytes,3,opt,name=class_code,json=classCode,proto3" json:"class_code,omitempty"` //Класс-код (секция торгов).
	Lot       int32                  `protobuf:"varint,4,opt,name=lot,proto3" json:"lot,omitempty"`                             //Лотность инструмента. Возможно совершение операций только на количества ценной бумаги, кратные параметру `lot`. [Подробнее](./glossary#lot).
	Currency  string                 `protobuf:"bytes,5,opt,name=currency,proto3" json:"currency,omitempty"`                    //Валюта расчетов.
	// Deprecated: Marked as deprecated in tinvest/trb/instruments.proto.
	Klong *Quotation `protobuf:"bytes,6,opt,name=klong,proto3" json:"klong,omitempty"` //Коэффициент ставки риска длинной позиции по клиенту. 2 – клиент со стандартным уровнем риска (КСУР); 1 – клиент с повышенным уровнем риска (КПУР).
	// Deprecated: Marked as deprecated in tinvest/trb/instruments.proto.
	Kshort                  *Quotation             `protobuf:"bytes,7,opt,name=kshort,proto3" json:"kshort,omitempty"`                                                                         //Коэффициент ставки риска короткой позиции по клиенту. 2 – клиент со стандартным уровнем риска (КСУР); 1 – клиент с повышенным уровнем риска (КПУР).
	Dlong                   *Quotation             `protobuf:"bytes,8,opt,name=dlong,proto3" json:"dlong,omitempty"`                                                                           //Ставка риска начальной маржи для КСУР лонг. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
	Dshort                  *Quotation             `protobuf:"bytes,9,opt,name=dshort,proto3" json:"dshort,omitempty"`                                                                         //Ставка риска начальной маржи для КСУР шорт. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
	DlongMin                *Quotation             `protobuf:"bytes,10,opt,name=dlong_min,json=dlongMin,proto3" json:"dlong_min,omitempty"`                                                    //Ставка риска начальной маржи для КПУР лонг. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
	DshortMin               *Quotation             `protobuf:"bytes,11,opt,name=dshort_min,json=dshortMin,proto3" json:"dshort_min,omitempty"`                                                 //Ставка риска начальной маржи для КПУР шорт. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
	ShortEnabledFlag        bool                   `protobuf:"varint,12,opt,name=short_enabled_flag,json=shortEnabledFlag,proto3" json:"short_enabled_flag,omitempty"`                         //Признак доступности для операций шорт.
	Name                    string                 `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`                                                                            //Название инструмента.
	Exchange                string                 `protobuf:"bytes,14,opt,name=exchange,proto3" json:"exchange,omitempty"`                                                                    //Tорговая площадка (секция биржи).
	FirstTradeDate          *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=first_trade_date,json=firstTradeDate,proto3" json:"first_trade_date,omitempty"`                                //Дата начала обращения контракта по UTC.
	LastTradeDate           *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=last_trade_date,json=lastTradeDate,proto3" json:"last_trade_date,omitempty"`                                   //Дата по UTC, до которой возможно проведение операций с фьючерсом.
	FuturesType             string                 `protobuf:"bytes,17,opt,name=futures_type,json=futuresType,proto3" json:"futures_type,omitempty"`                                           //Тип фьючерса. Возможные значения: <br/>**physical_delivery** — физические поставки; <br/>**cash_settlement** — денежный эквивалент.
	AssetType               string                 `protobuf:"bytes,18,opt,name=asset_type,json=assetType,proto3" json:"asset_type,omitempty"`                                                 //Тип актива. Возможные значения: <br/>**commodity** — товар; <br/>**currency** — валюта; <br/>**security** — ценная бумага; <br/>**index** — индекс.
	BasicAsset              string                 `protobuf:"bytes,19,opt,name=basic_asset,json=basicAsset,proto3" json:"basic_asset,omitempty"`                                              //Основной актив.
	BasicAssetSize          *Quotation             `protobuf:"bytes,20,opt,name=basic_asset_size,json=basicAssetSize,proto3" json:"basic_asset_size,omitempty"`                                //Размер основного актива.
	CountryOfRisk           string                 `protobuf:"bytes,21,opt,name=country_of_risk,json=countryOfRisk,proto3" json:"country_of_risk,omitempty"`                                   //Код страны риска — то есть страны, в которой компания ведет основной бизнес.
	CountryOfRiskName       string                 `protobuf:"bytes,22,opt,name=country_of_risk_name,json=countryOfRiskName,proto3" json:"country_of_risk_name,omitempty"`                     //Наименование страны риска — то есть страны, в которой компания ведет основной бизнес.
	Sector                  string                 `protobuf:"bytes,23,opt,name=sector,proto3" json:"sector,omitempty"`                                                                        //Сектор экономики.
	ExpirationDate          *timestamppb.Timestamp `protobuf:"bytes,24,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`                                  //Дата истечения срока в часов поясе UTC.
	TradingStatus           SecurityTradingStatus  `protobuf:"varint,25,opt,name=trading_status,json=tradingStatus,proto3,enum=tinvest.SecurityTradingStatus" json:"trading_status,omitempty"` //Текущий режим торгов инструмента.
	OtcFlag                 bool                   `protobuf:"varint,26,opt,name=otc_flag,json=otcFlag,proto3" json:"otc_flag,omitempty"`                                                      //Флаг, используемый ранее для определения внебиржевых инструментов. На данный момент не используется для торгуемых через API инструментов. Может использоваться как фильтр для операций, совершавшихся некоторое время назад на ОТС площадке.
	BuyAvailableFlag        bool                   `protobuf:"varint,27,opt,name=buy_available_flag,json=buyAvailableFlag,proto3" json:"buy_available_flag,omitempty"`                         //Признак доступности для покупки.
	SellAvailableFlag       bool                   `protobuf:"varint,28,opt,name=sell_available_flag,json=sellAvailableFlag,proto3" json:"sell_available_flag,omitempty"`                      //Признак доступности для продажи.
	MinPriceIncrement       *Quotation             `protobuf:"bytes,29,opt,name=min_price_increment,json=minPriceIncrement,proto3" json:"min_price_increment,omitempty"`                       //Шаг цены.
	ApiTradeAvailableFlag   bool                   `protobuf:"varint,30,opt,name=api_trade_available_flag,json=apiTradeAvailableFlag,proto3" json:"api_trade_available_flag,omitempty"`        //Параметр указывает на возможность торговать инструментом через API.
	Uid                     string                 `protobuf:"bytes,31,opt,name=uid,proto3" json:"uid,omitempty"`                                                                              //Уникальный идентификатор инструмента.
	RealExchange            RealExchange           `protobuf:"varint,32,opt,name=real_exchange,json=realExchange,proto3,enum=tinvest.RealExchange" json:"real_exchange,omitempty"`             //Реальная площадка исполнения расчетов (биржа).
	PositionUid             string                 `protobuf:"bytes,33,opt,name=position_uid,json=positionUid,proto3" json:"position_uid,omitempty"`                                           //Уникальный идентификатор позиции инструмента.
	BasicAssetPositionUid   string                 `protobuf:"bytes,34,opt,name=basic_asset_position_uid,json=basicAssetPositionUid,proto3" json:"basic_asset_position_uid,omitempty"`         //Уникальный идентификатор позиции основного инструмента.
	ForIisFlag              bool                   `protobuf:"varint,41,opt,name=for_iis_flag,json=forIisFlag,proto3" json:"for_iis_flag,omitempty"`                                           //Признак доступности для ИИС.
	ForQualInvestorFlag     bool                   `protobuf:"varint,42,opt,name=for_qual_investor_flag,json=forQualInvestorFlag,proto3" json:"for_qual_investor_flag,omitempty"`              //Флаг, отображающий доступность торговли инструментом только для квалифицированных инвесторов.
	WeekendFlag             bool                   `protobuf:"varint,43,opt,name=weekend_flag,json=weekendFlag,proto3" json:"weekend_flag,omitempty"`                                          //Флаг, отображающий доступность торговли инструментом по выходным.
	BlockedTcaFlag          bool                   `protobuf:"varint,44,opt,name=blocked_tca_flag,json=blockedTcaFlag,proto3" json:"blocked_tca_flag,omitempty"`                               //Флаг заблокированного ТКС.
	First_1MinCandleDate    *timestamppb.Timestamp `protobuf:"bytes,56,opt,name=first_1min_candle_date,json=first1minCandleDate,proto3" json:"first_1min_candle_date,omitempty"`               //Дата первой минутной свечи.
	First_1DayCandleDate    *timestamppb.Timestamp `protobuf:"bytes,57,opt,name=first_1day_candle_date,json=first1dayCandleDate,proto3" json:"first_1day_candle_date,omitempty"`               //Дата первой дневной свечи.
	InitialMarginOnBuy      *MoneyValue            `protobuf:"bytes,61,opt,name=initial_margin_on_buy,json=initialMarginOnBuy,proto3" json:"initial_margin_on_buy,omitempty"`                  //Гарантийное обеспечение при покупке.
	InitialMarginOnSell     *MoneyValue            `protobuf:"bytes,62,opt,name=initial_margin_on_sell,json=initialMarginOnSell,proto3" json:"initial_margin_on_sell,omitempty"`               //Гарантийное обеспечение при продаже.
	MinPriceIncrementAmount *Quotation             `protobuf:"bytes,63,opt,name=min_price_increment_amount,json=minPriceIncrementAmount,proto3" json:"min_price_increment_amount,omitempty"`   //Стоимость шага цены.
	Brand                   *BrandData             `protobuf:"bytes,64,opt,name=brand,proto3" json:"brand,omitempty"`                                                                          // Информация о бренде.
	DlongClient             *Quotation             `protobuf:"bytes,90,opt,name=dlong_client,json=dlongClient,proto3" json:"dlong_client,omitempty"`                                           //Ставка риска в лонг с учетом текущего уровня риска портфеля клиента. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
	DshortClient            *Quotation             `protobuf:"bytes,91,opt,name=dshort_client,json=dshortClient,proto3" json:"dshort_client,omitempty"`                                        //Ставка риска в шорт с учетом текущего уровня риска портфеля клиента. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *Future) Reset() {
	*x = Future{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Future) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Future) ProtoMessage() {}

func (x *Future) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Future.ProtoReflect.Descriptor instead.
func (*Future) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{28}
}

func (x *Future) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *Future) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *Future) GetClassCode() string {
	if x != nil {
		return x.ClassCode
	}
	return ""
}

func (x *Future) GetLot() int32 {
	if x != nil {
		return x.Lot
	}
	return 0
}

func (x *Future) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

// Deprecated: Marked as deprecated in tinvest/trb/instruments.proto.
func (x *Future) GetKlong() *Quotation {
	if x != nil {
		return x.Klong
	}
	return nil
}

// Deprecated: Marked as deprecated in tinvest/trb/instruments.proto.
func (x *Future) GetKshort() *Quotation {
	if x != nil {
		return x.Kshort
	}
	return nil
}

func (x *Future) GetDlong() *Quotation {
	if x != nil {
		return x.Dlong
	}
	return nil
}

func (x *Future) GetDshort() *Quotation {
	if x != nil {
		return x.Dshort
	}
	return nil
}

func (x *Future) GetDlongMin() *Quotation {
	if x != nil {
		return x.DlongMin
	}
	return nil
}

func (x *Future) GetDshortMin() *Quotation {
	if x != nil {
		return x.DshortMin
	}
	return nil
}

func (x *Future) GetShortEnabledFlag() bool {
	if x != nil {
		return x.ShortEnabledFlag
	}
	return false
}

func (x *Future) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Future) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *Future) GetFirstTradeDate() *timestamppb.Timestamp {
	if x != nil {
		return x.FirstTradeDate
	}
	return nil
}

func (x *Future) GetLastTradeDate() *timestamppb.Timestamp {
	if x != nil {
		return x.LastTradeDate
	}
	return nil
}

func (x *Future) GetFuturesType() string {
	if x != nil {
		return x.FuturesType
	}
	return ""
}

func (x *Future) GetAssetType() string {
	if x != nil {
		return x.AssetType
	}
	return ""
}

func (x *Future) GetBasicAsset() string {
	if x != nil {
		return x.BasicAsset
	}
	return ""
}

func (x *Future) GetBasicAssetSize() *Quotation {
	if x != nil {
		return x.BasicAssetSize
	}
	return nil
}

func (x *Future) GetCountryOfRisk() string {
	if x != nil {
		return x.CountryOfRisk
	}
	return ""
}

func (x *Future) GetCountryOfRiskName() string {
	if x != nil {
		return x.CountryOfRiskName
	}
	return ""
}

func (x *Future) GetSector() string {
	if x != nil {
		return x.Sector
	}
	return ""
}

func (x *Future) GetExpirationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpirationDate
	}
	return nil
}

func (x *Future) GetTradingStatus() SecurityTradingStatus {
	if x != nil {
		return x.TradingStatus
	}
	return SecurityTradingStatus_SECURITY_TRADING_STATUS_UNSPECIFIED
}

func (x *Future) GetOtcFlag() bool {
	if x != nil {
		return x.OtcFlag
	}
	return false
}

func (x *Future) GetBuyAvailableFlag() bool {
	if x != nil {
		return x.BuyAvailableFlag
	}
	return false
}

func (x *Future) GetSellAvailableFlag() bool {
	if x != nil {
		return x.SellAvailableFlag
	}
	return false
}

func (x *Future) GetMinPriceIncrement() *Quotation {
	if x != nil {
		return x.MinPriceIncrement
	}
	return nil
}

func (x *Future) GetApiTradeAvailableFlag() bool {
	if x != nil {
		return x.ApiTradeAvailableFlag
	}
	return false
}

func (x *Future) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Future) GetRealExchange() RealExchange {
	if x != nil {
		return x.RealExchange
	}
	return RealExchange_REAL_EXCHANGE_UNSPECIFIED
}

func (x *Future) GetPositionUid() string {
	if x != nil {
		return x.PositionUid
	}
	return ""
}

func (x *Future) GetBasicAssetPositionUid() string {
	if x != nil {
		return x.BasicAssetPositionUid
	}
	return ""
}

func (x *Future) GetForIisFlag() bool {
	if x != nil {
		return x.ForIisFlag
	}
	return false
}

func (x *Future) GetForQualInvestorFlag() bool {
	if x != nil {
		return x.ForQualInvestorFlag
	}
	return false
}

func (x *Future) GetWeekendFlag() bool {
	if x != nil {
		return x.WeekendFlag
	}
	return false
}

func (x *Future) GetBlockedTcaFlag() bool {
	if x != nil {
		return x.BlockedTcaFlag
	}
	return false
}

func (x *Future) GetFirst_1MinCandleDate() *timestamppb.Timestamp {
	if x != nil {
		return x.First_1MinCandleDate
	}
	return nil
}

func (x *Future) GetFirst_1DayCandleDate() *timestamppb.Timestamp {
	if x != nil {
		return x.First_1DayCandleDate
	}
	return nil
}

func (x *Future) GetInitialMarginOnBuy() *MoneyValue {
	if x != nil {
		return x.InitialMarginOnBuy
	}
	return nil
}

func (x *Future) GetInitialMarginOnSell() *MoneyValue {
	if x != nil {
		return x.InitialMarginOnSell
	}
	return nil
}

func (x *Future) GetMinPriceIncrementAmount() *Quotation {
	if x != nil {
		return x.MinPriceIncrementAmount
	}
	return nil
}

func (x *Future) GetBrand() *BrandData {
	if x != nil {
		return x.Brand
	}
	return nil
}

func (x *Future) GetDlongClient() *Quotation {
	if x != nil {
		return x.DlongClient
	}
	return nil
}

func (x *Future) GetDshortClient() *Quotation {
	if x != nil {
		return x.DshortClient
	}
	return nil
}

// Объект передачи информации об акции.
type Share struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Figi      string                 `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                            //FIGI-идентификатор инструмента.
	Ticker    string                 `protobuf:"bytes,2,opt,name=ticker,proto3" json:"ticker,omitempty"`                        //Тикер инструмента.
	ClassCode string                 `protobuf:"bytes,3,opt,name=class_code,json=classCode,proto3" json:"class_code,omitempty"` //Класс-код (секция торгов).
	Isin      string                 `protobuf:"bytes,4,opt,name=isin,proto3" json:"isin,omitempty"`                            //ISIN-идентификатор инструмента.
	Lot       int32                  `protobuf:"varint,5,opt,name=lot,proto3" json:"lot,omitempty"`                             //Лотность инструмента. Возможно совершение операций только на количества ценной бумаги, кратные параметру `lot`. [Подробнее](./glossary#lot)
	Currency  string                 `protobuf:"bytes,6,opt,name=currency,proto3" json:"currency,omitempty"`                    //Валюта расчетов.
	// Deprecated: Marked as deprecated in tinvest/trb/instruments.proto.
	Klong *Quotation `protobuf:"bytes,7,opt,name=klong,proto3" json:"klong,omitempty"` //Коэффициент ставки риска длинной позиции по клиенту. 2 – клиент со стандартным уровнем риска (КСУР); 1 – клиент с повышенным уровнем риска (КПУР).
	// Deprecated: Marked as deprecated in tinvest/trb/instruments.proto.
	Kshort                *Quotation             `protobuf:"bytes,8,opt,name=kshort,proto3" json:"kshort,omitempty"`                                                                                         //Коэффициент ставки риска короткой позиции по клиенту. 2 – клиент со стандартным уровнем риска (КСУР); 1 – клиент с повышенным уровнем риска (КПУР).
	Dlong                 *Quotation             `protobuf:"bytes,9,opt,name=dlong,proto3" json:"dlong,omitempty"`                                                                                           //Ставка риска начальной маржи для КСУР лонг. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
	Dshort                *Quotation             `protobuf:"bytes,10,opt,name=dshort,proto3" json:"dshort,omitempty"`                                                                                        //Ставка риска начальной маржи для КСУР шорт. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
	DlongMin              *Quotation             `protobuf:"bytes,11,opt,name=dlong_min,json=dlongMin,proto3" json:"dlong_min,omitempty"`                                                                    //Ставка риска начальной маржи для КПУР лонг. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
	DshortMin             *Quotation             `protobuf:"bytes,12,opt,name=dshort_min,json=dshortMin,proto3" json:"dshort_min,omitempty"`                                                                 //Ставка риска начальной маржи для КПУР шорт. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
	ShortEnabledFlag      bool                   `protobuf:"varint,13,opt,name=short_enabled_flag,json=shortEnabledFlag,proto3" json:"short_enabled_flag,omitempty"`                                         //Признак доступности для операций в шорт.
	Name                  string                 `protobuf:"bytes,15,opt,name=name,proto3" json:"name,omitempty"`                                                                                            //Название инструмента.
	Exchange              string                 `protobuf:"bytes,16,opt,name=exchange,proto3" json:"exchange,omitempty"`                                                                                    //Tорговая площадка (секция биржи).
	IpoDate               *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=ipo_date,json=ipoDate,proto3" json:"ipo_date,omitempty"`                                                                       //Дата IPO акции по UTC.
	IssueSize             int64                  `protobuf:"varint,18,opt,name=issue_size,json=issueSize,proto3" json:"issue_size,omitempty"`                                                                //Размер выпуска.
	CountryOfRisk         string                 `protobuf:"bytes,19,opt,name=country_of_risk,json=countryOfRisk,proto3" json:"country_of_risk,omitempty"`                                                   //Код страны риска — то есть страны, в которой компания ведет основной бизнес.
	CountryOfRiskName     string                 `protobuf:"bytes,20,opt,name=country_of_risk_name,json=countryOfRiskName,proto3" json:"country_of_risk_name,omitempty"`                                     //Наименование страны риска — то есть страны, в которой компания ведет основной бизнес.
	Sector                string                 `protobuf:"bytes,21,opt,name=sector,proto3" json:"sector,omitempty"`                                                                                        //Сектор экономики.
	IssueSizePlan         int64                  `protobuf:"varint,22,opt,name=issue_size_plan,json=issueSizePlan,proto3" json:"issue_size_plan,omitempty"`                                                  //Плановый размер выпуска.
	Nominal               *MoneyValue            `protobuf:"bytes,23,opt,name=nominal,proto3" json:"nominal,omitempty"`                                                                                      //Номинал.
	TradingStatus         SecurityTradingStatus  `protobuf:"varint,25,opt,name=trading_status,json=tradingStatus,proto3,enum=tinvest.SecurityTradingStatus" json:"trading_status,omitempty"`                 //Текущий режим торгов инструмента.
	OtcFlag               bool                   `protobuf:"varint,26,opt,name=otc_flag,json=otcFlag,proto3" json:"otc_flag,omitempty"`                                                                      //Флаг, используемый ранее для определения внебиржевых инструментов. На данный момент не используется для торгуемых через API инструментов. Может использоваться как фильтр для операций, совершавшихся некоторое время назад на ОТС площадке.
	BuyAvailableFlag      bool                   `protobuf:"varint,27,opt,name=buy_available_flag,json=buyAvailableFlag,proto3" json:"buy_available_flag,omitempty"`                                         //Признак доступности для покупки.
	SellAvailableFlag     bool                   `protobuf:"varint,28,opt,name=sell_available_flag,json=sellAvailableFlag,proto3" json:"sell_available_flag,omitempty"`                                      //Признак доступности для продажи.
	DivYieldFlag          bool                   `protobuf:"varint,29,opt,name=div_yield_flag,json=divYieldFlag,proto3" json:"div_yield_flag,omitempty"`                                                     //Признак наличия дивидендной доходности.
	ShareType             ShareType              `protobuf:"varint,30,opt,name=share_type,json=shareType,proto3,enum=tinvest.ShareType" json:"share_type,omitempty"`                                         //Тип акции. Возможные значения — `[ShareType](./instruments#sharetype)`.
	MinPriceIncrement     *Quotation             `protobuf:"bytes,31,opt,name=min_price_increment,json=minPriceIncrement,proto3" json:"min_price_increment,omitempty"`                                       //Шаг цены.
	ApiTradeAvailableFlag bool                   `protobuf:"varint,32,opt,name=api_trade_available_flag,json=apiTradeAvailableFlag,proto3" json:"api_trade_available_flag,omitempty"`                        //Возможность торговать инструментом через API.
	Uid                   string                 `protobuf:"bytes,33,opt,name=uid,proto3" json:"uid,omitempty"`                                                                                              //Уникальный идентификатор инструмента.
	RealExchange          RealExchange           `protobuf:"varint,34,opt,name=real_exchange,json=realExchange,proto3,enum=tinvest.RealExchange" json:"real_exchange,omitempty"`                             //Реальная площадка исполнения расчетов (биржа).
	PositionUid           string                 `protobuf:"bytes,35,opt,name=position_uid,json=positionUid,proto3" json:"position_uid,omitempty"`                                                           //Уникальный идентификатор позиции инструмента.
	AssetUid              string                 `protobuf:"bytes,36,opt,name=asset_uid,json=assetUid,proto3" json:"asset_uid,omitempty"`                                                                    //Уникальный идентификатор актива.
	InstrumentExchange    InstrumentExchangeType `protobuf:"varint,37,opt,name=instrument_exchange,json=instrumentExchange,proto3,enum=tinvest.InstrumentExchangeType" json:"instrument_exchange,omitempty"` //Тип площадки торговли.
	ForIisFlag            bool                   `protobuf:"varint,46,opt,name=for_iis_flag,json=forIisFlag,proto3" json:"for_iis_flag,omitempty"`                                                           //Признак доступности для ИИС.
	ForQualInvestorFlag   bool                   `protobuf:"varint,47,opt,name=for_qual_investor_flag,json=forQualInvestorFlag,proto3" json:"for_qual_investor_flag,omitempty"`                              //Флаг, отображающий доступность торговли инструментом только для квалифицированных инвесторов.
	WeekendFlag           bool                   `protobuf:"varint,48,opt,name=weekend_flag,json=weekendFlag,proto3" json:"weekend_flag,omitempty"`                                                          //Флаг, отображающий доступность торговли инструментом по выходным.
	BlockedTcaFlag        bool                   `protobuf:"varint,49,opt,name=blocked_tca_flag,json=blockedTcaFlag,proto3" json:"blocked_tca_flag,omitempty"`                                               //Флаг заблокированного ТКС.
	LiquidityFlag         bool                   `protobuf:"varint,50,opt,name=liquidity_flag,json=liquidityFlag,proto3" json:"liquidity_flag,omitempty"`                                                    //Флаг достаточной ликвидности.
	First_1MinCandleDate  *timestamppb.Timestamp `protobuf:"bytes,56,opt,name=first_1min_candle_date,json=first1minCandleDate,proto3" json:"first_1min_candle_date,omitempty"`                               //Дата первой минутной свечи.
	First_1DayCandleDate  *timestamppb.Timestamp `protobuf:"bytes,57,opt,name=first_1day_candle_date,json=first1dayCandleDate,proto3" json:"first_1day_candle_date,omitempty"`                               //Дата первой дневной свечи.
	Brand                 *BrandData             `protobuf:"bytes,60,opt,name=brand,proto3" json:"brand,omitempty"`                                                                                          // Информация о бренде.
	DlongClient           *Quotation             `protobuf:"bytes,90,opt,name=dlong_client,json=dlongClient,proto3" json:"dlong_client,omitempty"`                                                           //Ставка риска в лонг с учетом текущего уровня риска портфеля клиента. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
	DshortClient          *Quotation             `protobuf:"bytes,91,opt,name=dshort_client,json=dshortClient,proto3" json:"dshort_client,omitempty"`                                                        //Ставка риска в шорт с учетом текущего уровня риска портфеля клиента. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *Share) Reset() {
	*x = Share{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Share) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Share) ProtoMessage() {}

func (x *Share) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Share.ProtoReflect.Descriptor instead.
func (*Share) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{29}
}

func (x *Share) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *Share) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *Share) GetClassCode() string {
	if x != nil {
		return x.ClassCode
	}
	return ""
}

func (x *Share) GetIsin() string {
	if x != nil {
		return x.Isin
	}
	return ""
}

func (x *Share) GetLot() int32 {
	if x != nil {
		return x.Lot
	}
	return 0
}

func (x *Share) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

// Deprecated: Marked as deprecated in tinvest/trb/instruments.proto.
func (x *Share) GetKlong() *Quotation {
	if x != nil {
		return x.Klong
	}
	return nil
}

// Deprecated: Marked as deprecated in tinvest/trb/instruments.proto.
func (x *Share) GetKshort() *Quotation {
	if x != nil {
		return x.Kshort
	}
	return nil
}

func (x *Share) GetDlong() *Quotation {
	if x != nil {
		return x.Dlong
	}
	return nil
}

func (x *Share) GetDshort() *Quotation {
	if x != nil {
		return x.Dshort
	}
	return nil
}

func (x *Share) GetDlongMin() *Quotation {
	if x != nil {
		return x.DlongMin
	}
	return nil
}

func (x *Share) GetDshortMin() *Quotation {
	if x != nil {
		return x.DshortMin
	}
	return nil
}

func (x *Share) GetShortEnabledFlag() bool {
	if x != nil {
		return x.ShortEnabledFlag
	}
	return false
}

func (x *Share) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Share) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *Share) GetIpoDate() *timestamppb.Timestamp {
	if x != nil {
		return x.IpoDate
	}
	return nil
}

func (x *Share) GetIssueSize() int64 {
	if x != nil {
		return x.IssueSize
	}
	return 0
}

func (x *Share) GetCountryOfRisk() string {
	if x != nil {
		return x.CountryOfRisk
	}
	return ""
}

func (x *Share) GetCountryOfRiskName() string {
	if x != nil {
		return x.CountryOfRiskName
	}
	return ""
}

func (x *Share) GetSector() string {
	if x != nil {
		return x.Sector
	}
	return ""
}

func (x *Share) GetIssueSizePlan() int64 {
	if x != nil {
		return x.IssueSizePlan
	}
	return 0
}

func (x *Share) GetNominal() *MoneyValue {
	if x != nil {
		return x.Nominal
	}
	return nil
}

func (x *Share) GetTradingStatus() SecurityTradingStatus {
	if x != nil {
		return x.TradingStatus
	}
	return SecurityTradingStatus_SECURITY_TRADING_STATUS_UNSPECIFIED
}

func (x *Share) GetOtcFlag() bool {
	if x != nil {
		return x.OtcFlag
	}
	return false
}

func (x *Share) GetBuyAvailableFlag() bool {
	if x != nil {
		return x.BuyAvailableFlag
	}
	return false
}

func (x *Share) GetSellAvailableFlag() bool {
	if x != nil {
		return x.SellAvailableFlag
	}
	return false
}

func (x *Share) GetDivYieldFlag() bool {
	if x != nil {
		return x.DivYieldFlag
	}
	return false
}

func (x *Share) GetShareType() ShareType {
	if x != nil {
		return x.ShareType
	}
	return ShareType_SHARE_TYPE_UNSPECIFIED
}

func (x *Share) GetMinPriceIncrement() *Quotation {
	if x != nil {
		return x.MinPriceIncrement
	}
	return nil
}

func (x *Share) GetApiTradeAvailableFlag() bool {
	if x != nil {
		return x.ApiTradeAvailableFlag
	}
	return false
}

func (x *Share) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Share) GetRealExchange() RealExchange {
	if x != nil {
		return x.RealExchange
	}
	return RealExchange_REAL_EXCHANGE_UNSPECIFIED
}

func (x *Share) GetPositionUid() string {
	if x != nil {
		return x.PositionUid
	}
	return ""
}

func (x *Share) GetAssetUid() string {
	if x != nil {
		return x.AssetUid
	}
	return ""
}

func (x *Share) GetInstrumentExchange() InstrumentExchangeType {
	if x != nil {
		return x.InstrumentExchange
	}
	return InstrumentExchangeType_INSTRUMENT_EXCHANGE_UNSPECIFIED
}

func (x *Share) GetForIisFlag() bool {
	if x != nil {
		return x.ForIisFlag
	}
	return false
}

func (x *Share) GetForQualInvestorFlag() bool {
	if x != nil {
		return x.ForQualInvestorFlag
	}
	return false
}

func (x *Share) GetWeekendFlag() bool {
	if x != nil {
		return x.WeekendFlag
	}
	return false
}

func (x *Share) GetBlockedTcaFlag() bool {
	if x != nil {
		return x.BlockedTcaFlag
	}
	return false
}

func (x *Share) GetLiquidityFlag() bool {
	if x != nil {
		return x.LiquidityFlag
	}
	return false
}

func (x *Share) GetFirst_1MinCandleDate() *timestamppb.Timestamp {
	if x != nil {
		return x.First_1MinCandleDate
	}
	return nil
}

func (x *Share) GetFirst_1DayCandleDate() *timestamppb.Timestamp {
	if x != nil {
		return x.First_1DayCandleDate
	}
	return nil
}

func (x *Share) GetBrand() *BrandData {
	if x != nil {
		return x.Brand
	}
	return nil
}

func (x *Share) GetDlongClient() *Quotation {
	if x != nil {
		return x.DlongClient
	}
	return nil
}

func (x *Share) GetDshortClient() *Quotation {
	if x != nil {
		return x.DshortClient
	}
	return nil
}

// Запрос НКД по облигации.
type GetAccruedInterestsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated: Marked as deprecated in tinvest/trb/instruments.proto.
	Figi          string                 `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                                     //FIGI-идентификатор инструмента.
	From          *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`                                     //Начало запрашиваемого периода по UTC.
	To            *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`                                         //Окончание запрашиваемого периода по UTC.
	InstrumentId  string                 `protobuf:"bytes,4,opt,name=instrument_id,json=instrumentId,proto3" json:"instrument_id,omitempty"` //Идентификатор инструмента — `figi` или `instrument_uid`.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAccruedInterestsRequest) Reset() {
	*x = GetAccruedInterestsRequest{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAccruedInterestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccruedInterestsRequest) ProtoMessage() {}

func (x *GetAccruedInterestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccruedInterestsRequest.ProtoReflect.Descriptor instead.
func (*GetAccruedInterestsRequest) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{30}
}

// Deprecated: Marked as deprecated in tinvest/trb/instruments.proto.
func (x *GetAccruedInterestsRequest) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *GetAccruedInterestsRequest) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *GetAccruedInterestsRequest) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *GetAccruedInterestsRequest) GetInstrumentId() string {
	if x != nil {
		return x.InstrumentId
	}
	return ""
}

// НКД облигации.
type GetAccruedInterestsResponse struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	AccruedInterests []*AccruedInterest     `protobuf:"bytes,1,rep,name=accrued_interests,json=accruedInterests,proto3" json:"accrued_interests,omitempty"` //Массив операций начисления купонов.
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetAccruedInterestsResponse) Reset() {
	*x = GetAccruedInterestsResponse{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAccruedInterestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccruedInterestsResponse) ProtoMessage() {}

func (x *GetAccruedInterestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccruedInterestsResponse.ProtoReflect.Descriptor instead.
func (*GetAccruedInterestsResponse) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{31}
}

func (x *GetAccruedInterestsResponse) GetAccruedInterests() []*AccruedInterest {
	if x != nil {
		return x.AccruedInterests
	}
	return nil
}

// Операция начисления купонов.
type AccruedInterest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Date          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`                                     //Дата и время выплаты по UTC.
	Value         *Quotation             `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`                                   //Величина выплаты.
	ValuePercent  *Quotation             `protobuf:"bytes,3,opt,name=value_percent,json=valuePercent,proto3" json:"value_percent,omitempty"` //Величина выплаты в процентах от номинала.
	Nominal       *Quotation             `protobuf:"bytes,4,opt,name=nominal,proto3" json:"nominal,omitempty"`                               //Номинал облигации.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccruedInterest) Reset() {
	*x = AccruedInterest{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccruedInterest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccruedInterest) ProtoMessage() {}

func (x *AccruedInterest) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccruedInterest.ProtoReflect.Descriptor instead.
func (*AccruedInterest) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{32}
}

func (x *AccruedInterest) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *AccruedInterest) GetValue() *Quotation {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AccruedInterest) GetValuePercent() *Quotation {
	if x != nil {
		return x.ValuePercent
	}
	return nil
}

func (x *AccruedInterest) GetNominal() *Quotation {
	if x != nil {
		return x.Nominal
	}
	return nil
}

// Запрос информации о фьючерсе
type GetFuturesMarginRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated: Marked as deprecated in tinvest/trb/instruments.proto.
	Figi          string `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                                     // Идентификатор инструмента.
	InstrumentId  string `protobuf:"bytes,4,opt,name=instrument_id,json=instrumentId,proto3" json:"instrument_id,omitempty"` //Идентификатор инструмента — `figi` или `instrument_uid`.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFuturesMarginRequest) Reset() {
	*x = GetFuturesMarginRequest{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFuturesMarginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFuturesMarginRequest) ProtoMessage() {}

func (x *GetFuturesMarginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFuturesMarginRequest.ProtoReflect.Descriptor instead.
func (*GetFuturesMarginRequest) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{33}
}

// Deprecated: Marked as deprecated in tinvest/trb/instruments.proto.
func (x *GetFuturesMarginRequest) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *GetFuturesMarginRequest) GetInstrumentId() string {
	if x != nil {
		return x.InstrumentId
	}
	return ""
}

// Данные по фьючерсу
type GetFuturesMarginResponse struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	InitialMarginOnBuy      *MoneyValue            `protobuf:"bytes,1,opt,name=initial_margin_on_buy,json=initialMarginOnBuy,proto3" json:"initial_margin_on_buy,omitempty"`                //Гарантийное обеспечение при покупке.
	InitialMarginOnSell     *MoneyValue            `protobuf:"bytes,2,opt,name=initial_margin_on_sell,json=initialMarginOnSell,proto3" json:"initial_margin_on_sell,omitempty"`             //Гарантийное обеспечение при продаже.
	MinPriceIncrement       *Quotation             `protobuf:"bytes,3,opt,name=min_price_increment,json=minPriceIncrement,proto3" json:"min_price_increment,omitempty"`                     //Шаг цены.
	MinPriceIncrementAmount *Quotation             `protobuf:"bytes,4,opt,name=min_price_increment_amount,json=minPriceIncrementAmount,proto3" json:"min_price_increment_amount,omitempty"` //Стоимость шага цены.
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *GetFuturesMarginResponse) Reset() {
	*x = GetFuturesMarginResponse{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFuturesMarginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFuturesMarginResponse) ProtoMessage() {}

func (x *GetFuturesMarginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFuturesMarginResponse.ProtoReflect.Descriptor instead.
func (*GetFuturesMarginResponse) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{34}
}

func (x *GetFuturesMarginResponse) GetInitialMarginOnBuy() *MoneyValue {
	if x != nil {
		return x.InitialMarginOnBuy
	}
	return nil
}

func (x *GetFuturesMarginResponse) GetInitialMarginOnSell() *MoneyValue {
	if x != nil {
		return x.InitialMarginOnSell
	}
	return nil
}

func (x *GetFuturesMarginResponse) GetMinPriceIncrement() *Quotation {
	if x != nil {
		return x.MinPriceIncrement
	}
	return nil
}

func (x *GetFuturesMarginResponse) GetMinPriceIncrementAmount() *Quotation {
	if x != nil {
		return x.MinPriceIncrementAmount
	}
	return nil
}

// Данные по инструменту.
type InstrumentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Instrument    *Instrument            `protobuf:"bytes,1,opt,name=instrument,proto3" json:"instrument,omitempty"` // Основная информация об инструменте.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InstrumentResponse) Reset() {
	*x = InstrumentResponse{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InstrumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentResponse) ProtoMessage() {}

func (x *InstrumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentResponse.ProtoReflect.Descriptor instead.
func (*InstrumentResponse) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{35}
}

func (x *InstrumentResponse) GetInstrument() *Instrument {
	if x != nil {
		return x.Instrument
	}
	return nil
}

// Объект передачи основной информации об инструменте.
type Instrument struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Figi      string                 `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                            //FIGI-идентификатор инструмента.
	Ticker    string                 `protobuf:"bytes,2,opt,name=ticker,proto3" json:"ticker,omitempty"`                        //Тикер инструмента.
	ClassCode string                 `protobuf:"bytes,3,opt,name=class_code,json=classCode,proto3" json:"class_code,omitempty"` //Класс-код инструмента.
	Isin      string                 `protobuf:"bytes,4,opt,name=isin,proto3" json:"isin,omitempty"`                            //ISIN-идентификатор инструмента.
	Lot       int32                  `protobuf:"varint,5,opt,name=lot,proto3" json:"lot,omitempty"`                             //Лотность инструмента. Возможно совершение операций только на количества ценной бумаги, кратные параметру `lot`. [Подробнее](./glossary#lot).
	Currency  string                 `protobuf:"bytes,6,opt,name=currency,proto3" json:"currency,omitempty"`                    //Валюта расчетов.
	// Deprecated: Marked as deprecated in tinvest/trb/instruments.proto.
	Klong *Quotation `protobuf:"bytes,7,opt,name=klong,proto3" json:"klong,omitempty"` //Коэффициент ставки риска длинной позиции по клиенту. 2 – клиент со стандартным уровнем риска (КСУР); 1 – клиент с повышенным уровнем риска (КПУР).
	// Deprecated: Marked as deprecated in tinvest/trb/instruments.proto.
	Kshort                *Quotation             `protobuf:"bytes,8,opt,name=kshort,proto3" json:"kshort,omitempty"`                                                                         //Коэффициент ставки риска короткой позиции по клиенту. 2 – клиент со стандартным уровнем риска (КСУР); 1 – клиент с повышенным уровнем риска (КПУР).
	Dlong                 *Quotation             `protobuf:"bytes,9,opt,name=dlong,proto3" json:"dlong,omitempty"`                                                                           //Ставка риска начальной маржи для КСУР лонг. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
	Dshort                *Quotation             `protobuf:"bytes,10,opt,name=dshort,proto3" json:"dshort,omitempty"`                                                                        //Ставка риска начальной маржи для КСУР шорт. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
	DlongMin              *Quotation             `protobuf:"bytes,11,opt,name=dlong_min,json=dlongMin,proto3" json:"dlong_min,omitempty"`                                                    //Ставка риска начальной маржи для КПУР лонг. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
	DshortMin             *Quotation             `protobuf:"bytes,12,opt,name=dshort_min,json=dshortMin,proto3" json:"dshort_min,omitempty"`                                                 //Ставка риска начальной маржи для КПУР шорт. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
	ShortEnabledFlag      bool                   `protobuf:"varint,13,opt,name=short_enabled_flag,json=shortEnabledFlag,proto3" json:"short_enabled_flag,omitempty"`                         //Признак доступности для операций в шорт.
	Name                  string                 `protobuf:"bytes,14,opt,name=name,proto3" json:"name,omitempty"`                                                                            //Название инструмента.
	Exchange              string                 `protobuf:"bytes,15,opt,name=exchange,proto3" json:"exchange,omitempty"`                                                                    //Tорговая площадка (секция биржи).
	CountryOfRisk         string                 `protobuf:"bytes,16,opt,name=country_of_risk,json=countryOfRisk,proto3" json:"country_of_risk,omitempty"`                                   //Код страны риска — то есть страны, в которой компания ведет основной бизнес.
	CountryOfRiskName     string                 `protobuf:"bytes,17,opt,name=country_of_risk_name,json=countryOfRiskName,proto3" json:"country_of_risk_name,omitempty"`                     //Наименование страны риска — то есть страны, в которой компания ведет основной бизнес.
	InstrumentType        string                 `protobuf:"bytes,18,opt,name=instrument_type,json=instrumentType,proto3" json:"instrument_type,omitempty"`                                  //Тип инструмента.
	TradingStatus         SecurityTradingStatus  `protobuf:"varint,19,opt,name=trading_status,json=tradingStatus,proto3,enum=tinvest.SecurityTradingStatus" json:"trading_status,omitempty"` //Текущий режим торгов инструмента.
	OtcFlag               bool                   `protobuf:"varint,20,opt,name=otc_flag,json=otcFlag,proto3" json:"otc_flag,omitempty"`                                                      //Флаг, используемый ранее для определения внебиржевых инструментов. На данный момент не используется для торгуемых через API инструментов. Может использоваться как фильтр для операций, совершавшихся некоторое время назад на ОТС площадке.
	BuyAvailableFlag      bool                   `protobuf:"varint,21,opt,name=buy_available_flag,json=buyAvailableFlag,proto3" json:"buy_available_flag,omitempty"`                         //Признак доступности для покупки.
	SellAvailableFlag     bool                   `protobuf:"varint,22,opt,name=sell_available_flag,json=sellAvailableFlag,proto3" json:"sell_available_flag,omitempty"`                      //Признак доступности для продажи.
	MinPriceIncrement     *Quotation             `protobuf:"bytes,23,opt,name=min_price_increment,json=minPriceIncrement,proto3" json:"min_price_increment,omitempty"`                       //Шаг цены.
	ApiTradeAvailableFlag bool                   `protobuf:"varint,24,opt,name=api_trade_available_flag,json=apiTradeAvailableFlag,proto3" json:"api_trade_available_flag,omitempty"`        //Параметр указывает на возможность торговать инструментом через API.
	Uid                   string                 `protobuf:"bytes,25,opt,name=uid,proto3" json:"uid,omitempty"`                                                                              //Уникальный идентификатор инструмента.
	RealExchange          RealExchange           `protobuf:"varint,26,opt,name=real_exchange,json=realExchange,proto3,enum=tinvest.RealExchange" json:"real_exchange,omitempty"`             //Реальная площадка исполнения расчетов (биржа).
	PositionUid           string                 `protobuf:"bytes,27,opt,name=position_uid,json=positionUid,proto3" json:"position_uid,omitempty"`                                           //Уникальный идентификатор позиции инструмента.
	AssetUid              string                 `protobuf:"bytes,28,opt,name=asset_uid,json=assetUid,proto3" json:"asset_uid,omitempty"`                                                    //Уникальный идентификатор актива.
	ForIisFlag            bool                   `protobuf:"varint,36,opt,name=for_iis_flag,json=forIisFlag,proto3" json:"for_iis_flag,omitempty"`                                           //Признак доступности для ИИС.
	ForQualInvestorFlag   bool                   `protobuf:"varint,37,opt,name=for_qual_investor_flag,json=forQualInvestorFlag,proto3" json:"for_qual_investor_flag,omitempty"`              //Флаг, отображающий доступность торговли инструментом только для квалифицированных инвесторов.
	WeekendFlag           bool                   `protobuf:"varint,38,opt,name=weekend_flag,json=weekendFlag,proto3" json:"weekend_flag,omitempty"`                                          //Флаг, отображающий доступность торговли инструментом по выходным.
	BlockedTcaFlag        bool                   `protobuf:"varint,39,opt,name=blocked_tca_flag,json=blockedTcaFlag,proto3" json:"blocked_tca_flag,omitempty"`                               //Флаг заблокированного ТКС.
	InstrumentKind        InstrumentType         `protobuf:"varint,40,opt,name=instrument_kind,json=instrumentKind,proto3,enum=tinvest.InstrumentType" json:"instrument_kind,omitempty"`     //Тип инструмента.
	First_1MinCandleDate  *timestamppb.Timestamp `protobuf:"bytes,56,opt,name=first_1min_candle_date,json=first1minCandleDate,proto3" json:"first_1min_candle_date,omitempty"`               //Дата первой минутной свечи.
	First_1DayCandleDate  *timestamppb.Timestamp `protobuf:"bytes,57,opt,name=first_1day_candle_date,json=first1dayCandleDate,proto3" json:"first_1day_candle_date,omitempty"`               //Дата первой дневной свечи.
	Brand                 *BrandData             `protobuf:"bytes,60,opt,name=brand,proto3" json:"brand,omitempty"`                                                                          // Информация о бренде.
	DlongClient           *Quotation             `protobuf:"bytes,490,opt,name=dlong_client,json=dlongClient,proto3" json:"dlong_client,omitempty"`                                          //Ставка риска в лонг с учетом текущего уровня риска портфеля клиента. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
	DshortClient          *Quotation             `protobuf:"bytes,491,opt,name=dshort_client,json=dshortClient,proto3" json:"dshort_client,omitempty"`                                       //Ставка риска в шорт с учетом текущего уровня риска портфеля клиента. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *Instrument) Reset() {
	*x = Instrument{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Instrument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Instrument) ProtoMessage() {}

func (x *Instrument) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Instrument.ProtoReflect.Descriptor instead.
func (*Instrument) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{36}
}

func (x *Instrument) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *Instrument) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *Instrument) GetClassCode() string {
	if x != nil {
		return x.ClassCode
	}
	return ""
}

func (x *Instrument) GetIsin() string {
	if x != nil {
		return x.Isin
	}
	return ""
}

func (x *Instrument) GetLot() int32 {
	if x != nil {
		return x.Lot
	}
	return 0
}

func (x *Instrument) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

// Deprecated: Marked as deprecated in tinvest/trb/instruments.proto.
func (x *Instrument) GetKlong() *Quotation {
	if x != nil {
		return x.Klong
	}
	return nil
}

// Deprecated: Marked as deprecated in tinvest/trb/instruments.proto.
func (x *Instrument) GetKshort() *Quotation {
	if x != nil {
		return x.Kshort
	}
	return nil
}

func (x *Instrument) GetDlong() *Quotation {
	if x != nil {
		return x.Dlong
	}
	return nil
}

func (x *Instrument) GetDshort() *Quotation {
	if x != nil {
		return x.Dshort
	}
	return nil
}

func (x *Instrument) GetDlongMin() *Quotation {
	if x != nil {
		return x.DlongMin
	}
	return nil
}

func (x *Instrument) GetDshortMin() *Quotation {
	if x != nil {
		return x.DshortMin
	}
	return nil
}

func (x *Instrument) GetShortEnabledFlag() bool {
	if x != nil {
		return x.ShortEnabledFlag
	}
	return false
}

func (x *Instrument) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Instrument) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *Instrument) GetCountryOfRisk() string {
	if x != nil {
		return x.CountryOfRisk
	}
	return ""
}

func (x *Instrument) GetCountryOfRiskName() string {
	if x != nil {
		return x.CountryOfRiskName
	}
	return ""
}

func (x *Instrument) GetInstrumentType() string {
	if x != nil {
		return x.InstrumentType
	}
	return ""
}

func (x *Instrument) GetTradingStatus() SecurityTradingStatus {
	if x != nil {
		return x.TradingStatus
	}
	return SecurityTradingStatus_SECURITY_TRADING_STATUS_UNSPECIFIED
}

func (x *Instrument) GetOtcFlag() bool {
	if x != nil {
		return x.OtcFlag
	}
	return false
}

func (x *Instrument) GetBuyAvailableFlag() bool {
	if x != nil {
		return x.BuyAvailableFlag
	}
	return false
}

func (x *Instrument) GetSellAvailableFlag() bool {
	if x != nil {
		return x.SellAvailableFlag
	}
	return false
}

func (x *Instrument) GetMinPriceIncrement() *Quotation {
	if x != nil {
		return x.MinPriceIncrement
	}
	return nil
}

func (x *Instrument) GetApiTradeAvailableFlag() bool {
	if x != nil {
		return x.ApiTradeAvailableFlag
	}
	return false
}

func (x *Instrument) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Instrument) GetRealExchange() RealExchange {
	if x != nil {
		return x.RealExchange
	}
	return RealExchange_REAL_EXCHANGE_UNSPECIFIED
}

func (x *Instrument) GetPositionUid() string {
	if x != nil {
		return x.PositionUid
	}
	return ""
}

func (x *Instrument) GetAssetUid() string {
	if x != nil {
		return x.AssetUid
	}
	return ""
}

func (x *Instrument) GetForIisFlag() bool {
	if x != nil {
		return x.ForIisFlag
	}
	return false
}

func (x *Instrument) GetForQualInvestorFlag() bool {
	if x != nil {
		return x.ForQualInvestorFlag
	}
	return false
}

func (x *Instrument) GetWeekendFlag() bool {
	if x != nil {
		return x.WeekendFlag
	}
	return false
}

func (x *Instrument) GetBlockedTcaFlag() bool {
	if x != nil {
		return x.BlockedTcaFlag
	}
	return false
}

func (x *Instrument) GetInstrumentKind() InstrumentType {
	if x != nil {
		return x.InstrumentKind
	}
	return InstrumentType_INSTRUMENT_TYPE_UNSPECIFIED
}

func (x *Instrument) GetFirst_1MinCandleDate() *timestamppb.Timestamp {
	if x != nil {
		return x.First_1MinCandleDate
	}
	return nil
}

func (x *Instrument) GetFirst_1DayCandleDate() *timestamppb.Timestamp {
	if x != nil {
		return x.First_1DayCandleDate
	}
	return nil
}

func (x *Instrument) GetBrand() *BrandData {
	if x != nil {
		return x.Brand
	}
	return nil
}

func (x *Instrument) GetDlongClient() *Quotation {
	if x != nil {
		return x.DlongClient
	}
	return nil
}

func (x *Instrument) GetDshortClient() *Quotation {
	if x != nil {
		return x.DshortClient
	}
	return nil
}

// Запрос дивидендов.
type GetDividendsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated: Marked as deprecated in tinvest/trb/instruments.proto.
	Figi          string                 `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                                     //FIGI-идентификатор инструмента.
	From          *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=from,proto3,oneof" json:"from,omitempty"`                               //Начало запрашиваемого периода по UTC. Фильтрация происходит по параметру `record_date` — дата фиксации реестра.
	To            *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=to,proto3,oneof" json:"to,omitempty"`                                   //Окончание запрашиваемого периода по UTC. Фильтрация происходит по параметру `record_date` — дата фиксации реестра.
	InstrumentId  string                 `protobuf:"bytes,4,opt,name=instrument_id,json=instrumentId,proto3" json:"instrument_id,omitempty"` //Идентификатор инструмента — `figi` или `instrument_uid`.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDividendsRequest) Reset() {
	*x = GetDividendsRequest{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDividendsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDividendsRequest) ProtoMessage() {}

func (x *GetDividendsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDividendsRequest.ProtoReflect.Descriptor instead.
func (*GetDividendsRequest) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{37}
}

// Deprecated: Marked as deprecated in tinvest/trb/instruments.proto.
func (x *GetDividendsRequest) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *GetDividendsRequest) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *GetDividendsRequest) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *GetDividendsRequest) GetInstrumentId() string {
	if x != nil {
		return x.InstrumentId
	}
	return ""
}

// Дивиденды.
type GetDividendsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Dividends     []*Dividend            `protobuf:"bytes,1,rep,name=dividends,proto3" json:"dividends,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDividendsResponse) Reset() {
	*x = GetDividendsResponse{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDividendsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDividendsResponse) ProtoMessage() {}

func (x *GetDividendsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDividendsResponse.ProtoReflect.Descriptor instead.
func (*GetDividendsResponse) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{38}
}

func (x *GetDividendsResponse) GetDividends() []*Dividend {
	if x != nil {
		return x.Dividends
	}
	return nil
}

// Информация о выплате.
type Dividend struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DividendNet   *MoneyValue            `protobuf:"bytes,1,opt,name=dividend_net,json=dividendNet,proto3" json:"dividend_net,omitempty"`    //Величина дивиденда на 1 ценную бумагу (включая валюту).
	PaymentDate   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=payment_date,json=paymentDate,proto3" json:"payment_date,omitempty"`    //Дата фактических выплат по UTC.
	DeclaredDate  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=declared_date,json=declaredDate,proto3" json:"declared_date,omitempty"` //Дата объявления дивидендов по UTC.
	LastBuyDate   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=last_buy_date,json=lastBuyDate,proto3" json:"last_buy_date,omitempty"`  //Последний день (включительно) покупки для получения выплаты по UTC.
	DividendType  string                 `protobuf:"bytes,5,opt,name=dividend_type,json=dividendType,proto3" json:"dividend_type,omitempty"` //Тип выплаты. Возможные значения: `Regular Cash` – регулярные выплаты, `Cancelled` – выплата отменена, `Daily Accrual` – ежедневное начисление, `Return of Capital` – возврат капитала, прочие типы выплат.
	RecordDate    *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=record_date,json=recordDate,proto3" json:"record_date,omitempty"`       //Дата фиксации реестра по UTC.
	Regularity    string                 `protobuf:"bytes,7,opt,name=regularity,proto3" json:"regularity,omitempty"`                         //Регулярность выплаты. Возможные значения: `Annual` – ежегодная, `Semi-Anl` – каждые полгода, прочие типы выплат.
	ClosePrice    *MoneyValue            `protobuf:"bytes,8,opt,name=close_price,json=closePrice,proto3" json:"close_price,omitempty"`       //Цена закрытия инструмента на момент `ex_dividend_date`.
	YieldValue    *Quotation             `protobuf:"bytes,9,opt,name=yield_value,json=yieldValue,proto3" json:"yield_value,omitempty"`       //Величина доходности.
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`         //Дата и время создания записи по UTC.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Dividend) Reset() {
	*x = Dividend{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Dividend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dividend) ProtoMessage() {}

func (x *Dividend) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dividend.ProtoReflect.Descriptor instead.
func (*Dividend) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{39}
}

func (x *Dividend) GetDividendNet() *MoneyValue {
	if x != nil {
		return x.DividendNet
	}
	return nil
}

func (x *Dividend) GetPaymentDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PaymentDate
	}
	return nil
}

func (x *Dividend) GetDeclaredDate() *timestamppb.Timestamp {
	if x != nil {
		return x.DeclaredDate
	}
	return nil
}

func (x *Dividend) GetLastBuyDate() *timestamppb.Timestamp {
	if x != nil {
		return x.LastBuyDate
	}
	return nil
}

func (x *Dividend) GetDividendType() string {
	if x != nil {
		return x.DividendType
	}
	return ""
}

func (x *Dividend) GetRecordDate() *timestamppb.Timestamp {
	if x != nil {
		return x.RecordDate
	}
	return nil
}

func (x *Dividend) GetRegularity() string {
	if x != nil {
		return x.Regularity
	}
	return ""
}

func (x *Dividend) GetClosePrice() *MoneyValue {
	if x != nil {
		return x.ClosePrice
	}
	return nil
}

func (x *Dividend) GetYieldValue() *Quotation {
	if x != nil {
		return x.YieldValue
	}
	return nil
}

func (x *Dividend) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

// Запрос актива по идентификатору.
type AssetRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` //UID-идентификатор актива.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssetRequest) Reset() {
	*x = AssetRequest{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetRequest) ProtoMessage() {}

func (x *AssetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetRequest.ProtoReflect.Descriptor instead.
func (*AssetRequest) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{40}
}

func (x *AssetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Данные по активу.
type AssetResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Asset         *AssetFull             `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"` //Актив.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssetResponse) Reset() {
	*x = AssetResponse{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetResponse) ProtoMessage() {}

func (x *AssetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetResponse.ProtoReflect.Descriptor instead.
func (*AssetResponse) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{41}
}

func (x *AssetResponse) GetAsset() *AssetFull {
	if x != nil {
		return x.Asset
	}
	return nil
}

// Запрос списка активов.
type AssetsRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	InstrumentType   *InstrumentType        `protobuf:"varint,1,opt,name=instrument_type,json=instrumentType,proto3,enum=tinvest.InstrumentType,oneof" json:"instrument_type,omitempty"`
	InstrumentStatus *InstrumentStatus      `protobuf:"varint,2,opt,name=instrument_status,json=instrumentStatus,proto3,enum=tinvest.InstrumentStatus,oneof" json:"instrument_status,omitempty"` //Статус запрашиваемых инструментов. [Возможные значения](#instrumentstatus).
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *AssetsRequest) Reset() {
	*x = AssetsRequest{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetsRequest) ProtoMessage() {}

func (x *AssetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetsRequest.ProtoReflect.Descriptor instead.
func (*AssetsRequest) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{42}
}

func (x *AssetsRequest) GetInstrumentType() InstrumentType {
	if x != nil && x.InstrumentType != nil {
		return *x.InstrumentType
	}
	return InstrumentType_INSTRUMENT_TYPE_UNSPECIFIED
}

func (x *AssetsRequest) GetInstrumentStatus() InstrumentStatus {
	if x != nil && x.InstrumentStatus != nil {
		return *x.InstrumentStatus
	}
	return InstrumentStatus_INSTRUMENT_STATUS_UNSPECIFIED
}

// Список активов.
type AssetsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Assets        []*Asset               `protobuf:"bytes,1,rep,name=assets,proto3" json:"assets,omitempty"` //Активы.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssetsResponse) Reset() {
	*x = AssetsResponse{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetsResponse) ProtoMessage() {}

func (x *AssetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetsResponse.ProtoReflect.Descriptor instead.
func (*AssetsResponse) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{43}
}

func (x *AssetsResponse) GetAssets() []*Asset {
	if x != nil {
		return x.Assets
	}
	return nil
}

type AssetFull struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           string                 `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`                                          //Уникальный идентификатор актива.
	Type          AssetType              `protobuf:"varint,2,opt,name=type,proto3,enum=tinvest.AssetType" json:"type,omitempty"`                //Тип актива.
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                        //Наименование актива.
	NameBrief     string                 `protobuf:"bytes,4,opt,name=name_brief,json=nameBrief,proto3" json:"name_brief,omitempty"`             //Короткое наименование актива.
	Description   string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`                          //Описание актива.
	DeletedAt     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`             //Дата и время удаления актива.
	RequiredTests []string               `protobuf:"bytes,7,rep,name=required_tests,json=requiredTests,proto3" json:"required_tests,omitempty"` //Тестирование клиентов.
	// Types that are valid to be assigned to Ext:
	//
	//	*AssetFull_Currency
	//	*AssetFull_Security
	Ext           isAssetFull_Ext        `protobuf_oneof:"ext"`
	GosRegCode    string                 `protobuf:"bytes,10,opt,name=gos_reg_code,json=gosRegCode,proto3" json:"gos_reg_code,omitempty"` //Номер государственной регистрации.
	Cfi           string                 `protobuf:"bytes,11,opt,name=cfi,proto3" json:"cfi,omitempty"`                                   //Код CFI.
	CodeNsd       string                 `protobuf:"bytes,12,opt,name=code_nsd,json=codeNsd,proto3" json:"code_nsd,omitempty"`            //Код НРД инструмента.
	Status        string                 `protobuf:"bytes,13,opt,name=status,proto3" json:"status,omitempty"`                             //Статус актива.
	Brand         *Brand                 `protobuf:"bytes,14,opt,name=brand,proto3" json:"brand,omitempty"`                               //Бренд.
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`      //Дата и время последнего обновления записи.
	BrCode        string                 `protobuf:"bytes,16,opt,name=br_code,json=brCode,proto3" json:"br_code,omitempty"`               //Код типа ц.б. по классификации Банка России.
	BrCodeName    string                 `protobuf:"bytes,17,opt,name=br_code_name,json=brCodeName,proto3" json:"br_code_name,omitempty"` //Наименование кода типа ц.б. по классификации Банка России.
	Instruments   []*AssetInstrument     `protobuf:"bytes,18,rep,name=instruments,proto3" json:"instruments,omitempty"`                   //Массив идентификаторов инструментов.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssetFull) Reset() {
	*x = AssetFull{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssetFull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetFull) ProtoMessage() {}

func (x *AssetFull) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetFull.ProtoReflect.Descriptor instead.
func (*AssetFull) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{44}
}

func (x *AssetFull) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *AssetFull) GetType() AssetType {
	if x != nil {
		return x.Type
	}
	return AssetType_ASSET_TYPE_UNSPECIFIED
}

func (x *AssetFull) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AssetFull) GetNameBrief() string {
	if x != nil {
		return x.NameBrief
	}
	return ""
}

func (x *AssetFull) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AssetFull) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *AssetFull) GetRequiredTests() []string {
	if x != nil {
		return x.RequiredTests
	}
	return nil
}

func (x *AssetFull) GetExt() isAssetFull_Ext {
	if x != nil {
		return x.Ext
	}
	return nil
}

func (x *AssetFull) GetCurrency() *AssetCurrency {
	if x != nil {
		if x, ok := x.Ext.(*AssetFull_Currency); ok {
			return x.Currency
		}
	}
	return nil
}

func (x *AssetFull) GetSecurity() *AssetSecurity {
	if x != nil {
		if x, ok := x.Ext.(*AssetFull_Security); ok {
			return x.Security
		}
	}
	return nil
}

func (x *AssetFull) GetGosRegCode() string {
	if x != nil {
		return x.GosRegCode
	}
	return ""
}

func (x *AssetFull) GetCfi() string {
	if x != nil {
		return x.Cfi
	}
	return ""
}

func (x *AssetFull) GetCodeNsd() string {
	if x != nil {
		return x.CodeNsd
	}
	return ""
}

func (x *AssetFull) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *AssetFull) GetBrand() *Brand {
	if x != nil {
		return x.Brand
	}
	return nil
}

func (x *AssetFull) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *AssetFull) GetBrCode() string {
	if x != nil {
		return x.BrCode
	}
	return ""
}

func (x *AssetFull) GetBrCodeName() string {
	if x != nil {
		return x.BrCodeName
	}
	return ""
}

func (x *AssetFull) GetInstruments() []*AssetInstrument {
	if x != nil {
		return x.Instruments
	}
	return nil
}

type isAssetFull_Ext interface {
	isAssetFull_Ext()
}

type AssetFull_Currency struct {
	Currency *AssetCurrency `protobuf:"bytes,8,opt,name=currency,proto3,oneof"` //Валюта. Обязательно и заполняется только для `type = ASSET_TYPE_CURRENCY`.
}

type AssetFull_Security struct {
	Security *AssetSecurity `protobuf:"bytes,9,opt,name=security,proto3,oneof"` //Ценная бумага. Обязательно и заполняется только для `type = ASSET_TYPE_SECURITY`.
}

func (*AssetFull_Currency) isAssetFull_Ext() {}

func (*AssetFull_Security) isAssetFull_Ext() {}

// Информация об активе.
type Asset struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           string                 `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`                           //Уникальный идентификатор актива.
	Type          AssetType              `protobuf:"varint,2,opt,name=type,proto3,enum=tinvest.AssetType" json:"type,omitempty"` //Тип актива.
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                         //Наименование актива.
	Instruments   []*AssetInstrument     `protobuf:"bytes,4,rep,name=instruments,proto3" json:"instruments,omitempty"`           //Массив идентификаторов инструментов.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Asset) Reset() {
	*x = Asset{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Asset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Asset) ProtoMessage() {}

func (x *Asset) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Asset.ProtoReflect.Descriptor instead.
func (*Asset) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{45}
}

func (x *Asset) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Asset) GetType() AssetType {
	if x != nil {
		return x.Type
	}
	return AssetType_ASSET_TYPE_UNSPECIFIED
}

func (x *Asset) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Asset) GetInstruments() []*AssetInstrument {
	if x != nil {
		return x.Instruments
	}
	return nil
}

// Валюта.
type AssetCurrency struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BaseCurrency  string                 `protobuf:"bytes,1,opt,name=base_currency,json=baseCurrency,proto3" json:"base_currency,omitempty"` //ISO-код валюты.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssetCurrency) Reset() {
	*x = AssetCurrency{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssetCurrency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetCurrency) ProtoMessage() {}

func (x *AssetCurrency) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetCurrency.ProtoReflect.Descriptor instead.
func (*AssetCurrency) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{46}
}

func (x *AssetCurrency) GetBaseCurrency() string {
	if x != nil {
		return x.BaseCurrency
	}
	return ""
}

// Ценная бумага.
type AssetSecurity struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Isin           string                 `protobuf:"bytes,1,opt,name=isin,proto3" json:"isin,omitempty"`                                                                         //ISIN-идентификатор ценной бумаги.
	Type           string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`                                                                         //Тип ценной бумаги.
	InstrumentKind InstrumentType         `protobuf:"varint,10,opt,name=instrument_kind,json=instrumentKind,proto3,enum=tinvest.InstrumentType" json:"instrument_kind,omitempty"` //Тип инструмента.
	// Types that are valid to be assigned to Ext:
	//
	//	*AssetSecurity_Share
	//	*AssetSecurity_Bond
	//	*AssetSecurity_Sp
	//	*AssetSecurity_Etf
	//	*AssetSecurity_ClearingCertificate
	Ext           isAssetSecurity_Ext `protobuf_oneof:"ext"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssetSecurity) Reset() {
	*x = AssetSecurity{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssetSecurity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetSecurity) ProtoMessage() {}

func (x *AssetSecurity) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetSecurity.ProtoReflect.Descriptor instead.
func (*AssetSecurity) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{47}
}

func (x *AssetSecurity) GetIsin() string {
	if x != nil {
		return x.Isin
	}
	return ""
}

func (x *AssetSecurity) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AssetSecurity) GetInstrumentKind() InstrumentType {
	if x != nil {
		return x.InstrumentKind
	}
	return InstrumentType_INSTRUMENT_TYPE_UNSPECIFIED
}

func (x *AssetSecurity) GetExt() isAssetSecurity_Ext {
	if x != nil {
		return x.Ext
	}
	return nil
}

func (x *AssetSecurity) GetShare() *AssetShare {
	if x != nil {
		if x, ok := x.Ext.(*AssetSecurity_Share); ok {
			return x.Share
		}
	}
	return nil
}

func (x *AssetSecurity) GetBond() *AssetBond {
	if x != nil {
		if x, ok := x.Ext.(*AssetSecurity_Bond); ok {
			return x.Bond
		}
	}
	return nil
}

func (x *AssetSecurity) GetSp() *AssetStructuredProduct {
	if x != nil {
		if x, ok := x.Ext.(*AssetSecurity_Sp); ok {
			return x.Sp
		}
	}
	return nil
}

func (x *AssetSecurity) GetEtf() *AssetEtf {
	if x != nil {
		if x, ok := x.Ext.(*AssetSecurity_Etf); ok {
			return x.Etf
		}
	}
	return nil
}

func (x *AssetSecurity) GetClearingCertificate() *AssetClearingCertificate {
	if x != nil {
		if x, ok := x.Ext.(*AssetSecurity_ClearingCertificate); ok {
			return x.ClearingCertificate
		}
	}
	return nil
}

type isAssetSecurity_Ext interface {
	isAssetSecurity_Ext()
}

type AssetSecurity_Share struct {
	Share *AssetShare `protobuf:"bytes,3,opt,name=share,proto3,oneof"` //Акция. Заполняется только для акций — тип актива `asset.type = ASSET_TYPE_SECURITY` и `security.type = share`.
}

type AssetSecurity_Bond struct {
	Bond *AssetBond `protobuf:"bytes,4,opt,name=bond,proto3,oneof"` //Облигация. Заполняется только для облигаций — тип актива `asset.type = ASSET_TYPE_SECURITY` и `security.type = bond`.
}

type AssetSecurity_Sp struct {
	Sp *AssetStructuredProduct `protobuf:"bytes,5,opt,name=sp,proto3,oneof"` //Структурная нота. Заполняется только для структурных продуктов — тип актива `asset.type = ASSET_TYPE_SECURITY` и `security.type = sp`.
}

type AssetSecurity_Etf struct {
	Etf *AssetEtf `protobuf:"bytes,6,opt,name=etf,proto3,oneof"` // Фонд. Заполняется только для фондов — тип актива `asset.type = ASSET_TYPE_SECURITY` и `security.type = etf`.
}

type AssetSecurity_ClearingCertificate struct {
	ClearingCertificate *AssetClearingCertificate `protobuf:"bytes,7,opt,name=clearing_certificate,json=clearingCertificate,proto3,oneof"` // Клиринговый сертификат участия. Заполняется только для клиринговых сертификатов — тип актива `asset.type = ASSET_TYPE_SECURITY` и security.type = `clearing_certificate`.
}

func (*AssetSecurity_Share) isAssetSecurity_Ext() {}

func (*AssetSecurity_Bond) isAssetSecurity_Ext() {}

func (*AssetSecurity_Sp) isAssetSecurity_Ext() {}

func (*AssetSecurity_Etf) isAssetSecurity_Ext() {}

func (*AssetSecurity_ClearingCertificate) isAssetSecurity_Ext() {}

// Акция.
type AssetShare struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Type               ShareType              `protobuf:"varint,1,opt,name=type,proto3,enum=tinvest.ShareType" json:"type,omitempty"`                                 //Тип акции.
	IssueSize          *Quotation             `protobuf:"bytes,2,opt,name=issue_size,json=issueSize,proto3" json:"issue_size,omitempty"`                              //Объем выпуска (шт.).
	Nominal            *Quotation             `protobuf:"bytes,3,opt,name=nominal,proto3" json:"nominal,omitempty"`                                                   //Номинал.
	NominalCurrency    string                 `protobuf:"bytes,4,opt,name=nominal_currency,json=nominalCurrency,proto3" json:"nominal_currency,omitempty"`            //Валюта номинала.
	PrimaryIndex       string                 `protobuf:"bytes,5,opt,name=primary_index,json=primaryIndex,proto3" json:"primary_index,omitempty"`                     //Индекс (Bloomberg).
	DividendRate       *Quotation             `protobuf:"bytes,6,opt,name=dividend_rate,json=dividendRate,proto3" json:"dividend_rate,omitempty"`                     //Ставка дивиденда (для привилегированных акций).
	PreferredShareType string                 `protobuf:"bytes,7,opt,name=preferred_share_type,json=preferredShareType,proto3" json:"preferred_share_type,omitempty"` //Тип привилегированных акций.
	IpoDate            *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=ipo_date,json=ipoDate,proto3" json:"ipo_date,omitempty"`                                    //Дата IPO.
	RegistryDate       *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=registry_date,json=registryDate,proto3" json:"registry_date,omitempty"`                     //Дата регистрации.
	DivYieldFlag       bool                   `protobuf:"varint,10,opt,name=div_yield_flag,json=divYieldFlag,proto3" json:"div_yield_flag,omitempty"`                 //Признак наличия дивидендной доходности.
	IssueKind          string                 `protobuf:"bytes,11,opt,name=issue_kind,json=issueKind,proto3" json:"issue_kind,omitempty"`                             //Форма выпуска ФИ.
	PlacementDate      *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=placement_date,json=placementDate,proto3" json:"placement_date,omitempty"`                 //Дата размещения акции.
	RepresIsin         string                 `protobuf:"bytes,13,opt,name=repres_isin,json=represIsin,proto3" json:"repres_isin,omitempty"`                          //ISIN базового актива.
	IssueSizePlan      *Quotation             `protobuf:"bytes,14,opt,name=issue_size_plan,json=issueSizePlan,proto3" json:"issue_size_plan,omitempty"`               //Объявленное количество, шт.
	TotalFloat         *Quotation             `protobuf:"bytes,15,opt,name=total_float,json=totalFloat,proto3" json:"total_float,omitempty"`                          //Количество акций в свободном обращении.
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *AssetShare) Reset() {
	*x = AssetShare{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssetShare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetShare) ProtoMessage() {}

func (x *AssetShare) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetShare.ProtoReflect.Descriptor instead.
func (*AssetShare) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{48}
}

func (x *AssetShare) GetType() ShareType {
	if x != nil {
		return x.Type
	}
	return ShareType_SHARE_TYPE_UNSPECIFIED
}

func (x *AssetShare) GetIssueSize() *Quotation {
	if x != nil {
		return x.IssueSize
	}
	return nil
}

func (x *AssetShare) GetNominal() *Quotation {
	if x != nil {
		return x.Nominal
	}
	return nil
}

func (x *AssetShare) GetNominalCurrency() string {
	if x != nil {
		return x.NominalCurrency
	}
	return ""
}

func (x *AssetShare) GetPrimaryIndex() string {
	if x != nil {
		return x.PrimaryIndex
	}
	return ""
}

func (x *AssetShare) GetDividendRate() *Quotation {
	if x != nil {
		return x.DividendRate
	}
	return nil
}

func (x *AssetShare) GetPreferredShareType() string {
	if x != nil {
		return x.PreferredShareType
	}
	return ""
}

func (x *AssetShare) GetIpoDate() *timestamppb.Timestamp {
	if x != nil {
		return x.IpoDate
	}
	return nil
}

func (x *AssetShare) GetRegistryDate() *timestamppb.Timestamp {
	if x != nil {
		return x.RegistryDate
	}
	return nil
}

func (x *AssetShare) GetDivYieldFlag() bool {
	if x != nil {
		return x.DivYieldFlag
	}
	return false
}

func (x *AssetShare) GetIssueKind() string {
	if x != nil {
		return x.IssueKind
	}
	return ""
}

func (x *AssetShare) GetPlacementDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PlacementDate
	}
	return nil
}

func (x *AssetShare) GetRepresIsin() string {
	if x != nil {
		return x.RepresIsin
	}
	return ""
}

func (x *AssetShare) GetIssueSizePlan() *Quotation {
	if x != nil {
		return x.IssueSizePlan
	}
	return nil
}

func (x *AssetShare) GetTotalFloat() *Quotation {
	if x != nil {
		return x.TotalFloat
	}
	return nil
}

// Облигация.
type AssetBond struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	CurrentNominal        *Quotation             `protobuf:"bytes,1,opt,name=current_nominal,json=currentNominal,proto3" json:"current_nominal,omitempty"`                           //Текущий номинал.
	BorrowName            string                 `protobuf:"bytes,2,opt,name=borrow_name,json=borrowName,proto3" json:"borrow_name,omitempty"`                                       //Наименование заемщика.
	IssueSize             *Quotation             `protobuf:"bytes,3,opt,name=issue_size,json=issueSize,proto3" json:"issue_size,omitempty"`                                          //Объем эмиссии облигации (стоимость).
	Nominal               *Quotation             `protobuf:"bytes,4,opt,name=nominal,proto3" json:"nominal,omitempty"`                                                               //Номинал облигации.
	NominalCurrency       string                 `protobuf:"bytes,5,opt,name=nominal_currency,json=nominalCurrency,proto3" json:"nominal_currency,omitempty"`                        //Валюта номинала.
	IssueKind             string                 `protobuf:"bytes,6,opt,name=issue_kind,json=issueKind,proto3" json:"issue_kind,omitempty"`                                          //Форма выпуска облигации.
	InterestKind          string                 `protobuf:"bytes,7,opt,name=interest_kind,json=interestKind,proto3" json:"interest_kind,omitempty"`                                 //Форма дохода облигации.
	CouponQuantityPerYear int32                  `protobuf:"varint,8,opt,name=coupon_quantity_per_year,json=couponQuantityPerYear,proto3" json:"coupon_quantity_per_year,omitempty"` //Количество выплат в год.
	IndexedNominalFlag    bool                   `protobuf:"varint,9,opt,name=indexed_nominal_flag,json=indexedNominalFlag,proto3" json:"indexed_nominal_flag,omitempty"`            //Признак облигации с индексируемым номиналом.
	SubordinatedFlag      bool                   `protobuf:"varint,10,opt,name=subordinated_flag,json=subordinatedFlag,proto3" json:"subordinated_flag,omitempty"`                   //Признак субординированной облигации.
	CollateralFlag        bool                   `protobuf:"varint,11,opt,name=collateral_flag,json=collateralFlag,proto3" json:"collateral_flag,omitempty"`                         //Признак обеспеченной облигации.
	TaxFreeFlag           bool                   `protobuf:"varint,12,opt,name=tax_free_flag,json=taxFreeFlag,proto3" json:"tax_free_flag,omitempty"`                                //Признак показывает, что купоны облигации не облагаются налогом — для mass market.
	AmortizationFlag      bool                   `protobuf:"varint,13,opt,name=amortization_flag,json=amortizationFlag,proto3" json:"amortization_flag,omitempty"`                   //Признак облигации с амортизацией долга.
	FloatingCouponFlag    bool                   `protobuf:"varint,14,opt,name=floating_coupon_flag,json=floatingCouponFlag,proto3" json:"floating_coupon_flag,omitempty"`           //Признак облигации с плавающим купоном.
	PerpetualFlag         bool                   `protobuf:"varint,15,opt,name=perpetual_flag,json=perpetualFlag,proto3" json:"perpetual_flag,omitempty"`                            //Признак бессрочной облигации.
	MaturityDate          *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=maturity_date,json=maturityDate,proto3" json:"maturity_date,omitempty"`                                //Дата погашения облигации.
	ReturnCondition       string                 `protobuf:"bytes,17,opt,name=return_condition,json=returnCondition,proto3" json:"return_condition,omitempty"`                       //Описание и условия получения дополнительного дохода.
	StateRegDate          *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=state_reg_date,json=stateRegDate,proto3" json:"state_reg_date,omitempty"`                              //Дата выпуска облигации.
	PlacementDate         *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=placement_date,json=placementDate,proto3" json:"placement_date,omitempty"`                             //Дата размещения облигации.
	PlacementPrice        *Quotation             `protobuf:"bytes,20,opt,name=placement_price,json=placementPrice,proto3" json:"placement_price,omitempty"`                          //Цена размещения облигации.
	IssueSizePlan         *Quotation             `protobuf:"bytes,21,opt,name=issue_size_plan,json=issueSizePlan,proto3" json:"issue_size_plan,omitempty"`                           //Объявленное количество, шт.
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *AssetBond) Reset() {
	*x = AssetBond{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssetBond) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetBond) ProtoMessage() {}

func (x *AssetBond) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetBond.ProtoReflect.Descriptor instead.
func (*AssetBond) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{49}
}

func (x *AssetBond) GetCurrentNominal() *Quotation {
	if x != nil {
		return x.CurrentNominal
	}
	return nil
}

func (x *AssetBond) GetBorrowName() string {
	if x != nil {
		return x.BorrowName
	}
	return ""
}

func (x *AssetBond) GetIssueSize() *Quotation {
	if x != nil {
		return x.IssueSize
	}
	return nil
}

func (x *AssetBond) GetNominal() *Quotation {
	if x != nil {
		return x.Nominal
	}
	return nil
}

func (x *AssetBond) GetNominalCurrency() string {
	if x != nil {
		return x.NominalCurrency
	}
	return ""
}

func (x *AssetBond) GetIssueKind() string {
	if x != nil {
		return x.IssueKind
	}
	return ""
}

func (x *AssetBond) GetInterestKind() string {
	if x != nil {
		return x.InterestKind
	}
	return ""
}

func (x *AssetBond) GetCouponQuantityPerYear() int32 {
	if x != nil {
		return x.CouponQuantityPerYear
	}
	return 0
}

func (x *AssetBond) GetIndexedNominalFlag() bool {
	if x != nil {
		return x.IndexedNominalFlag
	}
	return false
}

func (x *AssetBond) GetSubordinatedFlag() bool {
	if x != nil {
		return x.SubordinatedFlag
	}
	return false
}

func (x *AssetBond) GetCollateralFlag() bool {
	if x != nil {
		return x.CollateralFlag
	}
	return false
}

func (x *AssetBond) GetTaxFreeFlag() bool {
	if x != nil {
		return x.TaxFreeFlag
	}
	return false
}

func (x *AssetBond) GetAmortizationFlag() bool {
	if x != nil {
		return x.AmortizationFlag
	}
	return false
}

func (x *AssetBond) GetFloatingCouponFlag() bool {
	if x != nil {
		return x.FloatingCouponFlag
	}
	return false
}

func (x *AssetBond) GetPerpetualFlag() bool {
	if x != nil {
		return x.PerpetualFlag
	}
	return false
}

func (x *AssetBond) GetMaturityDate() *timestamppb.Timestamp {
	if x != nil {
		return x.MaturityDate
	}
	return nil
}

func (x *AssetBond) GetReturnCondition() string {
	if x != nil {
		return x.ReturnCondition
	}
	return ""
}

func (x *AssetBond) GetStateRegDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StateRegDate
	}
	return nil
}

func (x *AssetBond) GetPlacementDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PlacementDate
	}
	return nil
}

func (x *AssetBond) GetPlacementPrice() *Quotation {
	if x != nil {
		return x.PlacementPrice
	}
	return nil
}

func (x *AssetBond) GetIssueSizePlan() *Quotation {
	if x != nil {
		return x.IssueSizePlan
	}
	return nil
}

// Структурная нота.
type AssetStructuredProduct struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	BorrowName      string                 `protobuf:"bytes,1,opt,name=borrow_name,json=borrowName,proto3" json:"borrow_name,omitempty"`                      //Наименование заемщика.
	Nominal         *Quotation             `protobuf:"bytes,2,opt,name=nominal,proto3" json:"nominal,omitempty"`                                              //Номинал.
	NominalCurrency string                 `protobuf:"bytes,3,opt,name=nominal_currency,json=nominalCurrency,proto3" json:"nominal_currency,omitempty"`       //Валюта номинала.
	Type            StructuredProductType  `protobuf:"varint,4,opt,name=type,proto3,enum=tinvest.StructuredProductType" json:"type,omitempty"`                //Тип структурной ноты.
	LogicPortfolio  string                 `protobuf:"bytes,5,opt,name=logic_portfolio,json=logicPortfolio,proto3" json:"logic_portfolio,omitempty"`          //Стратегия портфеля.
	AssetType       AssetType              `protobuf:"varint,6,opt,name=asset_type,json=assetType,proto3,enum=tinvest.AssetType" json:"asset_type,omitempty"` //Тип базового актива.
	BasicAsset      string                 `protobuf:"bytes,7,opt,name=basic_asset,json=basicAsset,proto3" json:"basic_asset,omitempty"`                      //Вид базового актива в зависимости от типа базового актива.
	SafetyBarrier   *Quotation             `protobuf:"bytes,8,opt,name=safety_barrier,json=safetyBarrier,proto3" json:"safety_barrier,omitempty"`             //Барьер сохранности в процентах.
	MaturityDate    *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=maturity_date,json=maturityDate,proto3" json:"maturity_date,omitempty"`                //Дата погашения.
	IssueSizePlan   *Quotation             `protobuf:"bytes,10,opt,name=issue_size_plan,json=issueSizePlan,proto3" json:"issue_size_plan,omitempty"`          //Объявленное количество, шт.
	IssueSize       *Quotation             `protobuf:"bytes,11,opt,name=issue_size,json=issueSize,proto3" json:"issue_size,omitempty"`                        //Объем размещения.
	PlacementDate   *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=placement_date,json=placementDate,proto3" json:"placement_date,omitempty"`            //Дата размещения ноты.
	IssueKind       string                 `protobuf:"bytes,13,opt,name=issue_kind,json=issueKind,proto3" json:"issue_kind,omitempty"`                        //Форма выпуска.
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *AssetStructuredProduct) Reset() {
	*x = AssetStructuredProduct{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssetStructuredProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetStructuredProduct) ProtoMessage() {}

func (x *AssetStructuredProduct) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetStructuredProduct.ProtoReflect.Descriptor instead.
func (*AssetStructuredProduct) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{50}
}

func (x *AssetStructuredProduct) GetBorrowName() string {
	if x != nil {
		return x.BorrowName
	}
	return ""
}

func (x *AssetStructuredProduct) GetNominal() *Quotation {
	if x != nil {
		return x.Nominal
	}
	return nil
}

func (x *AssetStructuredProduct) GetNominalCurrency() string {
	if x != nil {
		return x.NominalCurrency
	}
	return ""
}

func (x *AssetStructuredProduct) GetType() StructuredProductType {
	if x != nil {
		return x.Type
	}
	return StructuredProductType_SP_TYPE_UNSPECIFIED
}

func (x *AssetStructuredProduct) GetLogicPortfolio() string {
	if x != nil {
		return x.LogicPortfolio
	}
	return ""
}

func (x *AssetStructuredProduct) GetAssetType() AssetType {
	if x != nil {
		return x.AssetType
	}
	return AssetType_ASSET_TYPE_UNSPECIFIED
}

func (x *AssetStructuredProduct) GetBasicAsset() string {
	if x != nil {
		return x.BasicAsset
	}
	return ""
}

func (x *AssetStructuredProduct) GetSafetyBarrier() *Quotation {
	if x != nil {
		return x.SafetyBarrier
	}
	return nil
}

func (x *AssetStructuredProduct) GetMaturityDate() *timestamppb.Timestamp {
	if x != nil {
		return x.MaturityDate
	}
	return nil
}

func (x *AssetStructuredProduct) GetIssueSizePlan() *Quotation {
	if x != nil {
		return x.IssueSizePlan
	}
	return nil
}

func (x *AssetStructuredProduct) GetIssueSize() *Quotation {
	if x != nil {
		return x.IssueSize
	}
	return nil
}

func (x *AssetStructuredProduct) GetPlacementDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PlacementDate
	}
	return nil
}

func (x *AssetStructuredProduct) GetIssueKind() string {
	if x != nil {
		return x.IssueKind
	}
	return ""
}

// Фонд.
type AssetEtf struct {
	state                     protoimpl.MessageState   `protogen:"open.v1"`
	TotalExpense              *Quotation               `protobuf:"bytes,1,opt,name=total_expense,json=totalExpense,proto3" json:"total_expense,omitempty"`                                             //Суммарные расходы фонда в процентах.
	HurdleRate                *Quotation               `protobuf:"bytes,2,opt,name=hurdle_rate,json=hurdleRate,proto3" json:"hurdle_rate,omitempty"`                                                   //Барьерная ставка доходности, после которой фонд имеет право на perfomance fee — в процентах.
	PerformanceFee            *Quotation               `protobuf:"bytes,3,opt,name=performance_fee,json=performanceFee,proto3" json:"performance_fee,omitempty"`                                       //Комиссия за успешные результаты фонда в процентах.
	FixedCommission           *Quotation               `protobuf:"bytes,4,opt,name=fixed_commission,json=fixedCommission,proto3" json:"fixed_commission,omitempty"`                                    //Фиксированная комиссия за управление в процентах.
	PaymentType               string                   `protobuf:"bytes,5,opt,name=payment_type,json=paymentType,proto3" json:"payment_type,omitempty"`                                                //Тип распределения доходов от выплат по бумагам.
	WatermarkFlag             bool                     `protobuf:"varint,6,opt,name=watermark_flag,json=watermarkFlag,proto3" json:"watermark_flag,omitempty"`                                         //Признак необходимости выхода фонда в плюс для получения комиссии.
	BuyPremium                *Quotation               `protobuf:"bytes,7,opt,name=buy_premium,json=buyPremium,proto3" json:"buy_premium,omitempty"`                                                   //Премия (надбавка к цене) при покупке доли в фонде — в процентах.
	SellDiscount              *Quotation               `protobuf:"bytes,8,opt,name=sell_discount,json=sellDiscount,proto3" json:"sell_discount,omitempty"`                                             //Ставка дисконта (вычет из цены) при продаже доли в фонде — в процентах.
	RebalancingFlag           bool                     `protobuf:"varint,9,opt,name=rebalancing_flag,json=rebalancingFlag,proto3" json:"rebalancing_flag,omitempty"`                                   //Признак ребалансируемости портфеля фонда.
	RebalancingFreq           string                   `protobuf:"bytes,10,opt,name=rebalancing_freq,json=rebalancingFreq,proto3" json:"rebalancing_freq,omitempty"`                                   //Периодичность ребалансировки.
	ManagementType            string                   `protobuf:"bytes,11,opt,name=management_type,json=managementType,proto3" json:"management_type,omitempty"`                                      //Тип управления.
	PrimaryIndex              string                   `protobuf:"bytes,12,opt,name=primary_index,json=primaryIndex,proto3" json:"primary_index,omitempty"`                                            //Индекс, который реплицирует (старается копировать) фонд.
	FocusType                 string                   `protobuf:"bytes,13,opt,name=focus_type,json=focusType,proto3" json:"focus_type,omitempty"`                                                     //База ETF.
	LeveragedFlag             bool                     `protobuf:"varint,14,opt,name=leveraged_flag,json=leveragedFlag,proto3" json:"leveraged_flag,omitempty"`                                        //Признак использования заемных активов (плечо).
	NumShare                  *Quotation               `protobuf:"bytes,15,opt,name=num_share,json=numShare,proto3" json:"num_share,omitempty"`                                                        //Количество акций в обращении.
	UcitsFlag                 bool                     `protobuf:"varint,16,opt,name=ucits_flag,json=ucitsFlag,proto3" json:"ucits_flag,omitempty"`                                                    //Признак обязательства по отчетности перед регулятором.
	ReleasedDate              *timestamppb.Timestamp   `protobuf:"bytes,17,opt,name=released_date,json=releasedDate,proto3" json:"released_date,omitempty"`                                            //Дата выпуска.
	Description               string                   `protobuf:"bytes,18,opt,name=description,proto3" json:"description,omitempty"`                                                                  //Описание фонда.
	PrimaryIndexDescription   string                   `protobuf:"bytes,19,opt,name=primary_index_description,json=primaryIndexDescription,proto3" json:"primary_index_description,omitempty"`         //Описание индекса, за которым следует фонд.
	PrimaryIndexCompany       string                   `protobuf:"bytes,20,opt,name=primary_index_company,json=primaryIndexCompany,proto3" json:"primary_index_company,omitempty"`                     //Основные компании, в которые вкладывается фонд.
	IndexRecoveryPeriod       *Quotation               `protobuf:"bytes,21,opt,name=index_recovery_period,json=indexRecoveryPeriod,proto3" json:"index_recovery_period,omitempty"`                     //Срок восстановления индекса после просадки.
	InavCode                  string                   `protobuf:"bytes,22,opt,name=inav_code,json=inavCode,proto3" json:"inav_code,omitempty"`                                                        //IVAV-код.
	DivYieldFlag              bool                     `protobuf:"varint,23,opt,name=div_yield_flag,json=divYieldFlag,proto3" json:"div_yield_flag,omitempty"`                                         //Признак наличия дивидендной доходности.
	ExpenseCommission         *Quotation               `protobuf:"bytes,24,opt,name=expense_commission,json=expenseCommission,proto3" json:"expense_commission,omitempty"`                             //Комиссия на покрытие расходов фонда в процентах.
	PrimaryIndexTrackingError *Quotation               `protobuf:"bytes,25,opt,name=primary_index_tracking_error,json=primaryIndexTrackingError,proto3" json:"primary_index_tracking_error,omitempty"` //Ошибка следования за индексом в процентах.
	RebalancingPlan           string                   `protobuf:"bytes,26,opt,name=rebalancing_plan,json=rebalancingPlan,proto3" json:"rebalancing_plan,omitempty"`                                   //Плановая ребалансировка портфеля.
	TaxRate                   string                   `protobuf:"bytes,27,opt,name=tax_rate,json=taxRate,proto3" json:"tax_rate,omitempty"`                                                           //Ставки налогообложения дивидендов и купонов.
	RebalancingDates          []*timestamppb.Timestamp `protobuf:"bytes,28,rep,name=rebalancing_dates,json=rebalancingDates,proto3" json:"rebalancing_dates,omitempty"`                                //Даты ребалансировок.
	IssueKind                 string                   `protobuf:"bytes,29,opt,name=issue_kind,json=issueKind,proto3" json:"issue_kind,omitempty"`                                                     //Форма выпуска.
	Nominal                   *Quotation               `protobuf:"bytes,30,opt,name=nominal,proto3" json:"nominal,omitempty"`                                                                          //Номинал.
	NominalCurrency           string                   `protobuf:"bytes,31,opt,name=nominal_currency,json=nominalCurrency,proto3" json:"nominal_currency,omitempty"`                                   //Валюта номинала.
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *AssetEtf) Reset() {
	*x = AssetEtf{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssetEtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetEtf) ProtoMessage() {}

func (x *AssetEtf) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetEtf.ProtoReflect.Descriptor instead.
func (*AssetEtf) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{51}
}

func (x *AssetEtf) GetTotalExpense() *Quotation {
	if x != nil {
		return x.TotalExpense
	}
	return nil
}

func (x *AssetEtf) GetHurdleRate() *Quotation {
	if x != nil {
		return x.HurdleRate
	}
	return nil
}

func (x *AssetEtf) GetPerformanceFee() *Quotation {
	if x != nil {
		return x.PerformanceFee
	}
	return nil
}

func (x *AssetEtf) GetFixedCommission() *Quotation {
	if x != nil {
		return x.FixedCommission
	}
	return nil
}

func (x *AssetEtf) GetPaymentType() string {
	if x != nil {
		return x.PaymentType
	}
	return ""
}

func (x *AssetEtf) GetWatermarkFlag() bool {
	if x != nil {
		return x.WatermarkFlag
	}
	return false
}

func (x *AssetEtf) GetBuyPremium() *Quotation {
	if x != nil {
		return x.BuyPremium
	}
	return nil
}

func (x *AssetEtf) GetSellDiscount() *Quotation {
	if x != nil {
		return x.SellDiscount
	}
	return nil
}

func (x *AssetEtf) GetRebalancingFlag() bool {
	if x != nil {
		return x.RebalancingFlag
	}
	return false
}

func (x *AssetEtf) GetRebalancingFreq() string {
	if x != nil {
		return x.RebalancingFreq
	}
	return ""
}

func (x *AssetEtf) GetManagementType() string {
	if x != nil {
		return x.ManagementType
	}
	return ""
}

func (x *AssetEtf) GetPrimaryIndex() string {
	if x != nil {
		return x.PrimaryIndex
	}
	return ""
}

func (x *AssetEtf) GetFocusType() string {
	if x != nil {
		return x.FocusType
	}
	return ""
}

func (x *AssetEtf) GetLeveragedFlag() bool {
	if x != nil {
		return x.LeveragedFlag
	}
	return false
}

func (x *AssetEtf) GetNumShare() *Quotation {
	if x != nil {
		return x.NumShare
	}
	return nil
}

func (x *AssetEtf) GetUcitsFlag() bool {
	if x != nil {
		return x.UcitsFlag
	}
	return false
}

func (x *AssetEtf) GetReleasedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReleasedDate
	}
	return nil
}

func (x *AssetEtf) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AssetEtf) GetPrimaryIndexDescription() string {
	if x != nil {
		return x.PrimaryIndexDescription
	}
	return ""
}

func (x *AssetEtf) GetPrimaryIndexCompany() string {
	if x != nil {
		return x.PrimaryIndexCompany
	}
	return ""
}

func (x *AssetEtf) GetIndexRecoveryPeriod() *Quotation {
	if x != nil {
		return x.IndexRecoveryPeriod
	}
	return nil
}

func (x *AssetEtf) GetInavCode() string {
	if x != nil {
		return x.InavCode
	}
	return ""
}

func (x *AssetEtf) GetDivYieldFlag() bool {
	if x != nil {
		return x.DivYieldFlag
	}
	return false
}

func (x *AssetEtf) GetExpenseCommission() *Quotation {
	if x != nil {
		return x.ExpenseCommission
	}
	return nil
}

func (x *AssetEtf) GetPrimaryIndexTrackingError() *Quotation {
	if x != nil {
		return x.PrimaryIndexTrackingError
	}
	return nil
}

func (x *AssetEtf) GetRebalancingPlan() string {
	if x != nil {
		return x.RebalancingPlan
	}
	return ""
}

func (x *AssetEtf) GetTaxRate() string {
	if x != nil {
		return x.TaxRate
	}
	return ""
}

func (x *AssetEtf) GetRebalancingDates() []*timestamppb.Timestamp {
	if x != nil {
		return x.RebalancingDates
	}
	return nil
}

func (x *AssetEtf) GetIssueKind() string {
	if x != nil {
		return x.IssueKind
	}
	return ""
}

func (x *AssetEtf) GetNominal() *Quotation {
	if x != nil {
		return x.Nominal
	}
	return nil
}

func (x *AssetEtf) GetNominalCurrency() string {
	if x != nil {
		return x.NominalCurrency
	}
	return ""
}

// Клиринговый сертификат участия.
type AssetClearingCertificate struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Nominal         *Quotation             `protobuf:"bytes,1,opt,name=nominal,proto3" json:"nominal,omitempty"`                                        //Номинал.
	NominalCurrency string                 `protobuf:"bytes,2,opt,name=nominal_currency,json=nominalCurrency,proto3" json:"nominal_currency,omitempty"` //Валюта номинала.
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *AssetClearingCertificate) Reset() {
	*x = AssetClearingCertificate{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssetClearingCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetClearingCertificate) ProtoMessage() {}

func (x *AssetClearingCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetClearingCertificate.ProtoReflect.Descriptor instead.
func (*AssetClearingCertificate) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{52}
}

func (x *AssetClearingCertificate) GetNominal() *Quotation {
	if x != nil {
		return x.Nominal
	}
	return nil
}

func (x *AssetClearingCertificate) GetNominalCurrency() string {
	if x != nil {
		return x.NominalCurrency
	}
	return ""
}

// Бренд.
type Brand struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Uid               string                 `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`                                                          //UID-идентификатор бренда.
	Name              string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                        //Наименование бренда.
	Description       string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`                                          //Описание.
	Info              string                 `protobuf:"bytes,4,opt,name=info,proto3" json:"info,omitempty"`                                                        //Информация о бренде.
	Company           string                 `protobuf:"bytes,5,opt,name=company,proto3" json:"company,omitempty"`                                                  //Компания.
	Sector            string                 `protobuf:"bytes,6,opt,name=sector,proto3" json:"sector,omitempty"`                                                    //Сектор.
	CountryOfRisk     string                 `protobuf:"bytes,7,opt,name=country_of_risk,json=countryOfRisk,proto3" json:"country_of_risk,omitempty"`               //Код страны риска.
	CountryOfRiskName string                 `protobuf:"bytes,8,opt,name=country_of_risk_name,json=countryOfRiskName,proto3" json:"country_of_risk_name,omitempty"` //Наименование страны риска.
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Brand) Reset() {
	*x = Brand{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Brand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Brand) ProtoMessage() {}

func (x *Brand) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Brand.ProtoReflect.Descriptor instead.
func (*Brand) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{53}
}

func (x *Brand) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Brand) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Brand) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Brand) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *Brand) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *Brand) GetSector() string {
	if x != nil {
		return x.Sector
	}
	return ""
}

func (x *Brand) GetCountryOfRisk() string {
	if x != nil {
		return x.CountryOfRisk
	}
	return ""
}

func (x *Brand) GetCountryOfRiskName() string {
	if x != nil {
		return x.CountryOfRiskName
	}
	return ""
}

// Идентификаторы инструмента.
type AssetInstrument struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Uid            string                 `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`                                                                           //UID-идентификатор инструмента.
	Figi           string                 `protobuf:"bytes,2,opt,name=figi,proto3" json:"figi,omitempty"`                                                                         //FIGI-идентификатор инструмента.
	InstrumentType string                 `protobuf:"bytes,3,opt,name=instrument_type,json=instrumentType,proto3" json:"instrument_type,omitempty"`                               //Тип инструмента.
	Ticker         string                 `protobuf:"bytes,4,opt,name=ticker,proto3" json:"ticker,omitempty"`                                                                     //Тикер инструмента.
	ClassCode      string                 `protobuf:"bytes,5,opt,name=class_code,json=classCode,proto3" json:"class_code,omitempty"`                                              //Класс-код (секция торгов).
	Links          []*InstrumentLink      `protobuf:"bytes,6,rep,name=links,proto3" json:"links,omitempty"`                                                                       //Массив связанных инструментов.
	InstrumentKind InstrumentType         `protobuf:"varint,10,opt,name=instrument_kind,json=instrumentKind,proto3,enum=tinvest.InstrumentType" json:"instrument_kind,omitempty"` //Тип инструмента.
	PositionUid    string                 `protobuf:"bytes,11,opt,name=position_uid,json=positionUid,proto3" json:"position_uid,omitempty"`                                       //ID позиции.
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AssetInstrument) Reset() {
	*x = AssetInstrument{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssetInstrument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetInstrument) ProtoMessage() {}

func (x *AssetInstrument) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetInstrument.ProtoReflect.Descriptor instead.
func (*AssetInstrument) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{54}
}

func (x *AssetInstrument) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *AssetInstrument) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *AssetInstrument) GetInstrumentType() string {
	if x != nil {
		return x.InstrumentType
	}
	return ""
}

func (x *AssetInstrument) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *AssetInstrument) GetClassCode() string {
	if x != nil {
		return x.ClassCode
	}
	return ""
}

func (x *AssetInstrument) GetLinks() []*InstrumentLink {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *AssetInstrument) GetInstrumentKind() InstrumentType {
	if x != nil {
		return x.InstrumentKind
	}
	return InstrumentType_INSTRUMENT_TYPE_UNSPECIFIED
}

func (x *AssetInstrument) GetPositionUid() string {
	if x != nil {
		return x.PositionUid
	}
	return ""
}

// Связь с другим инструментом.
type InstrumentLink struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`                                        //Тип связи.
	InstrumentUid string                 `protobuf:"bytes,2,opt,name=instrument_uid,json=instrumentUid,proto3" json:"instrument_uid,omitempty"` //UID-идентификатор связанного инструмента.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InstrumentLink) Reset() {
	*x = InstrumentLink{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InstrumentLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentLink) ProtoMessage() {}

func (x *InstrumentLink) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentLink.ProtoReflect.Descriptor instead.
func (*InstrumentLink) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{55}
}

func (x *InstrumentLink) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *InstrumentLink) GetInstrumentUid() string {
	if x != nil {
		return x.InstrumentUid
	}
	return ""
}

// Запрос списка избранных инструментов, входные параметры не требуются.
type GetFavoritesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GroupId       *string                `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3,oneof" json:"group_id,omitempty"` //Уникальный идентификатор группы.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFavoritesRequest) Reset() {
	*x = GetFavoritesRequest{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFavoritesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFavoritesRequest) ProtoMessage() {}

func (x *GetFavoritesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFavoritesRequest.ProtoReflect.Descriptor instead.
func (*GetFavoritesRequest) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{56}
}

func (x *GetFavoritesRequest) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

// В ответ передается список избранных инструментов в качестве массива.
type GetFavoritesResponse struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	FavoriteInstruments []*FavoriteInstrument  `protobuf:"bytes,1,rep,name=favorite_instruments,json=favoriteInstruments,proto3" json:"favorite_instruments,omitempty"` //Массив инструментов.
	GroupId             *string                `protobuf:"bytes,2,opt,name=group_id,json=groupId,proto3,oneof" json:"group_id,omitempty"`                               //Уникальный идентификатор группы.
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *GetFavoritesResponse) Reset() {
	*x = GetFavoritesResponse{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFavoritesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFavoritesResponse) ProtoMessage() {}

func (x *GetFavoritesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFavoritesResponse.ProtoReflect.Descriptor instead.
func (*GetFavoritesResponse) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{57}
}

func (x *GetFavoritesResponse) GetFavoriteInstruments() []*FavoriteInstrument {
	if x != nil {
		return x.FavoriteInstruments
	}
	return nil
}

func (x *GetFavoritesResponse) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

// Массив избранных инструментов.
type FavoriteInstrument struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Figi                  string                 `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                                                                         //FIGI-идентификатор инструмента.
	Ticker                string                 `protobuf:"bytes,2,opt,name=ticker,proto3" json:"ticker,omitempty"`                                                                     //Тикер инструмента.
	ClassCode             string                 `protobuf:"bytes,3,opt,name=class_code,json=classCode,proto3" json:"class_code,omitempty"`                                              //Класс-код инструмента.
	Isin                  string                 `protobuf:"bytes,4,opt,name=isin,proto3" json:"isin,omitempty"`                                                                         //ISIN-идентификатор инструмента.
	InstrumentType        string                 `protobuf:"bytes,11,opt,name=instrument_type,json=instrumentType,proto3" json:"instrument_type,omitempty"`                              //Тип инструмента.
	Name                  string                 `protobuf:"bytes,12,opt,name=name,proto3" json:"name,omitempty"`                                                                        //Название инструмента.
	Uid                   string                 `protobuf:"bytes,13,opt,name=uid,proto3" json:"uid,omitempty"`                                                                          //Уникальный идентификатор инструмента.
	OtcFlag               bool                   `protobuf:"varint,16,opt,name=otc_flag,json=otcFlag,proto3" json:"otc_flag,omitempty"`                                                  //Флаг, используемый ранее для определения внебиржевых инструментов. На данный момент не используется для торгуемых через API инструментов. Может использоваться как фильтр для операций, совершавшихся некоторое время назад на ОТС площадке.
	ApiTradeAvailableFlag bool                   `protobuf:"varint,17,opt,name=api_trade_available_flag,json=apiTradeAvailableFlag,proto3" json:"api_trade_available_flag,omitempty"`    //Возможность торговать инструментом через API.
	InstrumentKind        InstrumentType         `protobuf:"varint,18,opt,name=instrument_kind,json=instrumentKind,proto3,enum=tinvest.InstrumentType" json:"instrument_kind,omitempty"` //Тип инструмента.
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *FavoriteInstrument) Reset() {
	*x = FavoriteInstrument{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FavoriteInstrument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavoriteInstrument) ProtoMessage() {}

func (x *FavoriteInstrument) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavoriteInstrument.ProtoReflect.Descriptor instead.
func (*FavoriteInstrument) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{58}
}

func (x *FavoriteInstrument) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *FavoriteInstrument) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *FavoriteInstrument) GetClassCode() string {
	if x != nil {
		return x.ClassCode
	}
	return ""
}

func (x *FavoriteInstrument) GetIsin() string {
	if x != nil {
		return x.Isin
	}
	return ""
}

func (x *FavoriteInstrument) GetInstrumentType() string {
	if x != nil {
		return x.InstrumentType
	}
	return ""
}

func (x *FavoriteInstrument) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FavoriteInstrument) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *FavoriteInstrument) GetOtcFlag() bool {
	if x != nil {
		return x.OtcFlag
	}
	return false
}

func (x *FavoriteInstrument) GetApiTradeAvailableFlag() bool {
	if x != nil {
		return x.ApiTradeAvailableFlag
	}
	return false
}

func (x *FavoriteInstrument) GetInstrumentKind() InstrumentType {
	if x != nil {
		return x.InstrumentKind
	}
	return InstrumentType_INSTRUMENT_TYPE_UNSPECIFIED
}

// Запрос редактирования списка избранных инструментов.
type EditFavoritesRequest struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	Instruments   []*EditFavoritesRequestInstrument `protobuf:"bytes,1,rep,name=instruments,proto3" json:"instruments,omitempty"`                                                       //Массив инструментов.
	ActionType    EditFavoritesActionType           `protobuf:"varint,6,opt,name=action_type,json=actionType,proto3,enum=tinvest.EditFavoritesActionType" json:"action_type,omitempty"` //Тип действия со списком.
	GroupId       *string                           `protobuf:"bytes,7,opt,name=group_id,json=groupId,proto3,oneof" json:"group_id,omitempty"`                                          //Уникальный идентификатор группы.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EditFavoritesRequest) Reset() {
	*x = EditFavoritesRequest{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EditFavoritesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditFavoritesRequest) ProtoMessage() {}

func (x *EditFavoritesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditFavoritesRequest.ProtoReflect.Descriptor instead.
func (*EditFavoritesRequest) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{59}
}

func (x *EditFavoritesRequest) GetInstruments() []*EditFavoritesRequestInstrument {
	if x != nil {
		return x.Instruments
	}
	return nil
}

func (x *EditFavoritesRequest) GetActionType() EditFavoritesActionType {
	if x != nil {
		return x.ActionType
	}
	return EditFavoritesActionType_EDIT_FAVORITES_ACTION_TYPE_UNSPECIFIED
}

func (x *EditFavoritesRequest) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

// Массив инструментов для редактирования списка избранных инструментов.
type EditFavoritesRequestInstrument struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated: Marked as deprecated in tinvest/trb/instruments.proto.
	Figi          *string `protobuf:"bytes,1,opt,name=figi,proto3,oneof" json:"figi,omitempty"`                               //FIGI-идентификатор инструмента.
	InstrumentId  string  `protobuf:"bytes,2,opt,name=instrument_id,json=instrumentId,proto3" json:"instrument_id,omitempty"` //Идентификатор инструмента — `figi` или `instrument_uid`.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EditFavoritesRequestInstrument) Reset() {
	*x = EditFavoritesRequestInstrument{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EditFavoritesRequestInstrument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditFavoritesRequestInstrument) ProtoMessage() {}

func (x *EditFavoritesRequestInstrument) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditFavoritesRequestInstrument.ProtoReflect.Descriptor instead.
func (*EditFavoritesRequestInstrument) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{60}
}

// Deprecated: Marked as deprecated in tinvest/trb/instruments.proto.
func (x *EditFavoritesRequestInstrument) GetFigi() string {
	if x != nil && x.Figi != nil {
		return *x.Figi
	}
	return ""
}

func (x *EditFavoritesRequestInstrument) GetInstrumentId() string {
	if x != nil {
		return x.InstrumentId
	}
	return ""
}

// Результат редактирования списка избранных инструментов.
type EditFavoritesResponse struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	FavoriteInstruments []*FavoriteInstrument  `protobuf:"bytes,1,rep,name=favorite_instruments,json=favoriteInstruments,proto3" json:"favorite_instruments,omitempty"` //Массив инструментов.
	GroupId             *string                `protobuf:"bytes,2,opt,name=group_id,json=groupId,proto3,oneof" json:"group_id,omitempty"`                               //Уникальный идентификатор группы.
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *EditFavoritesResponse) Reset() {
	*x = EditFavoritesResponse{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EditFavoritesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditFavoritesResponse) ProtoMessage() {}

func (x *EditFavoritesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditFavoritesResponse.ProtoReflect.Descriptor instead.
func (*EditFavoritesResponse) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{61}
}

func (x *EditFavoritesResponse) GetFavoriteInstruments() []*FavoriteInstrument {
	if x != nil {
		return x.FavoriteInstruments
	}
	return nil
}

func (x *EditFavoritesResponse) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

// Запрос создания новой группы избранных инструментов.
type CreateFavoriteGroupRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GroupName     string                 `protobuf:"bytes,1,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`    //Название группы, не более 255 символов.
	GroupColor    string                 `protobuf:"bytes,2,opt,name=group_color,json=groupColor,proto3" json:"group_color,omitempty"` //Цвет группы. Принимает значения в HEX-формате, от "000000" до "FFFFFF"
	Note          *string                `protobuf:"bytes,3,opt,name=note,proto3,oneof" json:"note,omitempty"`                         //Описание
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateFavoriteGroupRequest) Reset() {
	*x = CreateFavoriteGroupRequest{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateFavoriteGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFavoriteGroupRequest) ProtoMessage() {}

func (x *CreateFavoriteGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFavoriteGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateFavoriteGroupRequest) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{62}
}

func (x *CreateFavoriteGroupRequest) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *CreateFavoriteGroupRequest) GetGroupColor() string {
	if x != nil {
		return x.GroupColor
	}
	return ""
}

func (x *CreateFavoriteGroupRequest) GetNote() string {
	if x != nil && x.Note != nil {
		return *x.Note
	}
	return ""
}

type CreateFavoriteGroupResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GroupId       string                 `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`       //Уникальный идентификатор группы.
	GroupName     string                 `protobuf:"bytes,2,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"` //Название группы.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateFavoriteGroupResponse) Reset() {
	*x = CreateFavoriteGroupResponse{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateFavoriteGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFavoriteGroupResponse) ProtoMessage() {}

func (x *CreateFavoriteGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFavoriteGroupResponse.ProtoReflect.Descriptor instead.
func (*CreateFavoriteGroupResponse) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{63}
}

func (x *CreateFavoriteGroupResponse) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *CreateFavoriteGroupResponse) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

// Запрос удаления избранной группы
type DeleteFavoriteGroupRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GroupId       string                 `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"` //Уникальный идентификатор группы.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteFavoriteGroupRequest) Reset() {
	*x = DeleteFavoriteGroupRequest{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteFavoriteGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFavoriteGroupRequest) ProtoMessage() {}

func (x *DeleteFavoriteGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFavoriteGroupRequest.ProtoReflect.Descriptor instead.
func (*DeleteFavoriteGroupRequest) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{64}
}

func (x *DeleteFavoriteGroupRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

type DeleteFavoriteGroupResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteFavoriteGroupResponse) Reset() {
	*x = DeleteFavoriteGroupResponse{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteFavoriteGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFavoriteGroupResponse) ProtoMessage() {}

func (x *DeleteFavoriteGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFavoriteGroupResponse.ProtoReflect.Descriptor instead.
func (*DeleteFavoriteGroupResponse) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{65}
}

// Запрос получения списка избранных групп
type GetFavoriteGroupsRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	InstrumentId    []string               `protobuf:"bytes,1,rep,name=instrument_id,json=instrumentId,proto3" json:"instrument_id,omitempty"`            //Массив идентификаторов инструментов. Принимает значение `figi` или `instrument_uid`. Если в группе будет хотя бы один из инструментов массива, то в ответе у группы вернется признак `containsInstrument = true`.
	ExcludedGroupId []string               `protobuf:"bytes,2,rep,name=excluded_group_id,json=excludedGroupId,proto3" json:"excluded_group_id,omitempty"` //Массив идентификаторов групп, которые необходимо исключить из ответа.
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetFavoriteGroupsRequest) Reset() {
	*x = GetFavoriteGroupsRequest{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFavoriteGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFavoriteGroupsRequest) ProtoMessage() {}

func (x *GetFavoriteGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFavoriteGroupsRequest.ProtoReflect.Descriptor instead.
func (*GetFavoriteGroupsRequest) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{66}
}

func (x *GetFavoriteGroupsRequest) GetInstrumentId() []string {
	if x != nil {
		return x.InstrumentId
	}
	return nil
}

func (x *GetFavoriteGroupsRequest) GetExcludedGroupId() []string {
	if x != nil {
		return x.ExcludedGroupId
	}
	return nil
}

// Избранные группы
type GetFavoriteGroupsResponse struct {
	state         protoimpl.MessageState                     `protogen:"open.v1"`
	Groups        []*GetFavoriteGroupsResponse_FavoriteGroup `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"` //Массив групп избранных списков инструментов.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFavoriteGroupsResponse) Reset() {
	*x = GetFavoriteGroupsResponse{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFavoriteGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFavoriteGroupsResponse) ProtoMessage() {}

func (x *GetFavoriteGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFavoriteGroupsResponse.ProtoReflect.Descriptor instead.
func (*GetFavoriteGroupsResponse) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{67}
}

func (x *GetFavoriteGroupsResponse) GetGroups() []*GetFavoriteGroupsResponse_FavoriteGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

// Запрос справочника стран.
type GetCountriesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCountriesRequest) Reset() {
	*x = GetCountriesRequest{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCountriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCountriesRequest) ProtoMessage() {}

func (x *GetCountriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCountriesRequest.ProtoReflect.Descriptor instead.
func (*GetCountriesRequest) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{68}
}

// Справочник стран.
type GetCountriesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Countries     []*CountryResponse     `protobuf:"bytes,1,rep,name=countries,proto3" json:"countries,omitempty"` //Массив стран.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCountriesResponse) Reset() {
	*x = GetCountriesResponse{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCountriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCountriesResponse) ProtoMessage() {}

func (x *GetCountriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCountriesResponse.ProtoReflect.Descriptor instead.
func (*GetCountriesResponse) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{69}
}

func (x *GetCountriesResponse) GetCountries() []*CountryResponse {
	if x != nil {
		return x.Countries
	}
	return nil
}

// Запрос справочника индексов и товаров
type IndicativesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IndicativesRequest) Reset() {
	*x = IndicativesRequest{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IndicativesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndicativesRequest) ProtoMessage() {}

func (x *IndicativesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndicativesRequest.ProtoReflect.Descriptor instead.
func (*IndicativesRequest) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{70}
}

// Справочник индексов и товаров
type IndicativesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Instruments   []*IndicativeResponse  `protobuf:"bytes,1,rep,name=instruments,proto3" json:"instruments,omitempty"` // Массив инструментов.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IndicativesResponse) Reset() {
	*x = IndicativesResponse{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IndicativesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndicativesResponse) ProtoMessage() {}

func (x *IndicativesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndicativesResponse.ProtoReflect.Descriptor instead.
func (*IndicativesResponse) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{71}
}

func (x *IndicativesResponse) GetInstruments() []*IndicativeResponse {
	if x != nil {
		return x.Instruments
	}
	return nil
}

// Индикатив
type IndicativeResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Figi              string                 `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                                                                         // FIGI-идентификатор инструмента.
	Ticker            string                 `protobuf:"bytes,2,opt,name=ticker,proto3" json:"ticker,omitempty"`                                                                     // Тикер инструмента.
	ClassCode         string                 `protobuf:"bytes,3,opt,name=class_code,json=classCode,proto3" json:"class_code,omitempty"`                                              // Класс-код инструмента.
	Currency          string                 `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty"`                                                                 // Валюта расчетов.
	InstrumentKind    InstrumentType         `protobuf:"varint,10,opt,name=instrument_kind,json=instrumentKind,proto3,enum=tinvest.InstrumentType" json:"instrument_kind,omitempty"` //Тип инструмента.
	Name              string                 `protobuf:"bytes,12,opt,name=name,proto3" json:"name,omitempty"`                                                                        // Название инструмента.
	Exchange          string                 `protobuf:"bytes,13,opt,name=exchange,proto3" json:"exchange,omitempty"`                                                                // Tорговая площадка (секция биржи).
	Uid               string                 `protobuf:"bytes,14,opt,name=uid,proto3" json:"uid,omitempty"`                                                                          // Уникальный идентификатор инструмента.
	BuyAvailableFlag  bool                   `protobuf:"varint,404,opt,name=buy_available_flag,json=buyAvailableFlag,proto3" json:"buy_available_flag,omitempty"`                    // Признак доступности для покупки.
	SellAvailableFlag bool                   `protobuf:"varint,405,opt,name=sell_available_flag,json=sellAvailableFlag,proto3" json:"sell_available_flag,omitempty"`                 // Признак доступности для продажи.
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *IndicativeResponse) Reset() {
	*x = IndicativeResponse{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IndicativeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndicativeResponse) ProtoMessage() {}

func (x *IndicativeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndicativeResponse.ProtoReflect.Descriptor instead.
func (*IndicativeResponse) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{72}
}

func (x *IndicativeResponse) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *IndicativeResponse) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *IndicativeResponse) GetClassCode() string {
	if x != nil {
		return x.ClassCode
	}
	return ""
}

func (x *IndicativeResponse) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *IndicativeResponse) GetInstrumentKind() InstrumentType {
	if x != nil {
		return x.InstrumentKind
	}
	return InstrumentType_INSTRUMENT_TYPE_UNSPECIFIED
}

func (x *IndicativeResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IndicativeResponse) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *IndicativeResponse) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *IndicativeResponse) GetBuyAvailableFlag() bool {
	if x != nil {
		return x.BuyAvailableFlag
	}
	return false
}

func (x *IndicativeResponse) GetSellAvailableFlag() bool {
	if x != nil {
		return x.SellAvailableFlag
	}
	return false
}

// Данные о стране.
type CountryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AlfaTwo       string                 `protobuf:"bytes,1,opt,name=alfa_two,json=alfaTwo,proto3" json:"alfa_two,omitempty"`       //Двухбуквенный код страны.
	AlfaThree     string                 `protobuf:"bytes,2,opt,name=alfa_three,json=alfaThree,proto3" json:"alfa_three,omitempty"` //Трехбуквенный код страны.
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                            //Наименование страны.
	NameBrief     string                 `protobuf:"bytes,4,opt,name=name_brief,json=nameBrief,proto3" json:"name_brief,omitempty"` //Краткое наименование страны.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CountryResponse) Reset() {
	*x = CountryResponse{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CountryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountryResponse) ProtoMessage() {}

func (x *CountryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountryResponse.ProtoReflect.Descriptor instead.
func (*CountryResponse) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{73}
}

func (x *CountryResponse) GetAlfaTwo() string {
	if x != nil {
		return x.AlfaTwo
	}
	return ""
}

func (x *CountryResponse) GetAlfaThree() string {
	if x != nil {
		return x.AlfaThree
	}
	return ""
}

func (x *CountryResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CountryResponse) GetNameBrief() string {
	if x != nil {
		return x.NameBrief
	}
	return ""
}

// Запрос на поиск инструментов.
type FindInstrumentRequest struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Query                 string                 `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`                                                                            //Строка поиска.
	InstrumentKind        *InstrumentType        `protobuf:"varint,2,opt,name=instrument_kind,json=instrumentKind,proto3,enum=tinvest.InstrumentType,oneof" json:"instrument_kind,omitempty"` //Фильтр по типу инструмента.
	ApiTradeAvailableFlag *bool                  `protobuf:"varint,3,opt,name=api_trade_available_flag,json=apiTradeAvailableFlag,proto3,oneof" json:"api_trade_available_flag,omitempty"`    //Фильтр для отображения только торговых инструментов.
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *FindInstrumentRequest) Reset() {
	*x = FindInstrumentRequest{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindInstrumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindInstrumentRequest) ProtoMessage() {}

func (x *FindInstrumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindInstrumentRequest.ProtoReflect.Descriptor instead.
func (*FindInstrumentRequest) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{74}
}

func (x *FindInstrumentRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *FindInstrumentRequest) GetInstrumentKind() InstrumentType {
	if x != nil && x.InstrumentKind != nil {
		return *x.InstrumentKind
	}
	return InstrumentType_INSTRUMENT_TYPE_UNSPECIFIED
}

func (x *FindInstrumentRequest) GetApiTradeAvailableFlag() bool {
	if x != nil && x.ApiTradeAvailableFlag != nil {
		return *x.ApiTradeAvailableFlag
	}
	return false
}

// Результат поиска инструментов.
type FindInstrumentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Instruments   []*InstrumentShort     `protobuf:"bytes,1,rep,name=instruments,proto3" json:"instruments,omitempty"` //Массив инструментов, удовлетворяющих условиям поиска.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindInstrumentResponse) Reset() {
	*x = FindInstrumentResponse{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindInstrumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindInstrumentResponse) ProtoMessage() {}

func (x *FindInstrumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindInstrumentResponse.ProtoReflect.Descriptor instead.
func (*FindInstrumentResponse) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{75}
}

func (x *FindInstrumentResponse) GetInstruments() []*InstrumentShort {
	if x != nil {
		return x.Instruments
	}
	return nil
}

// Краткая информация об инструменте.
type InstrumentShort struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Isin                  string                 `protobuf:"bytes,1,opt,name=isin,proto3" json:"isin,omitempty"`                                                                         //ISIN инструмента.
	Figi                  string                 `protobuf:"bytes,2,opt,name=figi,proto3" json:"figi,omitempty"`                                                                         //FIGI инструмента.
	Ticker                string                 `protobuf:"bytes,3,opt,name=ticker,proto3" json:"ticker,omitempty"`                                                                     //Ticker инструмента.
	ClassCode             string                 `protobuf:"bytes,4,opt,name=class_code,json=classCode,proto3" json:"class_code,omitempty"`                                              //ClassCode инструмента.
	InstrumentType        string                 `protobuf:"bytes,5,opt,name=instrument_type,json=instrumentType,proto3" json:"instrument_type,omitempty"`                               //Тип инструмента.
	Name                  string                 `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`                                                                         //Название инструмента.
	Uid                   string                 `protobuf:"bytes,7,opt,name=uid,proto3" json:"uid,omitempty"`                                                                           //Уникальный идентификатор инструмента.
	PositionUid           string                 `protobuf:"bytes,8,opt,name=position_uid,json=positionUid,proto3" json:"position_uid,omitempty"`                                        //Уникальный идентификатор позиции инструмента.
	InstrumentKind        InstrumentType         `protobuf:"varint,10,opt,name=instrument_kind,json=instrumentKind,proto3,enum=tinvest.InstrumentType" json:"instrument_kind,omitempty"` //Тип инструмента.
	ApiTradeAvailableFlag bool                   `protobuf:"varint,11,opt,name=api_trade_available_flag,json=apiTradeAvailableFlag,proto3" json:"api_trade_available_flag,omitempty"`    //Возможность торговать инструментом через API.
	ForIisFlag            bool                   `protobuf:"varint,12,opt,name=for_iis_flag,json=forIisFlag,proto3" json:"for_iis_flag,omitempty"`                                       //Признак доступности для ИИС.
	First_1MinCandleDate  *timestamppb.Timestamp `protobuf:"bytes,26,opt,name=first_1min_candle_date,json=first1minCandleDate,proto3" json:"first_1min_candle_date,omitempty"`           //Дата первой минутной свечи.
	First_1DayCandleDate  *timestamppb.Timestamp `protobuf:"bytes,27,opt,name=first_1day_candle_date,json=first1dayCandleDate,proto3" json:"first_1day_candle_date,omitempty"`           //Дата первой дневной свечи.
	ForQualInvestorFlag   bool                   `protobuf:"varint,28,opt,name=for_qual_investor_flag,json=forQualInvestorFlag,proto3" json:"for_qual_investor_flag,omitempty"`          //Флаг, отображающий доступность торговли инструментом только для квалифицированных инвесторов.
	WeekendFlag           bool                   `protobuf:"varint,29,opt,name=weekend_flag,json=weekendFlag,proto3" json:"weekend_flag,omitempty"`                                      //Флаг, отображающий доступность торговли инструментом по выходным.
	BlockedTcaFlag        bool                   `protobuf:"varint,30,opt,name=blocked_tca_flag,json=blockedTcaFlag,proto3" json:"blocked_tca_flag,omitempty"`                           //Флаг заблокированного ТКС.
	Lot                   int32                  `protobuf:"varint,31,opt,name=lot,proto3" json:"lot,omitempty"`                                                                         //Количество бумаг в лоте.
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *InstrumentShort) Reset() {
	*x = InstrumentShort{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InstrumentShort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentShort) ProtoMessage() {}

func (x *InstrumentShort) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentShort.ProtoReflect.Descriptor instead.
func (*InstrumentShort) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{76}
}

func (x *InstrumentShort) GetIsin() string {
	if x != nil {
		return x.Isin
	}
	return ""
}

func (x *InstrumentShort) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *InstrumentShort) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *InstrumentShort) GetClassCode() string {
	if x != nil {
		return x.ClassCode
	}
	return ""
}

func (x *InstrumentShort) GetInstrumentType() string {
	if x != nil {
		return x.InstrumentType
	}
	return ""
}

func (x *InstrumentShort) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InstrumentShort) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *InstrumentShort) GetPositionUid() string {
	if x != nil {
		return x.PositionUid
	}
	return ""
}

func (x *InstrumentShort) GetInstrumentKind() InstrumentType {
	if x != nil {
		return x.InstrumentKind
	}
	return InstrumentType_INSTRUMENT_TYPE_UNSPECIFIED
}

func (x *InstrumentShort) GetApiTradeAvailableFlag() bool {
	if x != nil {
		return x.ApiTradeAvailableFlag
	}
	return false
}

func (x *InstrumentShort) GetForIisFlag() bool {
	if x != nil {
		return x.ForIisFlag
	}
	return false
}

func (x *InstrumentShort) GetFirst_1MinCandleDate() *timestamppb.Timestamp {
	if x != nil {
		return x.First_1MinCandleDate
	}
	return nil
}

func (x *InstrumentShort) GetFirst_1DayCandleDate() *timestamppb.Timestamp {
	if x != nil {
		return x.First_1DayCandleDate
	}
	return nil
}

func (x *InstrumentShort) GetForQualInvestorFlag() bool {
	if x != nil {
		return x.ForQualInvestorFlag
	}
	return false
}

func (x *InstrumentShort) GetWeekendFlag() bool {
	if x != nil {
		return x.WeekendFlag
	}
	return false
}

func (x *InstrumentShort) GetBlockedTcaFlag() bool {
	if x != nil {
		return x.BlockedTcaFlag
	}
	return false
}

func (x *InstrumentShort) GetLot() int32 {
	if x != nil {
		return x.Lot
	}
	return 0
}

// Запрос списка брендов.
type GetBrandsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Paging        *Page                  `protobuf:"bytes,1,opt,name=paging,proto3" json:"paging,omitempty"` //Настройки пагинации.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBrandsRequest) Reset() {
	*x = GetBrandsRequest{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBrandsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBrandsRequest) ProtoMessage() {}

func (x *GetBrandsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBrandsRequest.ProtoReflect.Descriptor instead.
func (*GetBrandsRequest) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{77}
}

func (x *GetBrandsRequest) GetPaging() *Page {
	if x != nil {
		return x.Paging
	}
	return nil
}

// Запрос бренда.
type GetBrandRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` //UID-идентификатор бренда.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBrandRequest) Reset() {
	*x = GetBrandRequest{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBrandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBrandRequest) ProtoMessage() {}

func (x *GetBrandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBrandRequest.ProtoReflect.Descriptor instead.
func (*GetBrandRequest) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{78}
}

func (x *GetBrandRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Список брендов.
type GetBrandsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Brands        []*Brand               `protobuf:"bytes,1,rep,name=brands,proto3" json:"brands,omitempty"` //Массив брендов.
	Paging        *PageResponse          `protobuf:"bytes,2,opt,name=paging,proto3" json:"paging,omitempty"` //Данные по пагинации.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBrandsResponse) Reset() {
	*x = GetBrandsResponse{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBrandsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBrandsResponse) ProtoMessage() {}

func (x *GetBrandsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBrandsResponse.ProtoReflect.Descriptor instead.
func (*GetBrandsResponse) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{79}
}

func (x *GetBrandsResponse) GetBrands() []*Brand {
	if x != nil {
		return x.Brands
	}
	return nil
}

func (x *GetBrandsResponse) GetPaging() *PageResponse {
	if x != nil {
		return x.Paging
	}
	return nil
}

// Запрос фундаментальных показателей
type GetAssetFundamentalsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Assets        []string               `protobuf:"bytes,1,rep,name=assets,proto3" json:"assets,omitempty"` //Массив идентификаторов активов, не более 100 шт.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAssetFundamentalsRequest) Reset() {
	*x = GetAssetFundamentalsRequest{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAssetFundamentalsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAssetFundamentalsRequest) ProtoMessage() {}

func (x *GetAssetFundamentalsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAssetFundamentalsRequest.ProtoReflect.Descriptor instead.
func (*GetAssetFundamentalsRequest) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{80}
}

func (x *GetAssetFundamentalsRequest) GetAssets() []string {
	if x != nil {
		return x.Assets
	}
	return nil
}

// Фундаментальные показатели
type GetAssetFundamentalsResponse struct {
	state         protoimpl.MessageState                            `protogen:"open.v1"`
	Fundamentals  []*GetAssetFundamentalsResponse_StatisticResponse `protobuf:"bytes,1,rep,name=fundamentals,proto3" json:"fundamentals,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAssetFundamentalsResponse) Reset() {
	*x = GetAssetFundamentalsResponse{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAssetFundamentalsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAssetFundamentalsResponse) ProtoMessage() {}

func (x *GetAssetFundamentalsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAssetFundamentalsResponse.ProtoReflect.Descriptor instead.
func (*GetAssetFundamentalsResponse) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{81}
}

func (x *GetAssetFundamentalsResponse) GetFundamentals() []*GetAssetFundamentalsResponse_StatisticResponse {
	if x != nil {
		return x.Fundamentals
	}
	return nil
}

// Запрос отчетов эмитентов
type GetAssetReportsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InstrumentId  string                 `protobuf:"bytes,1,opt,name=instrument_id,json=instrumentId,proto3" json:"instrument_id,omitempty"` //Идентификатор инструмента в формате UID.
	From          *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=from,proto3,oneof" json:"from,omitempty"`                               //Начало запрашиваемого периода по UTC.
	To            *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=to,proto3,oneof" json:"to,omitempty"`                                   //Окончание запрашиваемого периода по UTC.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAssetReportsRequest) Reset() {
	*x = GetAssetReportsRequest{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAssetReportsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAssetReportsRequest) ProtoMessage() {}

func (x *GetAssetReportsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAssetReportsRequest.ProtoReflect.Descriptor instead.
func (*GetAssetReportsRequest) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{82}
}

func (x *GetAssetReportsRequest) GetInstrumentId() string {
	if x != nil {
		return x.InstrumentId
	}
	return ""
}

func (x *GetAssetReportsRequest) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *GetAssetReportsRequest) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

// Отчеты эмитентов
type GetAssetReportsResponse struct {
	state         protoimpl.MessageState                          `protogen:"open.v1"`
	Events        []*GetAssetReportsResponse_GetAssetReportsEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"` // Массив событий по облигации.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAssetReportsResponse) Reset() {
	*x = GetAssetReportsResponse{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAssetReportsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAssetReportsResponse) ProtoMessage() {}

func (x *GetAssetReportsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAssetReportsResponse.ProtoReflect.Descriptor instead.
func (*GetAssetReportsResponse) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{83}
}

func (x *GetAssetReportsResponse) GetEvents() []*GetAssetReportsResponse_GetAssetReportsEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

// Запрос консенсус-прогнозов
type GetConsensusForecastsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Paging        *Page                  `protobuf:"bytes,1,opt,name=paging,proto3,oneof" json:"paging,omitempty"` //Настройки пагинации.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetConsensusForecastsRequest) Reset() {
	*x = GetConsensusForecastsRequest{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConsensusForecastsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConsensusForecastsRequest) ProtoMessage() {}

func (x *GetConsensusForecastsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConsensusForecastsRequest.ProtoReflect.Descriptor instead.
func (*GetConsensusForecastsRequest) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{84}
}

func (x *GetConsensusForecastsRequest) GetPaging() *Page {
	if x != nil {
		return x.Paging
	}
	return nil
}

// Консенсус-прогнозы
type GetConsensusForecastsResponse struct {
	state         protoimpl.MessageState                                  `protogen:"open.v1"`
	Items         []*GetConsensusForecastsResponse_ConsensusForecastsItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"` // Массив прогнозов.
	Page          *PageResponse                                           `protobuf:"bytes,2,opt,name=page,proto3" json:"page,omitempty"`   //Данные по пагинации.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetConsensusForecastsResponse) Reset() {
	*x = GetConsensusForecastsResponse{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConsensusForecastsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConsensusForecastsResponse) ProtoMessage() {}

func (x *GetConsensusForecastsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConsensusForecastsResponse.ProtoReflect.Descriptor instead.
func (*GetConsensusForecastsResponse) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{85}
}

func (x *GetConsensusForecastsResponse) GetItems() []*GetConsensusForecastsResponse_ConsensusForecastsItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *GetConsensusForecastsResponse) GetPage() *PageResponse {
	if x != nil {
		return x.Page
	}
	return nil
}

// Запрос прогнозов инвестдомов.
type GetForecastRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InstrumentId  string                 `protobuf:"bytes,1,opt,name=instrument_id,json=instrumentId,proto3" json:"instrument_id,omitempty"` // Идентификатор инструмента.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetForecastRequest) Reset() {
	*x = GetForecastRequest{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetForecastRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetForecastRequest) ProtoMessage() {}

func (x *GetForecastRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetForecastRequest.ProtoReflect.Descriptor instead.
func (*GetForecastRequest) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{86}
}

func (x *GetForecastRequest) GetInstrumentId() string {
	if x != nil {
		return x.InstrumentId
	}
	return ""
}

// Прогнозы инвестдомов по инструменту.
type GetForecastResponse struct {
	state         protoimpl.MessageState             `protogen:"open.v1"`
	Targets       []*GetForecastResponse_TargetItem  `protobuf:"bytes,1,rep,name=targets,proto3" json:"targets,omitempty"`     //Массив прогнозов.
	Consensus     *GetForecastResponse_ConsensusItem `protobuf:"bytes,2,opt,name=consensus,proto3" json:"consensus,omitempty"` // Согласованный прогноз.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetForecastResponse) Reset() {
	*x = GetForecastResponse{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetForecastResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetForecastResponse) ProtoMessage() {}

func (x *GetForecastResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetForecastResponse.ProtoReflect.Descriptor instead.
func (*GetForecastResponse) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{87}
}

func (x *GetForecastResponse) GetTargets() []*GetForecastResponse_TargetItem {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *GetForecastResponse) GetConsensus() *GetForecastResponse_ConsensusItem {
	if x != nil {
		return x.Consensus
	}
	return nil
}

// Запрос ставок риска
type RiskRatesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InstrumentId  []string               `protobuf:"bytes,1,rep,name=instrument_id,json=instrumentId,proto3" json:"instrument_id,omitempty"` // Идентификаторы инструментов.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RiskRatesRequest) Reset() {
	*x = RiskRatesRequest{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RiskRatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskRatesRequest) ProtoMessage() {}

func (x *RiskRatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskRatesRequest.ProtoReflect.Descriptor instead.
func (*RiskRatesRequest) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{88}
}

func (x *RiskRatesRequest) GetInstrumentId() []string {
	if x != nil {
		return x.InstrumentId
	}
	return nil
}

// Ставки риска
type RiskRatesResponse struct {
	state               protoimpl.MessageState              `protogen:"open.v1"`
	InstrumentRiskRates []*RiskRatesResponse_RiskRateResult `protobuf:"bytes,1,rep,name=instrument_risk_rates,json=instrumentRiskRates,proto3" json:"instrument_risk_rates,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *RiskRatesResponse) Reset() {
	*x = RiskRatesResponse{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RiskRatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskRatesResponse) ProtoMessage() {}

func (x *RiskRatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskRatesResponse.ProtoReflect.Descriptor instead.
func (*RiskRatesResponse) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{89}
}

func (x *RiskRatesResponse) GetInstrumentRiskRates() []*RiskRatesResponse_RiskRateResult {
	if x != nil {
		return x.InstrumentRiskRates
	}
	return nil
}

type TradingInterval struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Type          string                        `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`         //Название интервала.
	Interval      *TradingInterval_TimeInterval `protobuf:"bytes,2,opt,name=interval,proto3" json:"interval,omitempty"` //Интервал.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TradingInterval) Reset() {
	*x = TradingInterval{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradingInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingInterval) ProtoMessage() {}

func (x *TradingInterval) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingInterval.ProtoReflect.Descriptor instead.
func (*TradingInterval) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{90}
}

func (x *TradingInterval) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TradingInterval) GetInterval() *TradingInterval_TimeInterval {
	if x != nil {
		return x.Interval
	}
	return nil
}

type GetBondEventsResponse_BondEvent struct {
	state              protoimpl.MessageState         `protogen:"open.v1"`
	InstrumentId       string                         `protobuf:"bytes,2,opt,name=instrument_id,json=instrumentId,proto3" json:"instrument_id,omitempty"`                                     // Идентификатор инструмента.
	EventNumber        int32                          `protobuf:"varint,3,opt,name=event_number,json=eventNumber,proto3" json:"event_number,omitempty"`                                       // Номер события для данного типа события.
	EventDate          *timestamppb.Timestamp         `protobuf:"bytes,4,opt,name=event_date,json=eventDate,proto3" json:"event_date,omitempty"`                                              // Дата события.
	EventType          GetBondEventsRequest_EventType `protobuf:"varint,5,opt,name=event_type,json=eventType,proto3,enum=tinvest.GetBondEventsRequest_EventType" json:"event_type,omitempty"` // Тип события.
	EventTotalVol      *Quotation                     `protobuf:"bytes,6,opt,name=event_total_vol,json=eventTotalVol,proto3" json:"event_total_vol,omitempty"`                                // Полное количество бумаг, задействованных в событии.
	FixDate            *timestamppb.Timestamp         `protobuf:"bytes,7,opt,name=fix_date,json=fixDate,proto3" json:"fix_date,omitempty"`                                                    // Дата фиксации владельцев для участия в событии.
	RateDate           *timestamppb.Timestamp         `protobuf:"bytes,8,opt,name=rate_date,json=rateDate,proto3" json:"rate_date,omitempty"`                                                 // Дата определения даты или факта события.
	DefaultDate        *timestamppb.Timestamp         `protobuf:"bytes,9,opt,name=default_date,json=defaultDate,proto3" json:"default_date,omitempty"`                                        // Дата дефолта, если применимо.
	RealPayDate        *timestamppb.Timestamp         `protobuf:"bytes,10,opt,name=real_pay_date,json=realPayDate,proto3" json:"real_pay_date,omitempty"`                                     // Дата реального исполнения обязательства.
	PayDate            *timestamppb.Timestamp         `protobuf:"bytes,11,opt,name=pay_date,json=payDate,proto3" json:"pay_date,omitempty"`                                                   // Дата выплаты.
	PayOneBond         *MoneyValue                    `protobuf:"bytes,12,opt,name=pay_one_bond,json=payOneBond,proto3" json:"pay_one_bond,omitempty"`                                        // Выплата на одну облигацию.
	MoneyFlowVal       *MoneyValue                    `protobuf:"bytes,13,opt,name=money_flow_val,json=moneyFlowVal,proto3" json:"money_flow_val,omitempty"`                                  // Выплаты на все бумаги, задействованные в событии.
	Execution          string                         `protobuf:"bytes,14,opt,name=execution,proto3" json:"execution,omitempty"`                                                              // Признак исполнения.
	OperationType      string                         `protobuf:"bytes,15,opt,name=operation_type,json=operationType,proto3" json:"operation_type,omitempty"`                                 // Тип операции.
	Value              *Quotation                     `protobuf:"bytes,16,opt,name=value,proto3" json:"value,omitempty"`                                                                      // Стоимость операции — ставка купона, доля номинала, цена выкупа или коэффициент конвертации.
	Note               string                         `protobuf:"bytes,17,opt,name=note,proto3" json:"note,omitempty"`                                                                        // Примечание.
	ConvertToFinToolId string                         `protobuf:"bytes,18,opt,name=convert_to_fin_tool_id,json=convertToFinToolId,proto3" json:"convert_to_fin_tool_id,omitempty"`            // ID выпуска бумаг, в который произведена конвертация (для конвертаций).
	CouponStartDate    *timestamppb.Timestamp         `protobuf:"bytes,19,opt,name=coupon_start_date,json=couponStartDate,proto3" json:"coupon_start_date,omitempty"`                         // Начало купонного периода.
	CouponEndDate      *timestamppb.Timestamp         `protobuf:"bytes,20,opt,name=coupon_end_date,json=couponEndDate,proto3" json:"coupon_end_date,omitempty"`                               // Окончание купонного периода.
	CouponPeriod       int32                          `protobuf:"varint,21,opt,name=coupon_period,json=couponPeriod,proto3" json:"coupon_period,omitempty"`                                   // Купонный период.
	CouponInterestRate *Quotation                     `protobuf:"bytes,22,opt,name=coupon_interest_rate,json=couponInterestRate,proto3" json:"coupon_interest_rate,omitempty"`                // Ставка купона, процентов годовых.
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetBondEventsResponse_BondEvent) Reset() {
	*x = GetBondEventsResponse_BondEvent{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBondEventsResponse_BondEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBondEventsResponse_BondEvent) ProtoMessage() {}

func (x *GetBondEventsResponse_BondEvent) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBondEventsResponse_BondEvent.ProtoReflect.Descriptor instead.
func (*GetBondEventsResponse_BondEvent) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{12, 0}
}

func (x *GetBondEventsResponse_BondEvent) GetInstrumentId() string {
	if x != nil {
		return x.InstrumentId
	}
	return ""
}

func (x *GetBondEventsResponse_BondEvent) GetEventNumber() int32 {
	if x != nil {
		return x.EventNumber
	}
	return 0
}

func (x *GetBondEventsResponse_BondEvent) GetEventDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EventDate
	}
	return nil
}

func (x *GetBondEventsResponse_BondEvent) GetEventType() GetBondEventsRequest_EventType {
	if x != nil {
		return x.EventType
	}
	return GetBondEventsRequest_EVENT_TYPE_UNSPECIFIED
}

func (x *GetBondEventsResponse_BondEvent) GetEventTotalVol() *Quotation {
	if x != nil {
		return x.EventTotalVol
	}
	return nil
}

func (x *GetBondEventsResponse_BondEvent) GetFixDate() *timestamppb.Timestamp {
	if x != nil {
		return x.FixDate
	}
	return nil
}

func (x *GetBondEventsResponse_BondEvent) GetRateDate() *timestamppb.Timestamp {
	if x != nil {
		return x.RateDate
	}
	return nil
}

func (x *GetBondEventsResponse_BondEvent) GetDefaultDate() *timestamppb.Timestamp {
	if x != nil {
		return x.DefaultDate
	}
	return nil
}

func (x *GetBondEventsResponse_BondEvent) GetRealPayDate() *timestamppb.Timestamp {
	if x != nil {
		return x.RealPayDate
	}
	return nil
}

func (x *GetBondEventsResponse_BondEvent) GetPayDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PayDate
	}
	return nil
}

func (x *GetBondEventsResponse_BondEvent) GetPayOneBond() *MoneyValue {
	if x != nil {
		return x.PayOneBond
	}
	return nil
}

func (x *GetBondEventsResponse_BondEvent) GetMoneyFlowVal() *MoneyValue {
	if x != nil {
		return x.MoneyFlowVal
	}
	return nil
}

func (x *GetBondEventsResponse_BondEvent) GetExecution() string {
	if x != nil {
		return x.Execution
	}
	return ""
}

func (x *GetBondEventsResponse_BondEvent) GetOperationType() string {
	if x != nil {
		return x.OperationType
	}
	return ""
}

func (x *GetBondEventsResponse_BondEvent) GetValue() *Quotation {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *GetBondEventsResponse_BondEvent) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *GetBondEventsResponse_BondEvent) GetConvertToFinToolId() string {
	if x != nil {
		return x.ConvertToFinToolId
	}
	return ""
}

func (x *GetBondEventsResponse_BondEvent) GetCouponStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CouponStartDate
	}
	return nil
}

func (x *GetBondEventsResponse_BondEvent) GetCouponEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CouponEndDate
	}
	return nil
}

func (x *GetBondEventsResponse_BondEvent) GetCouponPeriod() int32 {
	if x != nil {
		return x.CouponPeriod
	}
	return 0
}

func (x *GetBondEventsResponse_BondEvent) GetCouponInterestRate() *Quotation {
	if x != nil {
		return x.CouponInterestRate
	}
	return nil
}

// Избранная группа
type GetFavoriteGroupsResponse_FavoriteGroup struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	GroupId            string                 `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`                                         //Уникальный идентификатор группы.
	GroupName          string                 `protobuf:"bytes,2,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`                                   //Название группы.
	Color              string                 `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`                                                            //Цвет группы в HEX-формате.
	Size               int32                  `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`                                                             //Количество инструментов в группе.
	ContainsInstrument *bool                  `protobuf:"varint,5,opt,name=contains_instrument,json=containsInstrument,proto3,oneof" json:"contains_instrument,omitempty"` //Признак наличия в группе хотя бы одного инструмента из запроса.
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetFavoriteGroupsResponse_FavoriteGroup) Reset() {
	*x = GetFavoriteGroupsResponse_FavoriteGroup{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFavoriteGroupsResponse_FavoriteGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFavoriteGroupsResponse_FavoriteGroup) ProtoMessage() {}

func (x *GetFavoriteGroupsResponse_FavoriteGroup) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFavoriteGroupsResponse_FavoriteGroup.ProtoReflect.Descriptor instead.
func (*GetFavoriteGroupsResponse_FavoriteGroup) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{67, 0}
}

func (x *GetFavoriteGroupsResponse_FavoriteGroup) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *GetFavoriteGroupsResponse_FavoriteGroup) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *GetFavoriteGroupsResponse_FavoriteGroup) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *GetFavoriteGroupsResponse_FavoriteGroup) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *GetFavoriteGroupsResponse_FavoriteGroup) GetContainsInstrument() bool {
	if x != nil && x.ContainsInstrument != nil {
		return *x.ContainsInstrument
	}
	return false
}

// Фундаментальные показатели по активу
type GetAssetFundamentalsResponse_StatisticResponse struct {
	state                            protoimpl.MessageState `protogen:"open.v1"`
	AssetUid                         string                 `protobuf:"bytes,1,opt,name=asset_uid,json=assetUid,proto3" json:"asset_uid,omitempty"`                                                                       //Идентификатор актива.
	Currency                         string                 `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`                                                                                       //Валюта.
	MarketCapitalization             float64                `protobuf:"fixed64,3,opt,name=market_capitalization,json=marketCapitalization,proto3" json:"market_capitalization,omitempty"`                                 //Рыночная капитализация.
	HighPriceLast_52Weeks            float64                `protobuf:"fixed64,4,opt,name=high_price_last_52_weeks,json=highPriceLast52Weeks,proto3" json:"high_price_last_52_weeks,omitempty"`                           //Максимум за год.
	LowPriceLast_52Weeks             float64                `protobuf:"fixed64,5,opt,name=low_price_last_52_weeks,json=lowPriceLast52Weeks,proto3" json:"low_price_last_52_weeks,omitempty"`                              //Минимум за год.
	AverageDailyVolumeLast_10Days    float64                `protobuf:"fixed64,6,opt,name=average_daily_volume_last_10_days,json=averageDailyVolumeLast10Days,proto3" json:"average_daily_volume_last_10_days,omitempty"` //Средний объем торгов за 10 дней.
	AverageDailyVolumeLast_4Weeks    float64                `protobuf:"fixed64,7,opt,name=average_daily_volume_last_4_weeks,json=averageDailyVolumeLast4Weeks,proto3" json:"average_daily_volume_last_4_weeks,omitempty"` //Средний объем торгов за месяц.
	Beta                             float64                `protobuf:"fixed64,8,opt,name=beta,proto3" json:"beta,omitempty"`
	FreeFloat                        float64                `protobuf:"fixed64,9,opt,name=free_float,json=freeFloat,proto3" json:"free_float,omitempty"`                                                                               //Доля акций в свободном обращении.
	ForwardAnnualDividendYield       float64                `protobuf:"fixed64,10,opt,name=forward_annual_dividend_yield,json=forwardAnnualDividendYield,proto3" json:"forward_annual_dividend_yield,omitempty"`                       //Процент форвардной дивидендной доходности по отношению к цене акций.
	SharesOutstanding                float64                `protobuf:"fixed64,11,opt,name=shares_outstanding,json=sharesOutstanding,proto3" json:"shares_outstanding,omitempty"`                                                      //Количество акций в обращении.
	RevenueTtm                       float64                `protobuf:"fixed64,12,opt,name=revenue_ttm,json=revenueTtm,proto3" json:"revenue_ttm,omitempty"`                                                                           //Выручка.
	EbitdaTtm                        float64                `protobuf:"fixed64,13,opt,name=ebitda_ttm,json=ebitdaTtm,proto3" json:"ebitda_ttm,omitempty"`                                                                              //EBITDA — прибыль до вычета процентов, налогов, износа и амортизации.
	NetIncomeTtm                     float64                `protobuf:"fixed64,14,opt,name=net_income_ttm,json=netIncomeTtm,proto3" json:"net_income_ttm,omitempty"`                                                                   //Чистая прибыль.
	EpsTtm                           float64                `protobuf:"fixed64,15,opt,name=eps_ttm,json=epsTtm,proto3" json:"eps_ttm,omitempty"`                                                                                       //EPS — величина чистой прибыли компании, которая приходится на каждую обыкновенную акцию.
	DilutedEpsTtm                    float64                `protobuf:"fixed64,16,opt,name=diluted_eps_ttm,json=dilutedEpsTtm,proto3" json:"diluted_eps_ttm,omitempty"`                                                                //EPS компании с допущением, что все конвертируемые ценные бумаги компании были сконвертированы в обыкновенные акции.
	FreeCashFlowTtm                  float64                `protobuf:"fixed64,17,opt,name=free_cash_flow_ttm,json=freeCashFlowTtm,proto3" json:"free_cash_flow_ttm,omitempty"`                                                        //Свободный денежный поток.
	FiveYearAnnualRevenueGrowthRate  float64                `protobuf:"fixed64,18,opt,name=five_year_annual_revenue_growth_rate,json=fiveYearAnnualRevenueGrowthRate,proto3" json:"five_year_annual_revenue_growth_rate,omitempty"`    //Среднегодовой  рocт выручки за 5 лет.
	ThreeYearAnnualRevenueGrowthRate float64                `protobuf:"fixed64,19,opt,name=three_year_annual_revenue_growth_rate,json=threeYearAnnualRevenueGrowthRate,proto3" json:"three_year_annual_revenue_growth_rate,omitempty"` //Среднегодовой  рocт выручки за 3 года.
	PeRatioTtm                       float64                `protobuf:"fixed64,20,opt,name=pe_ratio_ttm,json=peRatioTtm,proto3" json:"pe_ratio_ttm,omitempty"`                                                                         //Соотношение рыночной капитализации компании к ее чистой прибыли.
	PriceToSalesTtm                  float64                `protobuf:"fixed64,21,opt,name=price_to_sales_ttm,json=priceToSalesTtm,proto3" json:"price_to_sales_ttm,omitempty"`                                                        //Соотношение рыночной капитализации компании к ее выручке.
	PriceToBookTtm                   float64                `protobuf:"fixed64,22,opt,name=price_to_book_ttm,json=priceToBookTtm,proto3" json:"price_to_book_ttm,omitempty"`                                                           //Соотношение рыночной капитализации компании к ее балансовой стоимости.
	PriceToFreeCashFlowTtm           float64                `protobuf:"fixed64,23,opt,name=price_to_free_cash_flow_ttm,json=priceToFreeCashFlowTtm,proto3" json:"price_to_free_cash_flow_ttm,omitempty"`                               //Соотношение рыночной капитализации компании к ее свободному денежному потоку.
	TotalEnterpriseValueMrq          float64                `protobuf:"fixed64,24,opt,name=total_enterprise_value_mrq,json=totalEnterpriseValueMrq,proto3" json:"total_enterprise_value_mrq,omitempty"`                                //Рыночная стоимость компании.
	EvToEbitdaMrq                    float64                `protobuf:"fixed64,25,opt,name=ev_to_ebitda_mrq,json=evToEbitdaMrq,proto3" json:"ev_to_ebitda_mrq,omitempty"`                                                              //Соотношение EV и EBITDA.
	NetMarginMrq                     float64                `protobuf:"fixed64,26,opt,name=net_margin_mrq,json=netMarginMrq,proto3" json:"net_margin_mrq,omitempty"`                                                                   //Маржа чистой прибыли.
	NetInterestMarginMrq             float64                `protobuf:"fixed64,27,opt,name=net_interest_margin_mrq,json=netInterestMarginMrq,proto3" json:"net_interest_margin_mrq,omitempty"`                                         //Рентабельность чистой прибыли.
	Roe                              float64                `protobuf:"fixed64,28,opt,name=roe,proto3" json:"roe,omitempty"`                                                                                                           //Рентабельность собственного капитала.
	Roa                              float64                `protobuf:"fixed64,29,opt,name=roa,proto3" json:"roa,omitempty"`                                                                                                           //Рентабельность активов.
	Roic                             float64                `protobuf:"fixed64,30,opt,name=roic,proto3" json:"roic,omitempty"`                                                                                                         //Рентабельность активов.
	TotalDebtMrq                     float64                `protobuf:"fixed64,31,opt,name=total_debt_mrq,json=totalDebtMrq,proto3" json:"total_debt_mrq,omitempty"`                                                                   //Сумма краткосрочных и долгосрочных обязательств компании.
	TotalDebtToEquityMrq             float64                `protobuf:"fixed64,32,opt,name=total_debt_to_equity_mrq,json=totalDebtToEquityMrq,proto3" json:"total_debt_to_equity_mrq,omitempty"`                                       //Соотношение долга к собственному капиталу.
	TotalDebtToEbitdaMrq             float64                `protobuf:"fixed64,33,opt,name=total_debt_to_ebitda_mrq,json=totalDebtToEbitdaMrq,proto3" json:"total_debt_to_ebitda_mrq,omitempty"`                                       //Total Debt/EBITDA.
	FreeCashFlowToPrice              float64                `protobuf:"fixed64,34,opt,name=free_cash_flow_to_price,json=freeCashFlowToPrice,proto3" json:"free_cash_flow_to_price,omitempty"`                                          //Отношение свободногоо кэша к стоимости.
	NetDebtToEbitda                  float64                `protobuf:"fixed64,35,opt,name=net_debt_to_ebitda,json=netDebtToEbitda,proto3" json:"net_debt_to_ebitda,omitempty"`                                                        //Отношение чистого долга к EBITDA.
	CurrentRatioMrq                  float64                `protobuf:"fixed64,36,opt,name=current_ratio_mrq,json=currentRatioMrq,proto3" json:"current_ratio_mrq,omitempty"`                                                          //Коэффициент текущей ликвидности.
	FixedChargeCoverageRatioFy       float64                `protobuf:"fixed64,37,opt,name=fixed_charge_coverage_ratio_fy,json=fixedChargeCoverageRatioFy,proto3" json:"fixed_charge_coverage_ratio_fy,omitempty"`                     //Коэффициент покрытия фиксированных платежей — FCCR.
	DividendYieldDailyTtm            float64                `protobuf:"fixed64,38,opt,name=dividend_yield_daily_ttm,json=dividendYieldDailyTtm,proto3" json:"dividend_yield_daily_ttm,omitempty"`                                      //Дивидендная доходность за 12 месяцев.
	DividendRateTtm                  float64                `protobuf:"fixed64,39,opt,name=dividend_rate_ttm,json=dividendRateTtm,proto3" json:"dividend_rate_ttm,omitempty"`                                                          //Выплаченные дивиденды за 12 месяцев.
	DividendsPerShare                float64                `protobuf:"fixed64,40,opt,name=dividends_per_share,json=dividendsPerShare,proto3" json:"dividends_per_share,omitempty"`                                                    //Значение дивидендов на акцию.
	FiveYearsAverageDividendYield    float64                `protobuf:"fixed64,41,opt,name=five_years_average_dividend_yield,json=fiveYearsAverageDividendYield,proto3" json:"five_years_average_dividend_yield,omitempty"`            //Средняя дивидендная доходность за 5 лет.
	FiveYearAnnualDividendGrowthRate float64                `protobuf:"fixed64,42,opt,name=five_year_annual_dividend_growth_rate,json=fiveYearAnnualDividendGrowthRate,proto3" json:"five_year_annual_dividend_growth_rate,omitempty"` //Среднегодовой рост дивидендов за 5 лет.
	DividendPayoutRatioFy            float64                `protobuf:"fixed64,43,opt,name=dividend_payout_ratio_fy,json=dividendPayoutRatioFy,proto3" json:"dividend_payout_ratio_fy,omitempty"`                                      //Процент чистой прибыли, уходящий на выплату дивидендов.
	BuyBackTtm                       float64                `protobuf:"fixed64,44,opt,name=buy_back_ttm,json=buyBackTtm,proto3" json:"buy_back_ttm,omitempty"`                                                                         //Деньги, потраченные на обратный выкуп акций.
	OneYearAnnualRevenueGrowthRate   float64                `protobuf:"fixed64,45,opt,name=one_year_annual_revenue_growth_rate,json=oneYearAnnualRevenueGrowthRate,proto3" json:"one_year_annual_revenue_growth_rate,omitempty"`       //Рост выручки за 1 год.
	DomicileIndicatorCode            string                 `protobuf:"bytes,46,opt,name=domicile_indicator_code,json=domicileIndicatorCode,proto3" json:"domicile_indicator_code,omitempty"`                                          //Код страны.
	AdrToCommonShareRatio            float64                `protobuf:"fixed64,47,opt,name=adr_to_common_share_ratio,json=adrToCommonShareRatio,proto3" json:"adr_to_common_share_ratio,omitempty"`                                    //Соотношение депозитарной расписки к акциям.
	NumberOfEmployees                float64                `protobuf:"fixed64,48,opt,name=number_of_employees,json=numberOfEmployees,proto3" json:"number_of_employees,omitempty"`                                                    //Количество сотрудников.
	ExDividendDate                   *timestamppb.Timestamp `protobuf:"bytes,49,opt,name=ex_dividend_date,json=exDividendDate,proto3" json:"ex_dividend_date,omitempty"`
	FiscalPeriodStartDate            *timestamppb.Timestamp `protobuf:"bytes,50,opt,name=fiscal_period_start_date,json=fiscalPeriodStartDate,proto3" json:"fiscal_period_start_date,omitempty"`              //Начало фискального периода.
	FiscalPeriodEndDate              *timestamppb.Timestamp `protobuf:"bytes,51,opt,name=fiscal_period_end_date,json=fiscalPeriodEndDate,proto3" json:"fiscal_period_end_date,omitempty"`                    //Окончание фискального периода.
	RevenueChangeFiveYears           float64                `protobuf:"fixed64,53,opt,name=revenue_change_five_years,json=revenueChangeFiveYears,proto3" json:"revenue_change_five_years,omitempty"`         //Изменение общего дохода за 5 лет.
	EpsChangeFiveYears               float64                `protobuf:"fixed64,54,opt,name=eps_change_five_years,json=epsChangeFiveYears,proto3" json:"eps_change_five_years,omitempty"`                     //Изменение EPS за 5 лет.
	EbitdaChangeFiveYears            float64                `protobuf:"fixed64,55,opt,name=ebitda_change_five_years,json=ebitdaChangeFiveYears,proto3" json:"ebitda_change_five_years,omitempty"`            //Изменение EBIDTA за 5 лет.
	TotalDebtChangeFiveYears         float64                `protobuf:"fixed64,56,opt,name=total_debt_change_five_years,json=totalDebtChangeFiveYears,proto3" json:"total_debt_change_five_years,omitempty"` //Изменение общей задолжности за 5 лет.
	EvToSales                        float64                `protobuf:"fixed64,57,opt,name=ev_to_sales,json=evToSales,proto3" json:"ev_to_sales,omitempty"`                                                  //Отношение EV к выручке.
	unknownFields                    protoimpl.UnknownFields
	sizeCache                        protoimpl.SizeCache
}

func (x *GetAssetFundamentalsResponse_StatisticResponse) Reset() {
	*x = GetAssetFundamentalsResponse_StatisticResponse{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAssetFundamentalsResponse_StatisticResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAssetFundamentalsResponse_StatisticResponse) ProtoMessage() {}

func (x *GetAssetFundamentalsResponse_StatisticResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAssetFundamentalsResponse_StatisticResponse.ProtoReflect.Descriptor instead.
func (*GetAssetFundamentalsResponse_StatisticResponse) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{81, 0}
}

func (x *GetAssetFundamentalsResponse_StatisticResponse) GetAssetUid() string {
	if x != nil {
		return x.AssetUid
	}
	return ""
}

func (x *GetAssetFundamentalsResponse_StatisticResponse) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *GetAssetFundamentalsResponse_StatisticResponse) GetMarketCapitalization() float64 {
	if x != nil {
		return x.MarketCapitalization
	}
	return 0
}

func (x *GetAssetFundamentalsResponse_StatisticResponse) GetHighPriceLast_52Weeks() float64 {
	if x != nil {
		return x.HighPriceLast_52Weeks
	}
	return 0
}

func (x *GetAssetFundamentalsResponse_StatisticResponse) GetLowPriceLast_52Weeks() float64 {
	if x != nil {
		return x.LowPriceLast_52Weeks
	}
	return 0
}

func (x *GetAssetFundamentalsResponse_StatisticResponse) GetAverageDailyVolumeLast_10Days() float64 {
	if x != nil {
		return x.AverageDailyVolumeLast_10Days
	}
	return 0
}

func (x *GetAssetFundamentalsResponse_StatisticResponse) GetAverageDailyVolumeLast_4Weeks() float64 {
	if x != nil {
		return x.AverageDailyVolumeLast_4Weeks
	}
	return 0
}

func (x *GetAssetFundamentalsResponse_StatisticResponse) GetBeta() float64 {
	if x != nil {
		return x.Beta
	}
	return 0
}

func (x *GetAssetFundamentalsResponse_StatisticResponse) GetFreeFloat() float64 {
	if x != nil {
		return x.FreeFloat
	}
	return 0
}

func (x *GetAssetFundamentalsResponse_StatisticResponse) GetForwardAnnualDividendYield() float64 {
	if x != nil {
		return x.ForwardAnnualDividendYield
	}
	return 0
}

func (x *GetAssetFundamentalsResponse_StatisticResponse) GetSharesOutstanding() float64 {
	if x != nil {
		return x.SharesOutstanding
	}
	return 0
}

func (x *GetAssetFundamentalsResponse_StatisticResponse) GetRevenueTtm() float64 {
	if x != nil {
		return x.RevenueTtm
	}
	return 0
}

func (x *GetAssetFundamentalsResponse_StatisticResponse) GetEbitdaTtm() float64 {
	if x != nil {
		return x.EbitdaTtm
	}
	return 0
}

func (x *GetAssetFundamentalsResponse_StatisticResponse) GetNetIncomeTtm() float64 {
	if x != nil {
		return x.NetIncomeTtm
	}
	return 0
}

func (x *GetAssetFundamentalsResponse_StatisticResponse) GetEpsTtm() float64 {
	if x != nil {
		return x.EpsTtm
	}
	return 0
}

func (x *GetAssetFundamentalsResponse_StatisticResponse) GetDilutedEpsTtm() float64 {
	if x != nil {
		return x.DilutedEpsTtm
	}
	return 0
}

func (x *GetAssetFundamentalsResponse_StatisticResponse) GetFreeCashFlowTtm() float64 {
	if x != nil {
		return x.FreeCashFlowTtm
	}
	return 0
}

func (x *GetAssetFundamentalsResponse_StatisticResponse) GetFiveYearAnnualRevenueGrowthRate() float64 {
	if x != nil {
		return x.FiveYearAnnualRevenueGrowthRate
	}
	return 0
}

func (x *GetAssetFundamentalsResponse_StatisticResponse) GetThreeYearAnnualRevenueGrowthRate() float64 {
	if x != nil {
		return x.ThreeYearAnnualRevenueGrowthRate
	}
	return 0
}

func (x *GetAssetFundamentalsResponse_StatisticResponse) GetPeRatioTtm() float64 {
	if x != nil {
		return x.PeRatioTtm
	}
	return 0
}

func (x *GetAssetFundamentalsResponse_StatisticResponse) GetPriceToSalesTtm() float64 {
	if x != nil {
		return x.PriceToSalesTtm
	}
	return 0
}

func (x *GetAssetFundamentalsResponse_StatisticResponse) GetPriceToBookTtm() float64 {
	if x != nil {
		return x.PriceToBookTtm
	}
	return 0
}

func (x *GetAssetFundamentalsResponse_StatisticResponse) GetPriceToFreeCashFlowTtm() float64 {
	if x != nil {
		return x.PriceToFreeCashFlowTtm
	}
	return 0
}

func (x *GetAssetFundamentalsResponse_StatisticResponse) GetTotalEnterpriseValueMrq() float64 {
	if x != nil {
		return x.TotalEnterpriseValueMrq
	}
	return 0
}

func (x *GetAssetFundamentalsResponse_StatisticResponse) GetEvToEbitdaMrq() float64 {
	if x != nil {
		return x.EvToEbitdaMrq
	}
	return 0
}

func (x *GetAssetFundamentalsResponse_StatisticResponse) GetNetMarginMrq() float64 {
	if x != nil {
		return x.NetMarginMrq
	}
	return 0
}

func (x *GetAssetFundamentalsResponse_StatisticResponse) GetNetInterestMarginMrq() float64 {
	if x != nil {
		return x.NetInterestMarginMrq
	}
	return 0
}

func (x *GetAssetFundamentalsResponse_StatisticResponse) GetRoe() float64 {
	if x != nil {
		return x.Roe
	}
	return 0
}

func (x *GetAssetFundamentalsResponse_StatisticResponse) GetRoa() float64 {
	if x != nil {
		return x.Roa
	}
	return 0
}

func (x *GetAssetFundamentalsResponse_StatisticResponse) GetRoic() float64 {
	if x != nil {
		return x.Roic
	}
	return 0
}

func (x *GetAssetFundamentalsResponse_StatisticResponse) GetTotalDebtMrq() float64 {
	if x != nil {
		return x.TotalDebtMrq
	}
	return 0
}

func (x *GetAssetFundamentalsResponse_StatisticResponse) GetTotalDebtToEquityMrq() float64 {
	if x != nil {
		return x.TotalDebtToEquityMrq
	}
	return 0
}

func (x *GetAssetFundamentalsResponse_StatisticResponse) GetTotalDebtToEbitdaMrq() float64 {
	if x != nil {
		return x.TotalDebtToEbitdaMrq
	}
	return 0
}

func (x *GetAssetFundamentalsResponse_StatisticResponse) GetFreeCashFlowToPrice() float64 {
	if x != nil {
		return x.FreeCashFlowToPrice
	}
	return 0
}

func (x *GetAssetFundamentalsResponse_StatisticResponse) GetNetDebtToEbitda() float64 {
	if x != nil {
		return x.NetDebtToEbitda
	}
	return 0
}

func (x *GetAssetFundamentalsResponse_StatisticResponse) GetCurrentRatioMrq() float64 {
	if x != nil {
		return x.CurrentRatioMrq
	}
	return 0
}

func (x *GetAssetFundamentalsResponse_StatisticResponse) GetFixedChargeCoverageRatioFy() float64 {
	if x != nil {
		return x.FixedChargeCoverageRatioFy
	}
	return 0
}

func (x *GetAssetFundamentalsResponse_StatisticResponse) GetDividendYieldDailyTtm() float64 {
	if x != nil {
		return x.DividendYieldDailyTtm
	}
	return 0
}

func (x *GetAssetFundamentalsResponse_StatisticResponse) GetDividendRateTtm() float64 {
	if x != nil {
		return x.DividendRateTtm
	}
	return 0
}

func (x *GetAssetFundamentalsResponse_StatisticResponse) GetDividendsPerShare() float64 {
	if x != nil {
		return x.DividendsPerShare
	}
	return 0
}

func (x *GetAssetFundamentalsResponse_StatisticResponse) GetFiveYearsAverageDividendYield() float64 {
	if x != nil {
		return x.FiveYearsAverageDividendYield
	}
	return 0
}

func (x *GetAssetFundamentalsResponse_StatisticResponse) GetFiveYearAnnualDividendGrowthRate() float64 {
	if x != nil {
		return x.FiveYearAnnualDividendGrowthRate
	}
	return 0
}

func (x *GetAssetFundamentalsResponse_StatisticResponse) GetDividendPayoutRatioFy() float64 {
	if x != nil {
		return x.DividendPayoutRatioFy
	}
	return 0
}

func (x *GetAssetFundamentalsResponse_StatisticResponse) GetBuyBackTtm() float64 {
	if x != nil {
		return x.BuyBackTtm
	}
	return 0
}

func (x *GetAssetFundamentalsResponse_StatisticResponse) GetOneYearAnnualRevenueGrowthRate() float64 {
	if x != nil {
		return x.OneYearAnnualRevenueGrowthRate
	}
	return 0
}

func (x *GetAssetFundamentalsResponse_StatisticResponse) GetDomicileIndicatorCode() string {
	if x != nil {
		return x.DomicileIndicatorCode
	}
	return ""
}

func (x *GetAssetFundamentalsResponse_StatisticResponse) GetAdrToCommonShareRatio() float64 {
	if x != nil {
		return x.AdrToCommonShareRatio
	}
	return 0
}

func (x *GetAssetFundamentalsResponse_StatisticResponse) GetNumberOfEmployees() float64 {
	if x != nil {
		return x.NumberOfEmployees
	}
	return 0
}

func (x *GetAssetFundamentalsResponse_StatisticResponse) GetExDividendDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExDividendDate
	}
	return nil
}

func (x *GetAssetFundamentalsResponse_StatisticResponse) GetFiscalPeriodStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.FiscalPeriodStartDate
	}
	return nil
}

func (x *GetAssetFundamentalsResponse_StatisticResponse) GetFiscalPeriodEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.FiscalPeriodEndDate
	}
	return nil
}

func (x *GetAssetFundamentalsResponse_StatisticResponse) GetRevenueChangeFiveYears() float64 {
	if x != nil {
		return x.RevenueChangeFiveYears
	}
	return 0
}

func (x *GetAssetFundamentalsResponse_StatisticResponse) GetEpsChangeFiveYears() float64 {
	if x != nil {
		return x.EpsChangeFiveYears
	}
	return 0
}

func (x *GetAssetFundamentalsResponse_StatisticResponse) GetEbitdaChangeFiveYears() float64 {
	if x != nil {
		return x.EbitdaChangeFiveYears
	}
	return 0
}

func (x *GetAssetFundamentalsResponse_StatisticResponse) GetTotalDebtChangeFiveYears() float64 {
	if x != nil {
		return x.TotalDebtChangeFiveYears
	}
	return 0
}

func (x *GetAssetFundamentalsResponse_StatisticResponse) GetEvToSales() float64 {
	if x != nil {
		return x.EvToSales
	}
	return 0
}

// Отчет
type GetAssetReportsResponse_GetAssetReportsEvent struct {
	state         protoimpl.MessageState                        `protogen:"open.v1"`
	InstrumentId  string                                        `protobuf:"bytes,1,opt,name=instrument_id,json=instrumentId,proto3" json:"instrument_id,omitempty"`                                                       // Идентификатор инструмента.
	ReportDate    *timestamppb.Timestamp                        `protobuf:"bytes,2,opt,name=report_date,json=reportDate,proto3" json:"report_date,omitempty"`                                                             // Дата публикации отчета.
	PeriodYear    int32                                         `protobuf:"varint,3,opt,name=period_year,json=periodYear,proto3" json:"period_year,omitempty"`                                                            // Год периода отчета.
	PeriodNum     int32                                         `protobuf:"varint,4,opt,name=period_num,json=periodNum,proto3" json:"period_num,omitempty"`                                                               // Номер периода.
	PeriodType    GetAssetReportsResponse_AssetReportPeriodType `protobuf:"varint,5,opt,name=period_type,json=periodType,proto3,enum=tinvest.GetAssetReportsResponse_AssetReportPeriodType" json:"period_type,omitempty"` // Тип отчета.
	CreatedAt     *timestamppb.Timestamp                        `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                                                                // Дата создания записи.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAssetReportsResponse_GetAssetReportsEvent) Reset() {
	*x = GetAssetReportsResponse_GetAssetReportsEvent{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAssetReportsResponse_GetAssetReportsEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAssetReportsResponse_GetAssetReportsEvent) ProtoMessage() {}

func (x *GetAssetReportsResponse_GetAssetReportsEvent) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAssetReportsResponse_GetAssetReportsEvent.ProtoReflect.Descriptor instead.
func (*GetAssetReportsResponse_GetAssetReportsEvent) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{83, 0}
}

func (x *GetAssetReportsResponse_GetAssetReportsEvent) GetInstrumentId() string {
	if x != nil {
		return x.InstrumentId
	}
	return ""
}

func (x *GetAssetReportsResponse_GetAssetReportsEvent) GetReportDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReportDate
	}
	return nil
}

func (x *GetAssetReportsResponse_GetAssetReportsEvent) GetPeriodYear() int32 {
	if x != nil {
		return x.PeriodYear
	}
	return 0
}

func (x *GetAssetReportsResponse_GetAssetReportsEvent) GetPeriodNum() int32 {
	if x != nil {
		return x.PeriodNum
	}
	return 0
}

func (x *GetAssetReportsResponse_GetAssetReportsEvent) GetPeriodType() GetAssetReportsResponse_AssetReportPeriodType {
	if x != nil {
		return x.PeriodType
	}
	return GetAssetReportsResponse_PERIOD_TYPE_UNSPECIFIED
}

func (x *GetAssetReportsResponse_GetAssetReportsEvent) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

// Прогноз
type GetConsensusForecastsResponse_ConsensusForecastsItem struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Uid                string                 `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`                                                            // UID-идентификатор.
	AssetUid           string                 `protobuf:"bytes,2,opt,name=asset_uid,json=assetUid,proto3" json:"asset_uid,omitempty"`                                  // UID-идентификатор актива.
	CreatedAt          *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                               // Дата и время создания записи.
	BestTargetPrice    *Quotation             `protobuf:"bytes,4,opt,name=best_target_price,json=bestTargetPrice,proto3" json:"best_target_price,omitempty"`           // Целевая цена на 12 месяцев.
	BestTargetLow      *Quotation             `protobuf:"bytes,5,opt,name=best_target_low,json=bestTargetLow,proto3" json:"best_target_low,omitempty"`                 // Минимальная прогнозная цена.
	BestTargetHigh     *Quotation             `protobuf:"bytes,6,opt,name=best_target_high,json=bestTargetHigh,proto3" json:"best_target_high,omitempty"`              // Максимальная прогнозная цена.
	TotalBuyRecommend  int32                  `protobuf:"varint,7,opt,name=total_buy_recommend,json=totalBuyRecommend,proto3" json:"total_buy_recommend,omitempty"`    // Количество аналитиков рекомендующих покупать.
	TotalHoldRecommend int32                  `protobuf:"varint,8,opt,name=total_hold_recommend,json=totalHoldRecommend,proto3" json:"total_hold_recommend,omitempty"` // Количество аналитиков рекомендующих держать.
	TotalSellRecommend int32                  `protobuf:"varint,9,opt,name=total_sell_recommend,json=totalSellRecommend,proto3" json:"total_sell_recommend,omitempty"` // Количество аналитиков рекомендующих продавать.
	Currency           string                 `protobuf:"bytes,10,opt,name=currency,proto3" json:"currency,omitempty"`                                                 // Валюта прогнозов инструмента.
	Consensus          Recommendation         `protobuf:"varint,11,opt,name=consensus,proto3,enum=tinvest.Recommendation" json:"consensus,omitempty"`                  // Консенсус-прогноз.
	PrognosisDate      *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=prognosis_date,json=prognosisDate,proto3" json:"prognosis_date,omitempty"`                  // Дата прогноза.
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetConsensusForecastsResponse_ConsensusForecastsItem) Reset() {
	*x = GetConsensusForecastsResponse_ConsensusForecastsItem{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[95]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConsensusForecastsResponse_ConsensusForecastsItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConsensusForecastsResponse_ConsensusForecastsItem) ProtoMessage() {}

func (x *GetConsensusForecastsResponse_ConsensusForecastsItem) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[95]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConsensusForecastsResponse_ConsensusForecastsItem.ProtoReflect.Descriptor instead.
func (*GetConsensusForecastsResponse_ConsensusForecastsItem) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{85, 0}
}

func (x *GetConsensusForecastsResponse_ConsensusForecastsItem) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *GetConsensusForecastsResponse_ConsensusForecastsItem) GetAssetUid() string {
	if x != nil {
		return x.AssetUid
	}
	return ""
}

func (x *GetConsensusForecastsResponse_ConsensusForecastsItem) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *GetConsensusForecastsResponse_ConsensusForecastsItem) GetBestTargetPrice() *Quotation {
	if x != nil {
		return x.BestTargetPrice
	}
	return nil
}

func (x *GetConsensusForecastsResponse_ConsensusForecastsItem) GetBestTargetLow() *Quotation {
	if x != nil {
		return x.BestTargetLow
	}
	return nil
}

func (x *GetConsensusForecastsResponse_ConsensusForecastsItem) GetBestTargetHigh() *Quotation {
	if x != nil {
		return x.BestTargetHigh
	}
	return nil
}

func (x *GetConsensusForecastsResponse_ConsensusForecastsItem) GetTotalBuyRecommend() int32 {
	if x != nil {
		return x.TotalBuyRecommend
	}
	return 0
}

func (x *GetConsensusForecastsResponse_ConsensusForecastsItem) GetTotalHoldRecommend() int32 {
	if x != nil {
		return x.TotalHoldRecommend
	}
	return 0
}

func (x *GetConsensusForecastsResponse_ConsensusForecastsItem) GetTotalSellRecommend() int32 {
	if x != nil {
		return x.TotalSellRecommend
	}
	return 0
}

func (x *GetConsensusForecastsResponse_ConsensusForecastsItem) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *GetConsensusForecastsResponse_ConsensusForecastsItem) GetConsensus() Recommendation {
	if x != nil {
		return x.Consensus
	}
	return Recommendation_RECOMMENDATION_UNSPECIFIED
}

func (x *GetConsensusForecastsResponse_ConsensusForecastsItem) GetPrognosisDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PrognosisDate
	}
	return nil
}

// Прогноз
type GetForecastResponse_TargetItem struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Uid                string                 `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`                                                         // Уникальный идентификатор инструмента.
	Ticker             string                 `protobuf:"bytes,2,opt,name=ticker,proto3" json:"ticker,omitempty"`                                                   // Тикер инструмента.
	Company            string                 `protobuf:"bytes,3,opt,name=company,proto3" json:"company,omitempty"`                                                 // Название компании, давшей прогноз.
	Recommendation     Recommendation         `protobuf:"varint,4,opt,name=recommendation,proto3,enum=tinvest.Recommendation" json:"recommendation,omitempty"`      // Прогноз.
	RecommendationDate *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=recommendation_date,json=recommendationDate,proto3" json:"recommendation_date,omitempty"` //Дата прогноза.
	Currency           string                 `protobuf:"bytes,6,opt,name=currency,proto3" json:"currency,omitempty"`                                               // Валюта.
	CurrentPrice       *Quotation             `protobuf:"bytes,7,opt,name=current_price,json=currentPrice,proto3" json:"current_price,omitempty"`                   // Текущая цена.
	TargetPrice        *Quotation             `protobuf:"bytes,8,opt,name=target_price,json=targetPrice,proto3" json:"target_price,omitempty"`                      // Прогнозируемая цена.
	PriceChange        *Quotation             `protobuf:"bytes,9,opt,name=price_change,json=priceChange,proto3" json:"price_change,omitempty"`                      // Изменение цены.
	PriceChangeRel     *Quotation             `protobuf:"bytes,10,opt,name=price_change_rel,json=priceChangeRel,proto3" json:"price_change_rel,omitempty"`          // Относительное изменение цены.
	ShowName           string                 `protobuf:"bytes,11,opt,name=show_name,json=showName,proto3" json:"show_name,omitempty"`                              // Наименование инструмента.
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetForecastResponse_TargetItem) Reset() {
	*x = GetForecastResponse_TargetItem{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetForecastResponse_TargetItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetForecastResponse_TargetItem) ProtoMessage() {}

func (x *GetForecastResponse_TargetItem) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetForecastResponse_TargetItem.ProtoReflect.Descriptor instead.
func (*GetForecastResponse_TargetItem) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{87, 0}
}

func (x *GetForecastResponse_TargetItem) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *GetForecastResponse_TargetItem) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *GetForecastResponse_TargetItem) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *GetForecastResponse_TargetItem) GetRecommendation() Recommendation {
	if x != nil {
		return x.Recommendation
	}
	return Recommendation_RECOMMENDATION_UNSPECIFIED
}

func (x *GetForecastResponse_TargetItem) GetRecommendationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.RecommendationDate
	}
	return nil
}

func (x *GetForecastResponse_TargetItem) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *GetForecastResponse_TargetItem) GetCurrentPrice() *Quotation {
	if x != nil {
		return x.CurrentPrice
	}
	return nil
}

func (x *GetForecastResponse_TargetItem) GetTargetPrice() *Quotation {
	if x != nil {
		return x.TargetPrice
	}
	return nil
}

func (x *GetForecastResponse_TargetItem) GetPriceChange() *Quotation {
	if x != nil {
		return x.PriceChange
	}
	return nil
}

func (x *GetForecastResponse_TargetItem) GetPriceChangeRel() *Quotation {
	if x != nil {
		return x.PriceChangeRel
	}
	return nil
}

func (x *GetForecastResponse_TargetItem) GetShowName() string {
	if x != nil {
		return x.ShowName
	}
	return ""
}

// Консенсус-прогноз.
type GetForecastResponse_ConsensusItem struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Uid            string                 `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`                                                    // Уникальный идентификатор инструмента.
	Ticker         string                 `protobuf:"bytes,2,opt,name=ticker,proto3" json:"ticker,omitempty"`                                              // Тикер инструмента.
	Recommendation Recommendation         `protobuf:"varint,3,opt,name=recommendation,proto3,enum=tinvest.Recommendation" json:"recommendation,omitempty"` // Прогноз.
	Currency       string                 `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty"`                                          // Валюта.
	CurrentPrice   *Quotation             `protobuf:"bytes,5,opt,name=current_price,json=currentPrice,proto3" json:"current_price,omitempty"`              // Текущая цена.
	Consensus      *Quotation             `protobuf:"bytes,6,opt,name=consensus,proto3" json:"consensus,omitempty"`                                        // Прогнозируемая цена.
	MinTarget      *Quotation             `protobuf:"bytes,7,opt,name=min_target,json=minTarget,proto3" json:"min_target,omitempty"`                       // Минимальная цена прогноза.
	MaxTarget      *Quotation             `protobuf:"bytes,8,opt,name=max_target,json=maxTarget,proto3" json:"max_target,omitempty"`                       // Максимальная цена прогноза.
	PriceChange    *Quotation             `protobuf:"bytes,9,opt,name=price_change,json=priceChange,proto3" json:"price_change,omitempty"`                 // Изменение цены.
	PriceChangeRel *Quotation             `protobuf:"bytes,10,opt,name=price_change_rel,json=priceChangeRel,proto3" json:"price_change_rel,omitempty"`     // Относительное изменение цены.
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetForecastResponse_ConsensusItem) Reset() {
	*x = GetForecastResponse_ConsensusItem{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[97]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetForecastResponse_ConsensusItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetForecastResponse_ConsensusItem) ProtoMessage() {}

func (x *GetForecastResponse_ConsensusItem) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[97]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetForecastResponse_ConsensusItem.ProtoReflect.Descriptor instead.
func (*GetForecastResponse_ConsensusItem) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{87, 1}
}

func (x *GetForecastResponse_ConsensusItem) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *GetForecastResponse_ConsensusItem) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *GetForecastResponse_ConsensusItem) GetRecommendation() Recommendation {
	if x != nil {
		return x.Recommendation
	}
	return Recommendation_RECOMMENDATION_UNSPECIFIED
}

func (x *GetForecastResponse_ConsensusItem) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *GetForecastResponse_ConsensusItem) GetCurrentPrice() *Quotation {
	if x != nil {
		return x.CurrentPrice
	}
	return nil
}

func (x *GetForecastResponse_ConsensusItem) GetConsensus() *Quotation {
	if x != nil {
		return x.Consensus
	}
	return nil
}

func (x *GetForecastResponse_ConsensusItem) GetMinTarget() *Quotation {
	if x != nil {
		return x.MinTarget
	}
	return nil
}

func (x *GetForecastResponse_ConsensusItem) GetMaxTarget() *Quotation {
	if x != nil {
		return x.MaxTarget
	}
	return nil
}

func (x *GetForecastResponse_ConsensusItem) GetPriceChange() *Quotation {
	if x != nil {
		return x.PriceChange
	}
	return nil
}

func (x *GetForecastResponse_ConsensusItem) GetPriceChangeRel() *Quotation {
	if x != nil {
		return x.PriceChangeRel
	}
	return nil
}

type RiskRatesResponse_RiskRateResult struct {
	state          protoimpl.MessageState        `protogen:"open.v1"`
	InstrumentUid  string                        `protobuf:"bytes,1,opt,name=instrument_uid,json=instrumentUid,proto3" json:"instrument_uid,omitempty"`
	ShortRiskRate  *RiskRatesResponse_RiskRate   `protobuf:"bytes,2,opt,name=short_risk_rate,json=shortRiskRate,proto3,oneof" json:"short_risk_rate,omitempty"` // Ставка риска пользователя  в шорт
	LongRiskRate   *RiskRatesResponse_RiskRate   `protobuf:"bytes,3,opt,name=long_risk_rate,json=longRiskRate,proto3,oneof" json:"long_risk_rate,omitempty"`    // Ставка риска пользователя в лонг
	ShortRiskRates []*RiskRatesResponse_RiskRate `protobuf:"bytes,5,rep,name=short_risk_rates,json=shortRiskRates,proto3" json:"short_risk_rates,omitempty"`    //Доступные ставки риска в шорт
	LongRiskRates  []*RiskRatesResponse_RiskRate `protobuf:"bytes,6,rep,name=long_risk_rates,json=longRiskRates,proto3" json:"long_risk_rates,omitempty"`       //Доступные ставки риска в лонг
	Error          *string                       `protobuf:"bytes,9,opt,name=error,proto3,oneof" json:"error,omitempty"`                                        // Ошибка.
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *RiskRatesResponse_RiskRateResult) Reset() {
	*x = RiskRatesResponse_RiskRateResult{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[98]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RiskRatesResponse_RiskRateResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskRatesResponse_RiskRateResult) ProtoMessage() {}

func (x *RiskRatesResponse_RiskRateResult) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[98]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskRatesResponse_RiskRateResult.ProtoReflect.Descriptor instead.
func (*RiskRatesResponse_RiskRateResult) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{89, 0}
}

func (x *RiskRatesResponse_RiskRateResult) GetInstrumentUid() string {
	if x != nil {
		return x.InstrumentUid
	}
	return ""
}

func (x *RiskRatesResponse_RiskRateResult) GetShortRiskRate() *RiskRatesResponse_RiskRate {
	if x != nil {
		return x.ShortRiskRate
	}
	return nil
}

func (x *RiskRatesResponse_RiskRateResult) GetLongRiskRate() *RiskRatesResponse_RiskRate {
	if x != nil {
		return x.LongRiskRate
	}
	return nil
}

func (x *RiskRatesResponse_RiskRateResult) GetShortRiskRates() []*RiskRatesResponse_RiskRate {
	if x != nil {
		return x.ShortRiskRates
	}
	return nil
}

func (x *RiskRatesResponse_RiskRateResult) GetLongRiskRates() []*RiskRatesResponse_RiskRate {
	if x != nil {
		return x.LongRiskRates
	}
	return nil
}

func (x *RiskRatesResponse_RiskRateResult) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

type RiskRatesResponse_RiskRate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RiskLevelCode string                 `protobuf:"bytes,2,opt,name=risk_level_code,json=riskLevelCode,proto3" json:"risk_level_code,omitempty"` // Категория риска.
	Value         *Quotation             `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`                                        // Значение ставки риска.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RiskRatesResponse_RiskRate) Reset() {
	*x = RiskRatesResponse_RiskRate{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[99]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RiskRatesResponse_RiskRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskRatesResponse_RiskRate) ProtoMessage() {}

func (x *RiskRatesResponse_RiskRate) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[99]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskRatesResponse_RiskRate.ProtoReflect.Descriptor instead.
func (*RiskRatesResponse_RiskRate) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{89, 1}
}

func (x *RiskRatesResponse_RiskRate) GetRiskLevelCode() string {
	if x != nil {
		return x.RiskLevelCode
	}
	return ""
}

func (x *RiskRatesResponse_RiskRate) GetValue() *Quotation {
	if x != nil {
		return x.Value
	}
	return nil
}

type TradingInterval_TimeInterval struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StartTs       *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_ts,json=startTs,proto3" json:"start_ts,omitempty"` // Время начала интервала.
	EndTs         *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end_ts,json=endTs,proto3" json:"end_ts,omitempty"`       // Время окончания интервала.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TradingInterval_TimeInterval) Reset() {
	*x = TradingInterval_TimeInterval{}
	mi := &file_tinvest_trb_instruments_proto_msgTypes[100]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradingInterval_TimeInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingInterval_TimeInterval) ProtoMessage() {}

func (x *TradingInterval_TimeInterval) ProtoReflect() protoreflect.Message {
	mi := &file_tinvest_trb_instruments_proto_msgTypes[100]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingInterval_TimeInterval.ProtoReflect.Descriptor instead.
func (*TradingInterval_TimeInterval) Descriptor() ([]byte, []int) {
	return file_tinvest_trb_instruments_proto_rawDescGZIP(), []int{90, 0}
}

func (x *TradingInterval_TimeInterval) GetStartTs() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTs
	}
	return nil
}

func (x *TradingInterval_TimeInterval) GetEndTs() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTs
	}
	return nil
}

var File_tinvest_trb_instruments_proto protoreflect.FileDescriptor

const file_tinvest_trb_instruments_proto_rawDesc = "" +
	"\n" +
	"\x1dtinvest/trb/instruments.proto\x12\atinvest\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x18tinvest/trb/common.proto\x1a\x1fgoogle/api/field_behavior.proto\"\xbd\x01\n" +
	"\x17TradingSchedulesRequest\x12\x1f\n" +
	"\bexchange\x18\x01 \x01(\tH\x00R\bexchange\x88\x01\x01\x123\n" +
	"\x04from\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampH\x01R\x04from\x88\x01\x01\x12/\n" +
	"\x02to\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampH\x02R\x02to\x88\x01\x01B\v\n" +
	"\t_exchangeB\a\n" +
	"\x05_fromB\x05\n" +
	"\x03_to\"R\n" +
	"\x18TradingSchedulesResponse\x126\n" +
	"\texchanges\x18\x01 \x03(\v2\x18.tinvest.TradingScheduleR\texchanges\"V\n" +
	"\x0fTradingSchedule\x12\x1a\n" +
	"\bexchange\x18\x01 \x01(\tR\bexchange\x12'\n" +
	"\x04days\x18\x02 \x03(\v2\x13.tinvest.TradingDayR\x04days\"\x98\t\n" +
	"\n" +
	"TradingDay\x12.\n" +
	"\x04date\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\x04date\x12$\n" +
	"\x0eis_trading_day\x18\x02 \x01(\bR\fisTradingDay\x129\n" +
	"\n" +
	"start_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\tstartTime\x125\n" +
	"\bend_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\aendTime\x12W\n" +
	"\x1aopening_auction_start_time\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\x17openingAuctionStartTime\x12S\n" +
	"\x18closing_auction_end_time\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\x15closingAuctionEndTime\x12f\n" +
	"\"evening_opening_auction_start_time\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\x1eeveningOpeningAuctionStartTime\x12H\n" +
	"\x12evening_start_time\x18\n" +
	" \x01(\v2\x1a.google.protobuf.TimestampR\x10eveningStartTime\x12D\n" +
	"\x10evening_end_time\x18\v \x01(\v2\x1a.google.protobuf.TimestampR\x0eeveningEndTime\x12J\n" +
	"\x13clearing_start_time\x18\f \x01(\v2\x1a.google.protobuf.TimestampR\x11clearingStartTime\x12F\n" +
	"\x11clearing_end_time\x18\r \x01(\v2\x1a.google.protobuf.TimestampR\x0fclearingEndTime\x12L\n" +
	"\x14premarket_start_time\x18\x0e \x01(\v2\x1a.google.protobuf.TimestampR\x12premarketStartTime\x12H\n" +
	"\x12premarket_end_time\x18\x0f \x01(\v2\x1a.google.protobuf.TimestampR\x10premarketEndTime\x12W\n" +
	"\x1aclosing_auction_start_time\x18\x10 \x01(\v2\x1a.google.protobuf.TimestampR\x17closingAuctionStartTime\x12S\n" +
	"\x18opening_auction_end_time\x18\x11 \x01(\v2\x1a.google.protobuf.TimestampR\x15openingAuctionEndTime\x126\n" +
	"\tintervals\x18\x12 \x03(\v2\x18.tinvest.TradingIntervalR\tintervalsJ\x04\b\x05\x10\x06J\x04\b\x06\x10\a\"\x96\x01\n" +
	"\x11InstrumentRequest\x128\n" +
	"\aid_type\x18\x01 \x01(\x0e2\x19.tinvest.InstrumentIdTypeB\x04\xe2A\x01\x02R\x06idType\x12\"\n" +
	"\n" +
	"class_code\x18\x02 \x01(\tH\x00R\tclassCode\x88\x01\x01\x12\x14\n" +
	"\x02id\x18\x03 \x01(\tB\x04\xe2A\x01\x02R\x02idB\r\n" +
	"\v_class_code\"\xe6\x01\n" +
	"\x12InstrumentsRequest\x12K\n" +
	"\x11instrument_status\x18\x01 \x01(\x0e2\x19.tinvest.InstrumentStatusH\x00R\x10instrumentStatus\x88\x01\x01\x12U\n" +
	"\x13instrument_exchange\x18\x02 \x01(\x0e2\x1f.tinvest.InstrumentExchangeTypeH\x01R\x12instrumentExchange\x88\x01\x01B\x14\n" +
	"\x12_instrument_statusB\x16\n" +
	"\x14_instrument_exchange\"\xb2\x01\n" +
	"\x14FilterOptionsRequest\x12+\n" +
	"\x0fbasic_asset_uid\x18\x01 \x01(\tH\x00R\rbasicAssetUid\x88\x01\x01\x12<\n" +
	"\x18basic_asset_position_uid\x18\x02 \x01(\tH\x01R\x15basicAssetPositionUid\x88\x01\x01B\x12\n" +
	"\x10_basic_asset_uidB\x1b\n" +
	"\x19_basic_asset_position_uid\"=\n" +
	"\fBondResponse\x12-\n" +
	"\n" +
	"instrument\x18\x01 \x01(\v2\r.tinvest.BondR\n" +
	"instrument\"@\n" +
	"\rBondsResponse\x12/\n" +
	"\vinstruments\x18\x01 \x03(\v2\r.tinvest.BondR\vinstruments\"\xd0\x01\n" +
	"\x15GetBondCouponsRequest\x12\x16\n" +
	"\x04figi\x18\x01 \x01(\tB\x02\x18\x01R\x04figi\x123\n" +
	"\x04from\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampH\x00R\x04from\x88\x01\x01\x12/\n" +
	"\x02to\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampH\x01R\x02to\x88\x01\x01\x12)\n" +
	"\rinstrument_id\x18\x04 \x01(\tB\x04\xe2A\x01\x02R\finstrumentIdB\a\n" +
	"\x05_fromB\x05\n" +
	"\x03_to\"A\n" +
	"\x16GetBondCouponsResponse\x12'\n" +
	"\x06events\x18\x01 \x03(\v2\x0f.tinvest.CouponR\x06events\"\xef\x02\n" +
	"\x14GetBondEventsRequest\x123\n" +
	"\x04from\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampH\x00R\x04from\x88\x01\x01\x12/\n" +
	"\x02to\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampH\x01R\x02to\x88\x01\x01\x12)\n" +
	"\rinstrument_id\x18\x04 \x01(\tB\x04\xe2A\x01\x02R\finstrumentId\x12;\n" +
	"\x04type\x18\x05 \x01(\x0e2'.tinvest.GetBondEventsRequest.EventTypeR\x04type\"y\n" +
	"\tEventType\x12\x1a\n" +
	"\x16EVENT_TYPE_UNSPECIFIED\x10\x00\x12\x12\n" +
	"\x0eEVENT_TYPE_CPN\x10\x01\x12\x13\n" +
	"\x0fEVENT_TYPE_CALL\x10\x02\x12\x12\n" +
	"\x0eEVENT_TYPE_MTY\x10\x03\x12\x13\n" +
	"\x0fEVENT_TYPE_CONV\x10\x04B\a\n" +
	"\x05_fromB\x05\n" +
	"\x03_to\"\xb4\t\n" +
	"\x15GetBondEventsResponse\x12@\n" +
	"\x06events\x18\x01 \x03(\v2(.tinvest.GetBondEventsResponse.BondEventR\x06events\x1a\xd8\b\n" +
	"\tBondEvent\x12#\n" +
	"\rinstrument_id\x18\x02 \x01(\tR\finstrumentId\x12!\n" +
	"\fevent_number\x18\x03 \x01(\x05R\veventNumber\x129\n" +
	"\n" +
	"event_date\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\teventDate\x12F\n" +
	"\n" +
	"event_type\x18\x05 \x01(\x0e2'.tinvest.GetBondEventsRequest.EventTypeR\teventType\x12:\n" +
	"\x0fevent_total_vol\x18\x06 \x01(\v2\x12.tinvest.QuotationR\reventTotalVol\x125\n" +
	"\bfix_date\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\afixDate\x127\n" +
	"\trate_date\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\brateDate\x12=\n" +
	"\fdefault_date\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\vdefaultDate\x12>\n" +
	"\rreal_pay_date\x18\n" +
	" \x01(\v2\x1a.google.protobuf.TimestampR\vrealPayDate\x125\n" +
	"\bpay_date\x18\v \x01(\v2\x1a.google.protobuf.TimestampR\apayDate\x125\n" +
	"\fpay_one_bond\x18\f \x01(\v2\x13.tinvest.MoneyValueR\n" +
	"payOneBond\x129\n" +
	"\x0emoney_flow_val\x18\r \x01(\v2\x13.tinvest.MoneyValueR\fmoneyFlowVal\x12\x1c\n" +
	"\texecution\x18\x0e \x01(\tR\texecution\x12%\n" +
	"\x0eoperation_type\x18\x0f \x01(\tR\roperationType\x12(\n" +
	"\x05value\x18\x10 \x01(\v2\x12.tinvest.QuotationR\x05value\x12\x12\n" +
	"\x04note\x18\x11 \x01(\tR\x04note\x122\n" +
	"\x16convert_to_fin_tool_id\x18\x12 \x01(\tR\x12convertToFinToolId\x12F\n" +
	"\x11coupon_start_date\x18\x13 \x01(\v2\x1a.google.protobuf.TimestampR\x0fcouponStartDate\x12B\n" +
	"\x0fcoupon_end_date\x18\x14 \x01(\v2\x1a.google.protobuf.TimestampR\rcouponEndDate\x12#\n" +
	"\rcoupon_period\x18\x15 \x01(\x05R\fcouponPeriod\x12D\n" +
	"\x14coupon_interest_rate\x18\x16 \x01(\v2\x12.tinvest.QuotationR\x12couponInterestRate\"\xd3\x03\n" +
	"\x06Coupon\x12\x12\n" +
	"\x04figi\x18\x01 \x01(\tR\x04figi\x12;\n" +
	"\vcoupon_date\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"couponDate\x12#\n" +
	"\rcoupon_number\x18\x03 \x01(\x03R\fcouponNumber\x125\n" +
	"\bfix_date\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\afixDate\x125\n" +
	"\fpay_one_bond\x18\x05 \x01(\v2\x13.tinvest.MoneyValueR\n" +
	"payOneBond\x124\n" +
	"\vcoupon_type\x18\x06 \x01(\x0e2\x13.tinvest.CouponTypeR\n" +
	"couponType\x12F\n" +
	"\x11coupon_start_date\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\x0fcouponStartDate\x12B\n" +
	"\x0fcoupon_end_date\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\rcouponEndDate\x12#\n" +
	"\rcoupon_period\x18\t \x01(\x05R\fcouponPeriod\"E\n" +
	"\x10CurrencyResponse\x121\n" +
	"\n" +
	"instrument\x18\x01 \x01(\v2\x11.tinvest.CurrencyR\n" +
	"instrument\"I\n" +
	"\x12CurrenciesResponse\x123\n" +
	"\vinstruments\x18\x01 \x03(\v2\x11.tinvest.CurrencyR\vinstruments\";\n" +
	"\vEtfResponse\x12,\n" +
	"\n" +
	"instrument\x18\x01 \x01(\v2\f.tinvest.EtfR\n" +
	"instrument\">\n" +
	"\fEtfsResponse\x12.\n" +
	"\vinstruments\x18\x01 \x03(\v2\f.tinvest.EtfR\vinstruments\"A\n" +
	"\x0eFutureResponse\x12/\n" +
	"\n" +
	"instrument\x18\x01 \x01(\v2\x0f.tinvest.FutureR\n" +
	"instrument\"D\n" +
	"\x0fFuturesResponse\x121\n" +
	"\vinstruments\x18\x01 \x03(\v2\x0f.tinvest.FutureR\vinstruments\"A\n" +
	"\x0eOptionResponse\x12/\n" +
	"\n" +
	"instrument\x18\x01 \x01(\v2\x0f.tinvest.OptionR\n" +
	"instrument\"D\n" +
	"\x0fOptionsResponse\x121\n" +
	"\vinstruments\x18\x01 \x03(\v2\x0f.tinvest.OptionR\vinstruments\"\xdd\x11\n" +
	"\x06Option\x12\x10\n" +
	"\x03uid\x18\x01 \x01(\tR\x03uid\x12!\n" +
	"\fposition_uid\x18\x02 \x01(\tR\vpositionUid\x12\x16\n" +
	"\x06ticker\x18\x03 \x01(\tR\x06ticker\x12\x1d\n" +
	"\n" +
	"class_code\x18\x04 \x01(\tR\tclassCode\x127\n" +
	"\x18basic_asset_position_uid\x18\x05 \x01(\tR\x15basicAssetPositionUid\x12E\n" +
	"\x0etrading_status\x18\x15 \x01(\x0e2\x1e.tinvest.SecurityTradingStatusR\rtradingStatus\x12:\n" +
	"\rreal_exchange\x18\x1f \x01(\x0e2\x15.tinvest.RealExchangeR\frealExchange\x126\n" +
	"\tdirection\x18) \x01(\x0e2\x18.tinvest.OptionDirectionR\tdirection\x12=\n" +
	"\fpayment_type\x18* \x01(\x0e2\x1a.tinvest.OptionPaymentTypeR\vpaymentType\x12*\n" +
	"\x05style\x18+ \x01(\x0e2\x14.tinvest.OptionStyleR\x05style\x12F\n" +
	"\x0fsettlement_type\x18, \x01(\x0e2\x1d.tinvest.OptionSettlementTypeR\x0esettlementType\x12\x12\n" +
	"\x04name\x18e \x01(\tR\x04name\x12\x1a\n" +
	"\bcurrency\x18o \x01(\tR\bcurrency\x12/\n" +
	"\x13settlement_currency\x18p \x01(\tR\x12settlementCurrency\x12\x1e\n" +
	"\n" +
	"asset_type\x18\x83\x01 \x01(\tR\tassetType\x12 \n" +
	"\vbasic_asset\x18\x84\x01 \x01(\tR\n" +
	"basicAsset\x12\x1b\n" +
	"\bexchange\x18\x8d\x01 \x01(\tR\bexchange\x12'\n" +
	"\x0fcountry_of_risk\x18\x97\x01 \x01(\tR\rcountryOfRisk\x120\n" +
	"\x14country_of_risk_name\x18\x98\x01 \x01(\tR\x11countryOfRiskName\x12\x17\n" +
	"\x06sector\x18\xa1\x01 \x01(\tR\x06sector\x12)\n" +
	"\x05brand\x18\xa2\x01 \x01(\v2\x12.tinvest.BrandDataR\x05brand\x12\x11\n" +
	"\x03lot\x18\xc9\x01 \x01(\x05R\x03lot\x12=\n" +
	"\x10basic_asset_size\x18\xd3\x01 \x01(\v2\x12.tinvest.QuotationR\x0ebasicAssetSize\x12-\n" +
	"\x05klong\x18\xdd\x01 \x01(\v2\x12.tinvest.QuotationB\x02\x18\x01R\x05klong\x12/\n" +
	"\x06kshort\x18\xde\x01 \x01(\v2\x12.tinvest.QuotationB\x02\x18\x01R\x06kshort\x12)\n" +
	"\x05dlong\x18\xdf\x01 \x01(\v2\x12.tinvest.QuotationR\x05dlong\x12+\n" +
	"\x06dshort\x18\xe0\x01 \x01(\v2\x12.tinvest.QuotationR\x06dshort\x120\n" +
	"\tdlong_min\x18\xe1\x01 \x01(\v2\x12.tinvest.QuotationR\bdlongMin\x122\n" +
	"\n" +
	"dshort_min\x18\xe2\x01 \x01(\v2\x12.tinvest.QuotationR\tdshortMin\x12C\n" +
	"\x13min_price_increment\x18\xe7\x01 \x01(\v2\x12.tinvest.QuotationR\x11minPriceIncrement\x127\n" +
	"\fstrike_price\x18\xf1\x01 \x01(\v2\x13.tinvest.MoneyValueR\vstrikePrice\x126\n" +
	"\fdlong_client\x18\xa2\x02 \x01(\v2\x12.tinvest.QuotationR\vdlongClient\x128\n" +
	"\rdshort_client\x18\xa3\x02 \x01(\v2\x12.tinvest.QuotationR\fdshortClient\x12D\n" +
	"\x0fexpiration_date\x18\xad\x02 \x01(\v2\x1a.google.protobuf.TimestampR\x0eexpirationDate\x12E\n" +
	"\x10first_trade_date\x18\xb7\x02 \x01(\v2\x1a.google.protobuf.TimestampR\x0efirstTradeDate\x12C\n" +
	"\x0flast_trade_date\x18\xb8\x02 \x01(\v2\x1a.google.protobuf.TimestampR\rlastTradeDate\x12P\n" +
	"\x16first_1min_candle_date\x18\xc1\x02 \x01(\v2\x1a.google.protobuf.TimestampR\x13first1minCandleDate\x12P\n" +
	"\x16first_1day_candle_date\x18\xc2\x02 \x01(\v2\x1a.google.protobuf.TimestampR\x13first1dayCandleDate\x12-\n" +
	"\x12short_enabled_flag\x18\x91\x03 \x01(\bR\x10shortEnabledFlag\x12!\n" +
	"\ffor_iis_flag\x18\x92\x03 \x01(\bR\n" +
	"forIisFlag\x12\x1a\n" +
	"\botc_flag\x18\x93\x03 \x01(\bR\aotcFlag\x12-\n" +
	"\x12buy_available_flag\x18\x94\x03 \x01(\bR\x10buyAvailableFlag\x12/\n" +
	"\x13sell_available_flag\x18\x95\x03 \x01(\bR\x11sellAvailableFlag\x124\n" +
	"\x16for_qual_investor_flag\x18\x96\x03 \x01(\bR\x13forQualInvestorFlag\x12\"\n" +
	"\fweekend_flag\x18\x97\x03 \x01(\bR\vweekendFlag\x12)\n" +
	"\x10blocked_tca_flag\x18\x98\x03 \x01(\bR\x0eblockedTcaFlag\x128\n" +
	"\x18api_trade_available_flag\x18\x99\x03 \x01(\bR\x15apiTradeAvailableFlag\"?\n" +
	"\rShareResponse\x12.\n" +
	"\n" +
	"instrument\x18\x01 \x01(\v2\x0e.tinvest.ShareR\n" +
	"instrument\"B\n" +
	"\x0eSharesResponse\x120\n" +
	"\vinstruments\x18\x01 \x03(\v2\x0e.tinvest.ShareR\vinstruments\"\xdd\x13\n" +
	"\x04Bond\x12\x12\n" +
	"\x04figi\x18\x01 \x01(\tR\x04figi\x12\x16\n" +
	"\x06ticker\x18\x02 \x01(\tR\x06ticker\x12\x1d\n" +
	"\n" +
	"class_code\x18\x03 \x01(\tR\tclassCode\x12\x12\n" +
	"\x04isin\x18\x04 \x01(\tR\x04isin\x12\x10\n" +
	"\x03lot\x18\x05 \x01(\x05R\x03lot\x12\x1a\n" +
	"\bcurrency\x18\x06 \x01(\tR\bcurrency\x12,\n" +
	"\x05klong\x18\a \x01(\v2\x12.tinvest.QuotationB\x02\x18\x01R\x05klong\x12.\n" +
	"\x06kshort\x18\b \x01(\v2\x12.tinvest.QuotationB\x02\x18\x01R\x06kshort\x12(\n" +
	"\x05dlong\x18\t \x01(\v2\x12.tinvest.QuotationR\x05dlong\x12*\n" +
	"\x06dshort\x18\n" +
	" \x01(\v2\x12.tinvest.QuotationR\x06dshort\x12/\n" +
	"\tdlong_min\x18\v \x01(\v2\x12.tinvest.QuotationR\bdlongMin\x121\n" +
	"\n" +
	"dshort_min\x18\f \x01(\v2\x12.tinvest.QuotationR\tdshortMin\x12,\n" +
	"\x12short_enabled_flag\x18\r \x01(\bR\x10shortEnabledFlag\x12\x12\n" +
	"\x04name\x18\x0f \x01(\tR\x04name\x12\x1a\n" +
	"\bexchange\x18\x10 \x01(\tR\bexchange\x127\n" +
	"\x18coupon_quantity_per_year\x18\x11 \x01(\x05R\x15couponQuantityPerYear\x12?\n" +
	"\rmaturity_date\x18\x12 \x01(\v2\x1a.google.protobuf.TimestampR\fmaturityDate\x12-\n" +
	"\anominal\x18\x13 \x01(\v2\x13.tinvest.MoneyValueR\anominal\x12<\n" +
	"\x0finitial_nominal\x18\x14 \x01(\v2\x13.tinvest.MoneyValueR\x0einitialNominal\x12@\n" +
	"\x0estate_reg_date\x18\x15 \x01(\v2\x1a.google.protobuf.TimestampR\fstateRegDate\x12A\n" +
	"\x0eplacement_date\x18\x16 \x01(\v2\x1a.google.protobuf.TimestampR\rplacementDate\x12<\n" +
	"\x0fplacement_price\x18\x17 \x01(\v2\x13.tinvest.MoneyValueR\x0eplacementPrice\x120\n" +
	"\taci_value\x18\x18 \x01(\v2\x13.tinvest.MoneyValueR\baciValue\x12&\n" +
	"\x0fcountry_of_risk\x18\x19 \x01(\tR\rcountryOfRisk\x12/\n" +
	"\x14country_of_risk_name\x18\x1a \x01(\tR\x11countryOfRiskName\x12\x16\n" +
	"\x06sector\x18\x1b \x01(\tR\x06sector\x12\x1d\n" +
	"\n" +
	"issue_kind\x18\x1c \x01(\tR\tissueKind\x12\x1d\n" +
	"\n" +
	"issue_size\x18\x1d \x01(\x03R\tissueSize\x12&\n" +
	"\x0fissue_size_plan\x18\x1e \x01(\x03R\rissueSizePlan\x12E\n" +
	"\x0etrading_status\x18\x1f \x01(\x0e2\x1e.tinvest.SecurityTradingStatusR\rtradingStatus\x12\x19\n" +
	"\botc_flag\x18  \x01(\bR\aotcFlag\x12,\n" +
	"\x12buy_available_flag\x18! \x01(\bR\x10buyAvailableFlag\x12.\n" +
	"\x13sell_available_flag\x18\" \x01(\bR\x11sellAvailableFlag\x120\n" +
	"\x14floating_coupon_flag\x18# \x01(\bR\x12floatingCouponFlag\x12%\n" +
	"\x0eperpetual_flag\x18$ \x01(\bR\rperpetualFlag\x12+\n" +
	"\x11amortization_flag\x18% \x01(\bR\x10amortizationFlag\x12B\n" +
	"\x13min_price_increment\x18& \x01(\v2\x12.tinvest.QuotationR\x11minPriceIncrement\x127\n" +
	"\x18api_trade_available_flag\x18' \x01(\bR\x15apiTradeAvailableFlag\x12\x10\n" +
	"\x03uid\x18( \x01(\tR\x03uid\x12:\n" +
	"\rreal_exchange\x18) \x01(\x0e2\x15.tinvest.RealExchangeR\frealExchange\x12!\n" +
	"\fposition_uid\x18* \x01(\tR\vpositionUid\x12\x1b\n" +
	"\tasset_uid\x18+ \x01(\tR\bassetUid\x12 \n" +
	"\ffor_iis_flag\x183 \x01(\bR\n" +
	"forIisFlag\x123\n" +
	"\x16for_qual_investor_flag\x184 \x01(\bR\x13forQualInvestorFlag\x12!\n" +
	"\fweekend_flag\x185 \x01(\bR\vweekendFlag\x12(\n" +
	"\x10blocked_tca_flag\x186 \x01(\bR\x0eblockedTcaFlag\x12+\n" +
	"\x11subordinated_flag\x187 \x01(\bR\x10subordinatedFlag\x12%\n" +
	"\x0eliquidity_flag\x188 \x01(\bR\rliquidityFlag\x12O\n" +
	"\x16first_1min_candle_date\x18= \x01(\v2\x1a.google.protobuf.TimestampR\x13first1minCandleDate\x12O\n" +
	"\x16first_1day_candle_date\x18> \x01(\v2\x1a.google.protobuf.TimestampR\x13first1dayCandleDate\x121\n" +
	"\n" +
	"risk_level\x18? \x01(\x0e2\x12.tinvest.RiskLevelR\triskLevel\x12(\n" +
	"\x05brand\x18@ \x01(\v2\x12.tinvest.BrandDataR\x05brand\x12.\n" +
	"\tbond_type\x18A \x01(\x0e2\x11.tinvest.BondTypeR\bbondType\x127\n" +
	"\tcall_date\x18E \x01(\v2\x1a.google.protobuf.TimestampR\bcallDate\x125\n" +
	"\fdlong_client\x18Z \x01(\v2\x12.tinvest.QuotationR\vdlongClient\x127\n" +
	"\rdshort_client\x18[ \x01(\v2\x12.tinvest.QuotationR\fdshortClient\"\xcf\f\n" +
	"\bCurrency\x12\x12\n" +
	"\x04figi\x18\x01 \x01(\tR\x04figi\x12\x16\n" +
	"\x06ticker\x18\x02 \x01(\tR\x06ticker\x12\x1d\n" +
	"\n" +
	"class_code\x18\x03 \x01(\tR\tclassCode\x12\x12\n" +
	"\x04isin\x18\x04 \x01(\tR\x04isin\x12\x10\n" +
	"\x03lot\x18\x05 \x01(\x05R\x03lot\x12\x1a\n" +
	"\bcurrency\x18\x06 \x01(\tR\bcurrency\x12,\n" +
	"\x05klong\x18\a \x01(\v2\x12.tinvest.QuotationB\x02\x18\x01R\x05klong\x12.\n" +
	"\x06kshort\x18\b \x01(\v2\x12.tinvest.QuotationB\x02\x18\x01R\x06kshort\x12(\n" +
	"\x05dlong\x18\t \x01(\v2\x12.tinvest.QuotationR\x05dlong\x12*\n" +
	"\x06dshort\x18\n" +
	" \x01(\v2\x12.tinvest.QuotationR\x06dshort\x12/\n" +
	"\tdlong_min\x18\v \x01(\v2\x12.tinvest.QuotationR\bdlongMin\x121\n" +
	"\n" +
	"dshort_min\x18\f \x01(\v2\x12.tinvest.QuotationR\tdshortMin\x12,\n" +
	"\x12short_enabled_flag\x18\r \x01(\bR\x10shortEnabledFlag\x12\x12\n" +
	"\x04name\x18\x0f \x01(\tR\x04name\x12\x1a\n" +
	"\bexchange\x18\x10 \x01(\tR\bexchange\x12-\n" +
	"\anominal\x18\x11 \x01(\v2\x13.tinvest.MoneyValueR\anominal\x12&\n" +
	"\x0fcountry_of_risk\x18\x12 \x01(\tR\rcountryOfRisk\x12/\n" +
	"\x14country_of_risk_name\x18\x13 \x01(\tR\x11countryOfRiskName\x12E\n" +
	"\x0etrading_status\x18\x14 \x01(\x0e2\x1e.tinvest.SecurityTradingStatusR\rtradingStatus\x12\x19\n" +
	"\botc_flag\x18\x15 \x01(\bR\aotcFlag\x12,\n" +
	"\x12buy_available_flag\x18\x16 \x01(\bR\x10buyAvailableFlag\x12.\n" +
	"\x13sell_available_flag\x18\x17 \x01(\bR\x11sellAvailableFlag\x12*\n" +
	"\x11iso_currency_name\x18\x18 \x01(\tR\x0fisoCurrencyName\x12B\n" +
	"\x13min_price_increment\x18\x19 \x01(\v2\x12.tinvest.QuotationR\x11minPriceIncrement\x127\n" +
	"\x18api_trade_available_flag\x18\x1a \x01(\bR\x15apiTradeAvailableFlag\x12\x10\n" +
	"\x03uid\x18\x1b \x01(\tR\x03uid\x12:\n" +
	"\rreal_exchange\x18\x1c \x01(\x0e2\x15.tinvest.RealExchangeR\frealExchange\x12!\n" +
	"\fposition_uid\x18\x1d \x01(\tR\vpositionUid\x12 \n" +
	"\ffor_iis_flag\x18) \x01(\bR\n" +
	"forIisFlag\x123\n" +
	"\x16for_qual_investor_flag\x184 \x01(\bR\x13forQualInvestorFlag\x12!\n" +
	"\fweekend_flag\x185 \x01(\bR\vweekendFlag\x12(\n" +
	"\x10blocked_tca_flag\x186 \x01(\bR\x0eblockedTcaFlag\x12O\n" +
	"\x16first_1min_candle_date\x188 \x01(\v2\x1a.google.protobuf.TimestampR\x13first1minCandleDate\x12O\n" +
	"\x16first_1day_candle_date\x189 \x01(\v2\x1a.google.protobuf.TimestampR\x13first1dayCandleDate\x12(\n" +
	"\x05brand\x18< \x01(\v2\x12.tinvest.BrandDataR\x05brand\x125\n" +
	"\fdlong_client\x18Z \x01(\v2\x12.tinvest.QuotationR\vdlongClient\x127\n" +
	"\rdshort_client\x18[ \x01(\v2\x12.tinvest.QuotationR\fdshortClient\"\x9a\x0f\n" +
	"\x03Etf\x12\x12\n" +
	"\x04figi\x18\x01 \x01(\tR\x04figi\x12\x16\n" +
	"\x06ticker\x18\x02 \x01(\tR\x06ticker\x12\x1d\n" +
	"\n" +
	"class_code\x18\x03 \x01(\tR\tclassCode\x12\x12\n" +
	"\x04isin\x18\x04 \x01(\tR\x04isin\x12\x10\n" +
	"\x03lot\x18\x05 \x01(\x05R\x03lot\x12\x1a\n" +
	"\bcurrency\x18\x06 \x01(\tR\bcurrency\x12,\n" +
	"\x05klong\x18\a \x01(\v2\x12.tinvest.QuotationB\x02\x18\x01R\x05klong\x12.\n" +
	"\x06kshort\x18\b \x01(\v2\x12.tinvest.QuotationB\x02\x18\x01R\x06kshort\x12(\n" +
	"\x05dlong\x18\t \x01(\v2\x12.tinvest.QuotationR\x05dlong\x12*\n" +
	"\x06dshort\x18\n" +
	" \x01(\v2\x12.tinvest.QuotationR\x06dshort\x12/\n" +
	"\tdlong_min\x18\v \x01(\v2\x12.tinvest.QuotationR\bdlongMin\x121\n" +
	"\n" +
	"dshort_min\x18\f \x01(\v2\x12.tinvest.QuotationR\tdshortMin\x12,\n" +
	"\x12short_enabled_flag\x18\r \x01(\bR\x10shortEnabledFlag\x12\x12\n" +
	"\x04name\x18\x0f \x01(\tR\x04name\x12\x1a\n" +
	"\bexchange\x18\x10 \x01(\tR\bexchange\x12=\n" +
	"\x10fixed_commission\x18\x11 \x01(\v2\x12.tinvest.QuotationR\x0ffixedCommission\x12\x1d\n" +
	"\n" +
	"focus_type\x18\x12 \x01(\tR\tfocusType\x12?\n" +
	"\rreleased_date\x18\x13 \x01(\v2\x1a.google.protobuf.TimestampR\freleasedDate\x121\n" +
	"\n" +
	"num_shares\x18\x14 \x01(\v2\x12.tinvest.QuotationR\tnumShares\x12&\n" +
	"\x0fcountry_of_risk\x18\x15 \x01(\tR\rcountryOfRisk\x12/\n" +
	"\x14country_of_risk_name\x18\x16 \x01(\tR\x11countryOfRiskName\x12\x16\n" +
	"\x06sector\x18\x17 \x01(\tR\x06sector\x12)\n" +
	"\x10rebalancing_freq\x18\x18 \x01(\tR\x0frebalancingFreq\x12E\n" +
	"\x0etrading_status\x18\x19 \x01(\x0e2\x1e.tinvest.SecurityTradingStatusR\rtradingStatus\x12\x19\n" +
	"\botc_flag\x18\x1a \x01(\bR\aotcFlag\x12,\n" +
	"\x12buy_available_flag\x18\x1b \x01(\bR\x10buyAvailableFlag\x12.\n" +
	"\x13sell_available_flag\x18\x1c \x01(\bR\x11sellAvailableFlag\x12B\n" +
	"\x13min_price_increment\x18\x1d \x01(\v2\x12.tinvest.QuotationR\x11minPriceIncrement\x127\n" +
	"\x18api_trade_available_flag\x18\x1e \x01(\bR\x15apiTradeAvailableFlag\x12\x10\n" +
	"\x03uid\x18\x1f \x01(\tR\x03uid\x12:\n" +
	"\rreal_exchange\x18  \x01(\x0e2\x15.tinvest.RealExchangeR\frealExchange\x12!\n" +
	"\fposition_uid\x18! \x01(\tR\vpositionUid\x12\x1b\n" +
	"\tasset_uid\x18\" \x01(\tR\bassetUid\x12P\n" +
	"\x13instrument_exchange\x18# \x01(\x0e2\x1f.tinvest.InstrumentExchangeTypeR\x12instrumentExchange\x12 \n" +
	"\ffor_iis_flag\x18) \x01(\bR\n" +
	"forIisFlag\x123\n" +
	"\x16for_qual_investor_flag\x18* \x01(\bR\x13forQualInvestorFlag\x12!\n" +
	"\fweekend_flag\x18+ \x01(\bR\vweekendFlag\x12(\n" +
	"\x10blocked_tca_flag\x18, \x01(\bR\x0eblockedTcaFlag\x12%\n" +
	"\x0eliquidity_flag\x18- \x01(\bR\rliquidityFlag\x12O\n" +
	"\x16first_1min_candle_date\x188 \x01(\v2\x1a.google.protobuf.TimestampR\x13first1minCandleDate\x12O\n" +
	"\x16first_1day_candle_date\x189 \x01(\v2\x1a.google.protobuf.TimestampR\x13first1dayCandleDate\x12(\n" +
	"\x05brand\x18< \x01(\v2\x12.tinvest.BrandDataR\x05brand\x125\n" +
	"\fdlong_client\x18Z \x01(\v2\x12.tinvest.QuotationR\vdlongClient\x127\n" +
	"\rdshort_client\x18[ \x01(\v2\x12.tinvest.QuotationR\fdshortClient\"\x82\x11\n" +
	"\x06Future\x12\x12\n" +
	"\x04figi\x18\x01 \x01(\tR\x04figi\x12\x16\n" +
	"\x06ticker\x18\x02 \x01(\tR\x06ticker\x12\x1d\n" +
	"\n" +
	"class_code\x18\x03 \x01(\tR\tclassCode\x12\x10\n" +
	"\x03lot\x18\x04 \x01(\x05R\x03lot\x12\x1a\n" +
	"\bcurrency\x18\x05 \x01(\tR\bcurrency\x12,\n" +
	"\x05klong\x18\x06 \x01(\v2\x12.tinvest.QuotationB\x02\x18\x01R\x05klong\x12.\n" +
	"\x06kshort\x18\a \x01(\v2\x12.tinvest.QuotationB\x02\x18\x01R\x06kshort\x12(\n" +
	"\x05dlong\x18\b \x01(\v2\x12.tinvest.QuotationR\x05dlong\x12*\n" +
	"\x06dshort\x18\t \x01(\v2\x12.tinvest.QuotationR\x06dshort\x12/\n" +
	"\tdlong_min\x18\n" +
	" \x01(\v2\x12.tinvest.QuotationR\bdlongMin\x121\n" +
	"\n" +
	"dshort_min\x18\v \x01(\v2\x12.tinvest.QuotationR\tdshortMin\x12,\n" +
	"\x12short_enabled_flag\x18\f \x01(\bR\x10shortEnabledFlag\x12\x12\n" +
	"\x04name\x18\r \x01(\tR\x04name\x12\x1a\n" +
	"\bexchange\x18\x0e \x01(\tR\bexchange\x12D\n" +
	"\x10first_trade_date\x18\x0f \x01(\v2\x1a.google.protobuf.TimestampR\x0efirstTradeDate\x12B\n" +
	"\x0flast_trade_date\x18\x10 \x01(\v2\x1a.google.protobuf.TimestampR\rlastTradeDate\x12!\n" +
	"\ffutures_type\x18\x11 \x01(\tR\vfuturesType\x12\x1d\n" +
	"\n" +
	"asset_type\x18\x12 \x01(\tR\tassetType\x12\x1f\n" +
	"\vbasic_asset\x18\x13 \x01(\tR\n" +
	"basicAsset\x12<\n" +
	"\x10basic_asset_size\x18\x14 \x01(\v2\x12.tinvest.QuotationR\x0ebasicAssetSize\x12&\n" +
	"\x0fcountry_of_risk\x18\x15 \x01(\tR\rcountryOfRisk\x12/\n" +
	"\x14country_of_risk_name\x18\x16 \x01(\tR\x11countryOfRiskName\x12\x16\n" +
	"\x06sector\x18\x17 \x01(\tR\x06sector\x12C\n" +
	"\x0fexpiration_date\x18\x18 \x01(\v2\x1a.google.protobuf.TimestampR\x0eexpirationDate\x12E\n" +
	"\x0etrading_status\x18\x19 \x01(\x0e2\x1e.tinvest.SecurityTradingStatusR\rtradingStatus\x12\x19\n" +
	"\botc_flag\x18\x1a \x01(\bR\aotcFlag\x12,\n" +
	"\x12buy_available_flag\x18\x1b \x01(\bR\x10buyAvailableFlag\x12.\n" +
	"\x13sell_available_flag\x18\x1c \x01(\bR\x11sellAvailableFlag\x12B\n" +
	"\x13min_price_increment\x18\x1d \x01(\v2\x12.tinvest.QuotationR\x11minPriceIncrement\x127\n" +
	"\x18api_trade_available_flag\x18\x1e \x01(\bR\x15apiTradeAvailableFlag\x12\x10\n" +
	"\x03uid\x18\x1f \x01(\tR\x03uid\x12:\n" +
	"\rreal_exchange\x18  \x01(\x0e2\x15.tinvest.RealExchangeR\frealExchange\x12!\n" +
	"\fposition_uid\x18! \x01(\tR\vpositionUid\x127\n" +
	"\x18basic_asset_position_uid\x18\" \x01(\tR\x15basicAssetPositionUid\x12 \n" +
	"\ffor_iis_flag\x18) \x01(\bR\n" +
	"forIisFlag\x123\n" +
	"\x16for_qual_investor_flag\x18* \x01(\bR\x13forQualInvestorFlag\x12!\n" +
	"\fweekend_flag\x18+ \x01(\bR\vweekendFlag\x12(\n" +
	"\x10blocked_tca_flag\x18, \x01(\bR\x0eblockedTcaFlag\x12O\n" +
	"\x16first_1min_candle_date\x188 \x01(\v2\x1a.google.protobuf.TimestampR\x13first1minCandleDate\x12O\n" +
	"\x16first_1day_candle_date\x189 \x01(\v2\x1a.google.protobuf.TimestampR\x13first1dayCandleDate\x12F\n" +
	"\x15initial_margin_on_buy\x18= \x01(\v2\x13.tinvest.MoneyValueR\x12initialMarginOnBuy\x12H\n" +
	"\x16initial_margin_on_sell\x18> \x01(\v2\x13.tinvest.MoneyValueR\x13initialMarginOnSell\x12O\n" +
	"\x1amin_price_increment_amount\x18? \x01(\v2\x12.tinvest.QuotationR\x17minPriceIncrementAmount\x12(\n" +
	"\x05brand\x18@ \x01(\v2\x12.tinvest.BrandDataR\x05brand\x125\n" +
	"\fdlong_client\x18Z \x01(\v2\x12.tinvest.QuotationR\vdlongClient\x127\n" +
	"\rdshort_client\x18[ \x01(\v2\x12.tinvest.QuotationR\fdshortClient\"\xa5\x0f\n" +
	"\x05Share\x12\x12\n" +
	"\x04figi\x18\x01 \x01(\tR\x04figi\x12\x16\n" +
	"\x06ticker\x18\x02 \x01(\tR\x06ticker\x12\x1d\n" +
	"\n" +
	"class_code\x18\x03 \x01(\tR\tclassCode\x12\x12\n" +
	"\x04isin\x18\x04 \x01(\tR\x04isin\x12\x10\n" +
	"\x03lot\x18\x05 \x01(\x05R\x03lot\x12\x1a\n" +
	"\bcurrency\x18\x06 \x01(\tR\bcurrency\x12,\n" +
	"\x05klong\x18\a \x01(\v2\x12.tinvest.QuotationB\x02\x18\x01R\x05klong\x12.\n" +
	"\x06kshort\x18\b \x01(\v2\x12.tinvest.QuotationB\x02\x18\x01R\x06kshort\x12(\n" +
	"\x05dlong\x18\t \x01(\v2\x12.tinvest.QuotationR\x05dlong\x12*\n" +
	"\x06dshort\x18\n" +
	" \x01(\v2\x12.tinvest.QuotationR\x06dshort\x12/\n" +
	"\tdlong_min\x18\v \x01(\v2\x12.tinvest.QuotationR\bdlongMin\x121\n" +
	"\n" +
	"dshort_min\x18\f \x01(\v2\x12.tinvest.QuotationR\tdshortMin\x12,\n" +
	"\x12short_enabled_flag\x18\r \x01(\bR\x10shortEnabledFlag\x12\x12\n" +
	"\x04name\x18\x0f \x01(\tR\x04name\x12\x1a\n" +
	"\bexchange\x18\x10 \x01(\tR\bexchange\x125\n" +
	"\bipo_date\x18\x11 \x01(\v2\x1a.google.protobuf.TimestampR\aipoDate\x12\x1d\n" +
	"\n" +
	"issue_size\x18\x12 \x01(\x03R\tissueSize\x12&\n" +
	"\x0fcountry_of_risk\x18\x13 \x01(\tR\rcountryOfRisk\x12/\n" +
	"\x14country_of_risk_name\x18\x14 \x01(\tR\x11countryOfRiskName\x12\x16\n" +
	"\x06sector\x18\x15 \x01(\tR\x06sector\x12&\n" +
	"\x0fissue_size_plan\x18\x16 \x01(\x03R\rissueSizePlan\x12-\n" +
	"\anominal\x18\x17 \x01(\v2\x13.tinvest.MoneyValueR\anominal\x12E\n" +
	"\x0etrading_status\x18\x19 \x01(\x0e2\x1e.tinvest.SecurityTradingStatusR\rtradingStatus\x12\x19\n" +
	"\botc_flag\x18\x1a \x01(\bR\aotcFlag\x12,\n" +
	"\x12buy_available_flag\x18\x1b \x01(\bR\x10buyAvailableFlag\x12.\n" +
	"\x13sell_available_flag\x18\x1c \x01(\bR\x11sellAvailableFlag\x12$\n" +
	"\x0ediv_yield_flag\x18\x1d \x01(\bR\fdivYieldFlag\x121\n" +
	"\n" +
	"share_type\x18\x1e \x01(\x0e2\x12.tinvest.ShareTypeR\tshareType\x12B\n" +
	"\x13min_price_increment\x18\x1f \x01(\v2\x12.tinvest.QuotationR\x11minPriceIncrement\x127\n" +
	"\x18api_trade_available_flag\x18  \x01(\bR\x15apiTradeAvailableFlag\x12\x10\n" +
	"\x03uid\x18! \x01(\tR\x03uid\x12:\n" +
	"\rreal_exchange\x18\" \x01(\x0e2\x15.tinvest.RealExchangeR\frealExchange\x12!\n" +
	"\fposition_uid\x18# \x01(\tR\vpositionUid\x12\x1b\n" +
	"\tasset_uid\x18$ \x01(\tR\bassetUid\x12P\n" +
	"\x13instrument_exchange\x18% \x01(\x0e2\x1f.tinvest.InstrumentExchangeTypeR\x12instrumentExchange\x12 \n" +
	"\ffor_iis_flag\x18. \x01(\bR\n" +
	"forIisFlag\x123\n" +
	"\x16for_qual_investor_flag\x18/ \x01(\bR\x13forQualInvestorFlag\x12!\n" +
	"\fweekend_flag\x180 \x01(\bR\vweekendFlag\x12(\n" +
	"\x10blocked_tca_flag\x181 \x01(\bR\x0eblockedTcaFlag\x12%\n" +
	"\x0eliquidity_flag\x182 \x01(\bR\rliquidityFlag\x12O\n" +
	"\x16first_1min_candle_date\x188 \x01(\v2\x1a.google.protobuf.TimestampR\x13first1minCandleDate\x12O\n" +
	"\x16first_1day_candle_date\x189 \x01(\v2\x1a.google.protobuf.TimestampR\x13first1dayCandleDate\x12(\n" +
	"\x05brand\x18< \x01(\v2\x12.tinvest.BrandDataR\x05brand\x125\n" +
	"\fdlong_client\x18Z \x01(\v2\x12.tinvest.QuotationR\vdlongClient\x127\n" +
	"\rdshort_client\x18[ \x01(\v2\x12.tinvest.QuotationR\fdshortClient\"\xc7\x01\n" +
	"\x1aGetAccruedInterestsRequest\x12\x16\n" +
	"\x04figi\x18\x01 \x01(\tB\x02\x18\x01R\x04figi\x124\n" +
	"\x04from\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampB\x04\xe2A\x01\x02R\x04from\x120\n" +
	"\x02to\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampB\x04\xe2A\x01\x02R\x02to\x12)\n" +
	"\rinstrument_id\x18\x04 \x01(\tB\x04\xe2A\x01\x02R\finstrumentId\"d\n" +
	"\x1bGetAccruedInterestsResponse\x12E\n" +
	"\x11accrued_interests\x18\x01 \x03(\v2\x18.tinvest.AccruedInterestR\x10accruedInterests\"\xd2\x01\n" +
	"\x0fAccruedInterest\x12.\n" +
	"\x04date\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\x04date\x12(\n" +
	"\x05value\x18\x02 \x01(\v2\x12.tinvest.QuotationR\x05value\x127\n" +
	"\rvalue_percent\x18\x03 \x01(\v2\x12.tinvest.QuotationR\fvaluePercent\x12,\n" +
	"\anominal\x18\x04 \x01(\v2\x12.tinvest.QuotationR\anominal\"\\\n" +
	"\x17GetFuturesMarginRequest\x12\x16\n" +
	"\x04figi\x18\x01 \x01(\tB\x02\x18\x01R\x04figi\x12)\n" +
	"\rinstrument_id\x18\x04 \x01(\tB\x04\xe2A\x01\x02R\finstrumentId\"\xc1\x02\n" +
	"\x18GetFuturesMarginResponse\x12F\n" +
	"\x15initial_margin_on_buy\x18\x01 \x01(\v2\x13.tinvest.MoneyValueR\x12initialMarginOnBuy\x12H\n" +
	"\x16initial_margin_on_sell\x18\x02 \x01(\v2\x13.tinvest.MoneyValueR\x13initialMarginOnSell\x12B\n" +
	"\x13min_price_increment\x18\x03 \x01(\v2\x12.tinvest.QuotationR\x11minPriceIncrement\x12O\n" +
	"\x1amin_price_increment_amount\x18\x04 \x01(\v2\x12.tinvest.QuotationR\x17minPriceIncrementAmount\"I\n" +
	"\x12InstrumentResponse\x123\n" +
	"\n" +
	"instrument\x18\x01 \x01(\v2\x13.tinvest.InstrumentR\n" +
	"instrument\"\x80\r\n" +
	"\n" +
	"Instrument\x12\x12\n" +
	"\x04figi\x18\x01 \x01(\tR\x04figi\x12\x16\n" +
	"\x06ticker\x18\x02 \x01(\tR\x06ticker\x12\x1d\n" +
	"\n" +
	"class_code\x18\x03 \x01(\tR\tclassCode\x12\x12\n" +
	"\x04isin\x18\x04 \x01(\tR\x04isin\x12\x10\n" +
	"\x03lot\x18\x05 \x01(\x05R\x03lot\x12\x1a\n" +
	"\bcurrency\x18\x06 \x01(\tR\bcurrency\x12,\n" +
	"\x05klong\x18\a \x01(\v2\x12.tinvest.QuotationB\x02\x18\x01R\x05klong\x12.\n" +
	"\x06kshort\x18\b \x01(\v2\x12.tinvest.QuotationB\x02\x18\x01R\x06kshort\x12(\n" +
	"\x05dlong\x18\t \x01(\v2\x12.tinvest.QuotationR\x05dlong\x12*\n" +
	"\x06dshort\x18\n" +
	" \x01(\v2\x12.tinvest.QuotationR\x06dshort\x12/\n" +
	"\tdlong_min\x18\v \x01(\v2\x12.tinvest.QuotationR\bdlongMin\x121\n" +
	"\n" +
	"dshort_min\x18\f \x01(\v2\x12.tinvest.QuotationR\tdshortMin\x12,\n" +
	"\x12short_enabled_flag\x18\r \x01(\bR\x10shortEnabledFlag\x12\x12\n" +
	"\x04name\x18\x0e \x01(\tR\x04name\x12\x1a\n" +
	"\bexchange\x18\x0f \x01(\tR\bexchange\x12&\n" +
	"\x0fcountry_of_risk\x18\x10 \x01(\tR\rcountryOfRisk\x12/\n" +
	"\x14country_of_risk_name\x18\x11 \x01(\tR\x11countryOfRiskName\x12'\n" +
	"\x0finstrument_type\x18\x12 \x01(\tR\x0einstrumentType\x12E\n" +
	"\x0etrading_status\x18\x13 \x01(\x0e2\x1e.tinvest.SecurityTradingStatusR\rtradingStatus\x12\x19\n" +
	"\botc_flag\x18\x14 \x01(\bR\aotcFlag\x12,\n" +
	"\x12buy_available_flag\x18\x15 \x01(\bR\x10buyAvailableFlag\x12.\n" +
	"\x13sell_available_flag\x18\x16 \x01(\bR\x11sellAvailableFlag\x12B\n" +
	"\x13min_price_increment\x18\x17 \x01(\v2\x12.tinvest.QuotationR\x11minPriceIncrement\x127\n" +
	"\x18api_trade_available_flag\x18\x18 \x01(\bR\x15apiTradeAvailableFlag\x12\x10\n" +
	"\x03uid\x18\x19 \x01(\tR\x03uid\x12:\n" +
	"\rreal_exchange\x18\x1a \x01(\x0e2\x15.tinvest.RealExchangeR\frealExchange\x12!\n" +
	"\fposition_uid\x18\x1b \x01(\tR\vpositionUid\x12\x1b\n" +
	"\tasset_uid\x18\x1c \x01(\tR\bassetUid\x12 \n" +
	"\ffor_iis_flag\x18$ \x01(\bR\n" +
	"forIisFlag\x123\n" +
	"\x16for_qual_investor_flag\x18% \x01(\bR\x13forQualInvestorFlag\x12!\n" +
	"\fweekend_flag\x18& \x01(\bR\vweekendFlag\x12(\n" +
	"\x10blocked_tca_flag\x18' \x01(\bR\x0eblockedTcaFlag\x12@\n" +
	"\x0finstrument_kind\x18( \x01(\x0e2\x17.tinvest.InstrumentTypeR\x0einstrumentKind\x12O\n" +
	"\x16first_1min_candle_date\x188 \x01(\v2\x1a.google.protobuf.TimestampR\x13first1minCandleDate\x12O\n" +
	"\x16first_1day_candle_date\x189 \x01(\v2\x1a.google.protobuf.TimestampR\x13first1dayCandleDate\x12(\n" +
	"\x05brand\x18< \x01(\v2\x12.tinvest.BrandDataR\x05brand\x126\n" +
	"\fdlong_client\x18\xea\x03 \x01(\v2\x12.tinvest.QuotationR\vdlongClient\x128\n" +
	"\rdshort_client\x18\xeb\x03 \x01(\v2\x12.tinvest.QuotationR\fdshortClient\"\xce\x01\n" +
	"\x13GetDividendsRequest\x12\x16\n" +
	"\x04figi\x18\x01 \x01(\tB\x02\x18\x01R\x04figi\x123\n" +
	"\x04from\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampH\x00R\x04from\x88\x01\x01\x12/\n" +
	"\x02to\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampH\x01R\x02to\x88\x01\x01\x12)\n" +
	"\rinstrument_id\x18\x04 \x01(\tB\x04\xe2A\x01\x02R\finstrumentIdB\a\n" +
	"\x05_fromB\x05\n" +
	"\x03_to\"G\n" +
	"\x14GetDividendsResponse\x12/\n" +
	"\tdividends\x18\x01 \x03(\v2\x11.tinvest.DividendR\tdividends\"\xaa\x04\n" +
	"\bDividend\x126\n" +
	"\fdividend_net\x18\x01 \x01(\v2\x13.tinvest.MoneyValueR\vdividendNet\x12=\n" +
	"\fpayment_date\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\vpaymentDate\x12?\n" +
	"\rdeclared_date\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\fdeclaredDate\x12>\n" +
	"\rlast_buy_date\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\vlastBuyDate\x12#\n" +
	"\rdividend_type\x18\x05 \x01(\tR\fdividendType\x12;\n" +
	"\vrecord_date\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"recordDate\x12\x1e\n" +
	"\n" +
	"regularity\x18\a \x01(\tR\n" +
	"regularity\x124\n" +
	"\vclose_price\x18\b \x01(\v2\x13.tinvest.MoneyValueR\n" +
	"closePrice\x123\n" +
	"\vyield_value\x18\t \x01(\v2\x12.tinvest.QuotationR\n" +
	"yieldValue\x129\n" +
	"\n" +
	"created_at\x18\n" +
	" \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\"$\n" +
	"\fAssetRequest\x12\x14\n" +
	"\x02id\x18\x01 \x01(\tB\x04\xe2A\x01\x02R\x02id\"9\n" +
	"\rAssetResponse\x12(\n" +
	"\x05asset\x18\x01 \x01(\v2\x12.tinvest.AssetFullR\x05asset\"\xcd\x01\n" +
	"\rAssetsRequest\x12E\n" +
	"\x0finstrument_type\x18\x01 \x01(\x0e2\x17.tinvest.InstrumentTypeH\x00R\x0einstrumentType\x88\x01\x01\x12K\n" +
	"\x11instrument_status\x18\x02 \x01(\x0e2\x19.tinvest.InstrumentStatusH\x01R\x10instrumentStatus\x88\x01\x01B\x12\n" +
	"\x10_instrument_typeB\x14\n" +
	"\x12_instrument_status\"8\n" +
	"\x0eAssetsResponse\x12&\n" +
	"\x06assets\x18\x01 \x03(\v2\x0e.tinvest.AssetR\x06assets\"\xae\x05\n" +
	"\tAssetFull\x12\x10\n" +
	"\x03uid\x18\x01 \x01(\tR\x03uid\x12&\n" +
	"\x04type\x18\x02 \x01(\x0e2\x12.tinvest.AssetTypeR\x04type\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12\x1d\n" +
	"\n" +
	"name_brief\x18\x04 \x01(\tR\tnameBrief\x12 \n" +
	"\vdescription\x18\x05 \x01(\tR\vdescription\x129\n" +
	"\n" +
	"deleted_at\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\tdeletedAt\x12%\n" +
	"\x0erequired_tests\x18\a \x03(\tR\rrequiredTests\x124\n" +
	"\bcurrency\x18\b \x01(\v2\x16.tinvest.AssetCurrencyH\x00R\bcurrency\x124\n" +
	"\bsecurity\x18\t \x01(\v2\x16.tinvest.AssetSecurityH\x00R\bsecurity\x12 \n" +
	"\fgos_reg_code\x18\n" +
	" \x01(\tR\n" +
	"gosRegCode\x12\x10\n" +
	"\x03cfi\x18\v \x01(\tR\x03cfi\x12\x19\n" +
	"\bcode_nsd\x18\f \x01(\tR\acodeNsd\x12\x16\n" +
	"\x06status\x18\r \x01(\tR\x06status\x12$\n" +
	"\x05brand\x18\x0e \x01(\v2\x0e.tinvest.BrandR\x05brand\x129\n" +
	"\n" +
	"updated_at\x18\x0f \x01(\v2\x1a.google.protobuf.TimestampR\tupdatedAt\x12\x17\n" +
	"\abr_code\x18\x10 \x01(\tR\x06brCode\x12 \n" +
	"\fbr_code_name\x18\x11 \x01(\tR\n" +
	"brCodeName\x12:\n" +
	"\vinstruments\x18\x12 \x03(\v2\x18.tinvest.AssetInstrumentR\vinstrumentsB\x05\n" +
	"\x03ext\"\x91\x01\n" +
	"\x05Asset\x12\x10\n" +
	"\x03uid\x18\x01 \x01(\tR\x03uid\x12&\n" +
	"\x04type\x18\x02 \x01(\x0e2\x12.tinvest.AssetTypeR\x04type\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12:\n" +
	"\vinstruments\x18\x04 \x03(\v2\x18.tinvest.AssetInstrumentR\vinstruments\"4\n" +
	"\rAssetCurrency\x12#\n" +
	"\rbase_currency\x18\x01 \x01(\tR\fbaseCurrency\"\x89\x03\n" +
	"\rAssetSecurity\x12\x12\n" +
	"\x04isin\x18\x01 \x01(\tR\x04isin\x12\x12\n" +
	"\x04type\x18\x02 \x01(\tR\x04type\x12@\n" +
	"\x0finstrument_kind\x18\n" +
	" \x01(\x0e2\x17.tinvest.InstrumentTypeR\x0einstrumentKind\x12+\n" +
	"\x05share\x18\x03 \x01(\v2\x13.tinvest.AssetShareH\x00R\x05share\x12(\n" +
	"\x04bond\x18\x04 \x01(\v2\x12.tinvest.AssetBondH\x00R\x04bond\x121\n" +
	"\x02sp\x18\x05 \x01(\v2\x1f.tinvest.AssetStructuredProductH\x00R\x02sp\x12%\n" +
	"\x03etf\x18\x06 \x01(\v2\x11.tinvest.AssetEtfH\x00R\x03etf\x12V\n" +
	"\x14clearing_certificate\x18\a \x01(\v2!.tinvest.AssetClearingCertificateH\x00R\x13clearingCertificateB\x05\n" +
	"\x03ext\"\xe2\x05\n" +
	"\n" +
	"AssetShare\x12&\n" +
	"\x04type\x18\x01 \x01(\x0e2\x12.tinvest.ShareTypeR\x04type\x121\n" +
	"\n" +
	"issue_size\x18\x02 \x01(\v2\x12.tinvest.QuotationR\tissueSize\x12,\n" +
	"\anominal\x18\x03 \x01(\v2\x12.tinvest.QuotationR\anominal\x12)\n" +
	"\x10nominal_currency\x18\x04 \x01(\tR\x0fnominalCurrency\x12#\n" +
	"\rprimary_index\x18\x05 \x01(\tR\fprimaryIndex\x127\n" +
	"\rdividend_rate\x18\x06 \x01(\v2\x12.tinvest.QuotationR\fdividendRate\x120\n" +
	"\x14preferred_share_type\x18\a \x01(\tR\x12preferredShareType\x125\n" +
	"\bipo_date\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\aipoDate\x12?\n" +
	"\rregistry_date\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\fregistryDate\x12$\n" +
	"\x0ediv_yield_flag\x18\n" +
	" \x01(\bR\fdivYieldFlag\x12\x1d\n" +
	"\n" +
	"issue_kind\x18\v \x01(\tR\tissueKind\x12A\n" +
	"\x0eplacement_date\x18\f \x01(\v2\x1a.google.protobuf.TimestampR\rplacementDate\x12\x1f\n" +
	"\vrepres_isin\x18\r \x01(\tR\n" +
	"represIsin\x12:\n" +
	"\x0fissue_size_plan\x18\x0e \x01(\v2\x12.tinvest.QuotationR\rissueSizePlan\x123\n" +
	"\vtotal_float\x18\x0f \x01(\v2\x12.tinvest.QuotationR\n" +
	"totalFloat\"\x8e\b\n" +
	"\tAssetBond\x12;\n" +
	"\x0fcurrent_nominal\x18\x01 \x01(\v2\x12.tinvest.QuotationR\x0ecurrentNominal\x12\x1f\n" +
	"\vborrow_name\x18\x02 \x01(\tR\n" +
	"borrowName\x121\n" +
	"\n" +
	"issue_size\x18\x03 \x01(\v2\x12.tinvest.QuotationR\tissueSize\x12,\n" +
	"\anominal\x18\x04 \x01(\v2\x12.tinvest.QuotationR\anominal\x12)\n" +
	"\x10nominal_currency\x18\x05 \x01(\tR\x0fnominalCurrency\x12\x1d\n" +
	"\n" +
	"issue_kind\x18\x06 \x01(\tR\tissueKind\x12#\n" +
	"\rinterest_kind\x18\a \x01(\tR\finterestKind\x127\n" +
	"\x18coupon_quantity_per_year\x18\b \x01(\x05R\x15couponQuantityPerYear\x120\n" +
	"\x14indexed_nominal_flag\x18\t \x01(\bR\x12indexedNominalFlag\x12+\n" +
	"\x11subordinated_flag\x18\n" +
	" \x01(\bR\x10subordinatedFlag\x12'\n" +
	"\x0fcollateral_flag\x18\v \x01(\bR\x0ecollateralFlag\x12\"\n" +
	"\rtax_free_flag\x18\f \x01(\bR\vtaxFreeFlag\x12+\n" +
	"\x11amortization_flag\x18\r \x01(\bR\x10amortizationFlag\x120\n" +
	"\x14floating_coupon_flag\x18\x0e \x01(\bR\x12floatingCouponFlag\x12%\n" +
	"\x0eperpetual_flag\x18\x0f \x01(\bR\rperpetualFlag\x12?\n" +
	"\rmaturity_date\x18\x10 \x01(\v2\x1a.google.protobuf.TimestampR\fmaturityDate\x12)\n" +
	"\x10return_condition\x18\x11 \x01(\tR\x0freturnCondition\x12@\n" +
	"\x0estate_reg_date\x18\x12 \x01(\v2\x1a.google.protobuf.TimestampR\fstateRegDate\x12A\n" +
	"\x0eplacement_date\x18\x13 \x01(\v2\x1a.google.protobuf.TimestampR\rplacementDate\x12;\n" +
	"\x0fplacement_price\x18\x14 \x01(\v2\x12.tinvest.QuotationR\x0eplacementPrice\x12:\n" +
	"\x0fissue_size_plan\x18\x15 \x01(\v2\x12.tinvest.QuotationR\rissueSizePlan\"\x90\x05\n" +
	"\x16AssetStructuredProduct\x12\x1f\n" +
	"\vborrow_name\x18\x01 \x01(\tR\n" +
	"borrowName\x12,\n" +
	"\anominal\x18\x02 \x01(\v2\x12.tinvest.QuotationR\anominal\x12)\n" +
	"\x10nominal_currency\x18\x03 \x01(\tR\x0fnominalCurrency\x122\n" +
	"\x04type\x18\x04 \x01(\x0e2\x1e.tinvest.StructuredProductTypeR\x04type\x12'\n" +
	"\x0flogic_portfolio\x18\x05 \x01(\tR\x0elogicPortfolio\x121\n" +
	"\n" +
	"asset_type\x18\x06 \x01(\x0e2\x12.tinvest.AssetTypeR\tassetType\x12\x1f\n" +
	"\vbasic_asset\x18\a \x01(\tR\n" +
	"basicAsset\x129\n" +
	"\x0esafety_barrier\x18\b \x01(\v2\x12.tinvest.QuotationR\rsafetyBarrier\x12?\n" +
	"\rmaturity_date\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\fmaturityDate\x12:\n" +
	"\x0fissue_size_plan\x18\n" +
	" \x01(\v2\x12.tinvest.QuotationR\rissueSizePlan\x121\n" +
	"\n" +
	"issue_size\x18\v \x01(\v2\x12.tinvest.QuotationR\tissueSize\x12A\n" +
	"\x0eplacement_date\x18\f \x01(\v2\x1a.google.protobuf.TimestampR\rplacementDate\x12\x1d\n" +
	"\n" +
	"issue_kind\x18\r \x01(\tR\tissueKind\"\xe3\v\n" +
	"\bAssetEtf\x127\n" +
	"\rtotal_expense\x18\x01 \x01(\v2\x12.tinvest.QuotationR\ftotalExpense\x123\n" +
	"\vhurdle_rate\x18\x02 \x01(\v2\x12.tinvest.QuotationR\n" +
	"hurdleRate\x12;\n" +
	"\x0fperformance_fee\x18\x03 \x01(\v2\x12.tinvest.QuotationR\x0eperformanceFee\x12=\n" +
	"\x10fixed_commission\x18\x04 \x01(\v2\x12.tinvest.QuotationR\x0ffixedCommission\x12!\n" +
	"\fpayment_type\x18\x05 \x01(\tR\vpaymentType\x12%\n" +
	"\x0ewatermark_flag\x18\x06 \x01(\bR\rwatermarkFlag\x123\n" +
	"\vbuy_premium\x18\a \x01(\v2\x12.tinvest.QuotationR\n" +
	"buyPremium\x127\n" +
	"\rsell_discount\x18\b \x01(\v2\x12.tinvest.QuotationR\fsellDiscount\x12)\n" +
	"\x10rebalancing_flag\x18\t \x01(\bR\x0frebalancingFlag\x12)\n" +
	"\x10rebalancing_freq\x18\n" +
	" \x01(\tR\x0frebalancingFreq\x12'\n" +
	"\x0fmanagement_type\x18\v \x01(\tR\x0emanagementType\x12#\n" +
	"\rprimary_index\x18\f \x01(\tR\fprimaryIndex\x12\x1d\n" +
	"\n" +
	"focus_type\x18\r \x01(\tR\tfocusType\x12%\n" +
	"\x0eleveraged_flag\x18\x0e \x01(\bR\rleveragedFlag\x12/\n" +
	"\tnum_share\x18\x0f \x01(\v2\x12.tinvest.QuotationR\bnumShare\x12\x1d\n" +
	"\n" +
	"ucits_flag\x18\x10 \x01(\bR\tucitsFlag\x12?\n" +
	"\rreleased_date\x18\x11 \x01(\v2\x1a.google.protobuf.TimestampR\freleasedDate\x12 \n" +
	"\vdescription\x18\x12 \x01(\tR\vdescription\x12:\n" +
	"\x19primary_index_description\x18\x13 \x01(\tR\x17primaryIndexDescription\x122\n" +
	"\x15primary_index_company\x18\x14 \x01(\tR\x13primaryIndexCompany\x12F\n" +
	"\x15index_recovery_period\x18\x15 \x01(\v2\x12.tinvest.QuotationR\x13indexRecoveryPeriod\x12\x1b\n" +
	"\tinav_code\x18\x16 \x01(\tR\binavCode\x12$\n" +
	"\x0ediv_yield_flag\x18\x17 \x01(\bR\fdivYieldFlag\x12A\n" +
	"\x12expense_commission\x18\x18 \x01(\v2\x12.tinvest.QuotationR\x11expenseCommission\x12S\n" +
	"\x1cprimary_index_tracking_error\x18\x19 \x01(\v2\x12.tinvest.QuotationR\x19primaryIndexTrackingError\x12)\n" +
	"\x10rebalancing_plan\x18\x1a \x01(\tR\x0frebalancingPlan\x12\x19\n" +
	"\btax_rate\x18\x1b \x01(\tR\ataxRate\x12G\n" +
	"\x11rebalancing_dates\x18\x1c \x03(\v2\x1a.google.protobuf.TimestampR\x10rebalancingDates\x12\x1d\n" +
	"\n" +
	"issue_kind\x18\x1d \x01(\tR\tissueKind\x12,\n" +
	"\anominal\x18\x1e \x01(\v2\x12.tinvest.QuotationR\anominal\x12)\n" +
	"\x10nominal_currency\x18\x1f \x01(\tR\x0fnominalCurrency\"s\n" +
	"\x18AssetClearingCertificate\x12,\n" +
	"\anominal\x18\x01 \x01(\v2\x12.tinvest.QuotationR\anominal\x12)\n" +
	"\x10nominal_currency\x18\x02 \x01(\tR\x0fnominalCurrency\"\xee\x01\n" +
	"\x05Brand\x12\x10\n" +
	"\x03uid\x18\x01 \x01(\tR\x03uid\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x12\n" +
	"\x04info\x18\x04 \x01(\tR\x04info\x12\x18\n" +
	"\acompany\x18\x05 \x01(\tR\acompany\x12\x16\n" +
	"\x06sector\x18\x06 \x01(\tR\x06sector\x12&\n" +
	"\x0fcountry_of_risk\x18\a \x01(\tR\rcountryOfRisk\x12/\n" +
	"\x14country_of_risk_name\x18\b \x01(\tR\x11countryOfRiskName\"\xab\x02\n" +
	"\x0fAssetInstrument\x12\x10\n" +
	"\x03uid\x18\x01 \x01(\tR\x03uid\x12\x12\n" +
	"\x04figi\x18\x02 \x01(\tR\x04figi\x12'\n" +
	"\x0finstrument_type\x18\x03 \x01(\tR\x0einstrumentType\x12\x16\n" +
	"\x06ticker\x18\x04 \x01(\tR\x06ticker\x12\x1d\n" +
	"\n" +
	"class_code\x18\x05 \x01(\tR\tclassCode\x12-\n" +
	"\x05links\x18\x06 \x03(\v2\x17.tinvest.InstrumentLinkR\x05links\x12@\n" +
	"\x0finstrument_kind\x18\n" +
	" \x01(\x0e2\x17.tinvest.InstrumentTypeR\x0einstrumentKind\x12!\n" +
	"\fposition_uid\x18\v \x01(\tR\vpositionUid\"K\n" +
	"\x0eInstrumentLink\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x12%\n" +
	"\x0einstrument_uid\x18\x02 \x01(\tR\rinstrumentUid\"B\n" +
	"\x13GetFavoritesRequest\x12\x1e\n" +
	"\bgroup_id\x18\x01 \x01(\tH\x00R\agroupId\x88\x01\x01B\v\n" +
	"\t_group_id\"\x93\x01\n" +
	"\x14GetFavoritesResponse\x12N\n" +
	"\x14favorite_instruments\x18\x01 \x03(\v2\x1b.tinvest.FavoriteInstrumentR\x13favoriteInstruments\x12\x1e\n" +
	"\bgroup_id\x18\x02 \x01(\tH\x00R\agroupId\x88\x01\x01B\v\n" +
	"\t_group_id\"\xd8\x02\n" +
	"\x12FavoriteInstrument\x12\x12\n" +
	"\x04figi\x18\x01 \x01(\tR\x04figi\x12\x16\n" +
	"\x06ticker\x18\x02 \x01(\tR\x06ticker\x12\x1d\n" +
	"\n" +
	"class_code\x18\x03 \x01(\tR\tclassCode\x12\x12\n" +
	"\x04isin\x18\x04 \x01(\tR\x04isin\x12'\n" +
	"\x0finstrument_type\x18\v \x01(\tR\x0einstrumentType\x12\x12\n" +
	"\x04name\x18\f \x01(\tR\x04name\x12\x10\n" +
	"\x03uid\x18\r \x01(\tR\x03uid\x12\x19\n" +
	"\botc_flag\x18\x10 \x01(\bR\aotcFlag\x127\n" +
	"\x18api_trade_available_flag\x18\x11 \x01(\bR\x15apiTradeAvailableFlag\x12@\n" +
	"\x0finstrument_kind\x18\x12 \x01(\x0e2\x17.tinvest.InstrumentTypeR\x0einstrumentKind\"\xdd\x01\n" +
	"\x14EditFavoritesRequest\x12O\n" +
	"\vinstruments\x18\x01 \x03(\v2'.tinvest.EditFavoritesRequestInstrumentB\x04\xe2A\x01\x02R\vinstruments\x12G\n" +
	"\vaction_type\x18\x06 \x01(\x0e2 .tinvest.EditFavoritesActionTypeB\x04\xe2A\x01\x02R\n" +
	"actionType\x12\x1e\n" +
	"\bgroup_id\x18\a \x01(\tH\x00R\agroupId\x88\x01\x01B\v\n" +
	"\t_group_id\"q\n" +
	"\x1eEditFavoritesRequestInstrument\x12\x1b\n" +
	"\x04figi\x18\x01 \x01(\tB\x02\x18\x01H\x00R\x04figi\x88\x01\x01\x12)\n" +
	"\rinstrument_id\x18\x02 \x01(\tB\x04\xe2A\x01\x02R\finstrumentIdB\a\n" +
	"\x05_figi\"\x94\x01\n" +
	"\x15EditFavoritesResponse\x12N\n" +
	"\x14favorite_instruments\x18\x01 \x03(\v2\x1b.tinvest.FavoriteInstrumentR\x13favoriteInstruments\x12\x1e\n" +
	"\bgroup_id\x18\x02 \x01(\tH\x00R\agroupId\x88\x01\x01B\v\n" +
	"\t_group_id\"\x8a\x01\n" +
	"\x1aCreateFavoriteGroupRequest\x12#\n" +
	"\n" +
	"group_name\x18\x01 \x01(\tB\x04\xe2A\x01\x02R\tgroupName\x12%\n" +
	"\vgroup_color\x18\x02 \x01(\tB\x04\xe2A\x01\x02R\n" +
	"groupColor\x12\x17\n" +
	"\x04note\x18\x03 \x01(\tH\x00R\x04note\x88\x01\x01B\a\n" +
	"\x05_note\"W\n" +
	"\x1bCreateFavoriteGroupResponse\x12\x19\n" +
	"\bgroup_id\x18\x01 \x01(\tR\agroupId\x12\x1d\n" +
	"\n" +
	"group_name\x18\x02 \x01(\tR\tgroupName\"=\n" +
	"\x1aDeleteFavoriteGroupRequest\x12\x1f\n" +
	"\bgroup_id\x18\x01 \x01(\tB\x04\xe2A\x01\x02R\agroupId\"\x1d\n" +
	"\x1bDeleteFavoriteGroupResponse\"k\n" +
	"\x18GetFavoriteGroupsRequest\x12#\n" +
	"\rinstrument_id\x18\x01 \x03(\tR\finstrumentId\x12*\n" +
	"\x11excluded_group_id\x18\x02 \x03(\tR\x0fexcludedGroupId\"\xc1\x02\n" +
	"\x19GetFavoriteGroupsResponse\x12H\n" +
	"\x06groups\x18\x01 \x03(\v20.tinvest.GetFavoriteGroupsResponse.FavoriteGroupR\x06groups\x1a\xd9\x01\n" +
	"\rFavoriteGroup\x12\x1f\n" +
	"\bgroup_id\x18\x01 \x01(\tB\x04\xe2A\x01\x02R\agroupId\x12#\n" +
	"\n" +
	"group_name\x18\x02 \x01(\tB\x04\xe2A\x01\x02R\tgroupName\x12\x1a\n" +
	"\x05color\x18\x03 \x01(\tB\x04\xe2A\x01\x02R\x05color\x12\x18\n" +
	"\x04size\x18\x04 \x01(\x05B\x04\xe2A\x01\x02R\x04size\x124\n" +
	"\x13contains_instrument\x18\x05 \x01(\bH\x00R\x12containsInstrument\x88\x01\x01B\x16\n" +
	"\x14_contains_instrument\"\x15\n" +
	"\x13GetCountriesRequest\"N\n" +
	"\x14GetCountriesResponse\x126\n" +
	"\tcountries\x18\x01 \x03(\v2\x18.tinvest.CountryResponseR\tcountries\"\x14\n" +
	"\x12IndicativesRequest\"T\n" +
	"\x13IndicativesResponse\x12=\n" +
	"\vinstruments\x18\x01 \x03(\v2\x1b.tinvest.IndicativeResponseR\vinstruments\"\xdf\x02\n" +
	"\x12IndicativeResponse\x12\x12\n" +
	"\x04figi\x18\x01 \x01(\tR\x04figi\x12\x16\n" +
	"\x06ticker\x18\x02 \x01(\tR\x06ticker\x12\x1d\n" +
	"\n" +
	"class_code\x18\x03 \x01(\tR\tclassCode\x12\x1a\n" +
	"\bcurrency\x18\x04 \x01(\tR\bcurrency\x12@\n" +
	"\x0finstrument_kind\x18\n" +
	" \x01(\x0e2\x17.tinvest.InstrumentTypeR\x0einstrumentKind\x12\x12\n" +
	"\x04name\x18\f \x01(\tR\x04name\x12\x1a\n" +
	"\bexchange\x18\r \x01(\tR\bexchange\x12\x10\n" +
	"\x03uid\x18\x0e \x01(\tR\x03uid\x12-\n" +
	"\x12buy_available_flag\x18\x94\x03 \x01(\bR\x10buyAvailableFlag\x12/\n" +
	"\x13sell_available_flag\x18\x95\x03 \x01(\bR\x11sellAvailableFlag\"~\n" +
	"\x0fCountryResponse\x12\x19\n" +
	"\balfa_two\x18\x01 \x01(\tR\aalfaTwo\x12\x1d\n" +
	"\n" +
	"alfa_three\x18\x02 \x01(\tR\talfaThree\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12\x1d\n" +
	"\n" +
	"name_brief\x18\x04 \x01(\tR\tnameBrief\"\xe9\x01\n" +
	"\x15FindInstrumentRequest\x12\x1a\n" +
	"\x05query\x18\x01 \x01(\tB\x04\xe2A\x01\x02R\x05query\x12E\n" +
	"\x0finstrument_kind\x18\x02 \x01(\x0e2\x17.tinvest.InstrumentTypeH\x00R\x0einstrumentKind\x88\x01\x01\x12<\n" +
	"\x18api_trade_available_flag\x18\x03 \x01(\bH\x01R\x15apiTradeAvailableFlag\x88\x01\x01B\x12\n" +
	"\x10_instrument_kindB\x1b\n" +
	"\x19_api_trade_available_flag\"T\n" +
	"\x16FindInstrumentResponse\x12:\n" +
	"\vinstruments\x18\x01 \x03(\v2\x18.tinvest.InstrumentShortR\vinstruments\"\xb5\x05\n" +
	"\x0fInstrumentShort\x12\x12\n" +
	"\x04isin\x18\x01 \x01(\tR\x04isin\x12\x12\n" +
	"\x04figi\x18\x02 \x01(\tR\x04figi\x12\x16\n" +
	"\x06ticker\x18\x03 \x01(\tR\x06ticker\x12\x1d\n" +
	"\n" +
	"class_code\x18\x04 \x01(\tR\tclassCode\x12'\n" +
	"\x0finstrument_type\x18\x05 \x01(\tR\x0einstrumentType\x12\x12\n" +
	"\x04name\x18\x06 \x01(\tR\x04name\x12\x10\n" +
	"\x03uid\x18\a \x01(\tR\x03uid\x12!\n" +
	"\fposition_uid\x18\b \x01(\tR\vpositionUid\x12@\n" +
	"\x0finstrument_kind\x18\n" +
	" \x01(\x0e2\x17.tinvest.InstrumentTypeR\x0einstrumentKind\x127\n" +
	"\x18api_trade_available_flag\x18\v \x01(\bR\x15apiTradeAvailableFlag\x12 \n" +
	"\ffor_iis_flag\x18\f \x01(\bR\n" +
	"forIisFlag\x12O\n" +
	"\x16first_1min_candle_date\x18\x1a \x01(\v2\x1a.google.protobuf.TimestampR\x13first1minCandleDate\x12O\n" +
	"\x16first_1day_candle_date\x18\x1b \x01(\v2\x1a.google.protobuf.TimestampR\x13first1dayCandleDate\x123\n" +
	"\x16for_qual_investor_flag\x18\x1c \x01(\bR\x13forQualInvestorFlag\x12!\n" +
	"\fweekend_flag\x18\x1d \x01(\bR\vweekendFlag\x12(\n" +
	"\x10blocked_tca_flag\x18\x1e \x01(\bR\x0eblockedTcaFlag\x12\x10\n" +
	"\x03lot\x18\x1f \x01(\x05R\x03lot\"9\n" +
	"\x10GetBrandsRequest\x12%\n" +
	"\x06paging\x18\x01 \x01(\v2\r.tinvest.PageR\x06paging\"'\n" +
	"\x0fGetBrandRequest\x12\x14\n" +
	"\x02id\x18\x01 \x01(\tB\x04\xe2A\x01\x02R\x02id\"j\n" +
	"\x11GetBrandsResponse\x12&\n" +
	"\x06brands\x18\x01 \x03(\v2\x0e.tinvest.BrandR\x06brands\x12-\n" +
	"\x06paging\x18\x02 \x01(\v2\x15.tinvest.PageResponseR\x06paging\";\n" +
	"\x1bGetAssetFundamentalsRequest\x12\x1c\n" +
	"\x06assets\x18\x01 \x03(\tB\x04\xe2A\x01\x02R\x06assets\"\xa0\x17\n" +
	"\x1cGetAssetFundamentalsResponse\x12[\n" +
	"\ffundamentals\x18\x01 \x03(\v27.tinvest.GetAssetFundamentalsResponse.StatisticResponseR\ffundamentals\x1a\xa2\x16\n" +
	"\x11StatisticResponse\x12\x1b\n" +
	"\tasset_uid\x18\x01 \x01(\tR\bassetUid\x12\x1a\n" +
	"\bcurrency\x18\x02 \x01(\tR\bcurrency\x123\n" +
	"\x15market_capitalization\x18\x03 \x01(\x01R\x14marketCapitalization\x126\n" +
	"\x18high_price_last_52_weeks\x18\x04 \x01(\x01R\x14highPriceLast52Weeks\x124\n" +
	"\x17low_price_last_52_weeks\x18\x05 \x01(\x01R\x13lowPriceLast52Weeks\x12G\n" +
	"!average_daily_volume_last_10_days\x18\x06 \x01(\x01R\x1caverageDailyVolumeLast10Days\x12G\n" +
	"!average_daily_volume_last_4_weeks\x18\a \x01(\x01R\x1caverageDailyVolumeLast4Weeks\x12\x12\n" +
	"\x04beta\x18\b \x01(\x01R\x04beta\x12\x1d\n" +
	"\n" +
	"free_float\x18\t \x01(\x01R\tfreeFloat\x12A\n" +
	"\x1dforward_annual_dividend_yield\x18\n" +
	" \x01(\x01R\x1aforwardAnnualDividendYield\x12-\n" +
	"\x12shares_outstanding\x18\v \x01(\x01R\x11sharesOutstanding\x12\x1f\n" +
	"\vrevenue_ttm\x18\f \x01(\x01R\n" +
	"revenueTtm\x12\x1d\n" +
	"\n" +
	"ebitda_ttm\x18\r \x01(\x01R\tebitdaTtm\x12$\n" +
	"\x0enet_income_ttm\x18\x0e \x01(\x01R\fnetIncomeTtm\x12\x17\n" +
	"\aeps_ttm\x18\x0f \x01(\x01R\x06epsTtm\x12&\n" +
	"\x0fdiluted_eps_ttm\x18\x10 \x01(\x01R\rdilutedEpsTtm\x12+\n" +
	"\x12free_cash_flow_ttm\x18\x11 \x01(\x01R\x0ffreeCashFlowTtm\x12M\n" +
	"$five_year_annual_revenue_growth_rate\x18\x12 \x01(\x01R\x1ffiveYearAnnualRevenueGrowthRate\x12O\n" +
	"%three_year_annual_revenue_growth_rate\x18\x13 \x01(\x01R threeYearAnnualRevenueGrowthRate\x12 \n" +
	"\fpe_ratio_ttm\x18\x14 \x01(\x01R\n" +
	"peRatioTtm\x12+\n" +
	"\x12price_to_sales_ttm\x18\x15 \x01(\x01R\x0fpriceToSalesTtm\x12)\n" +
	"\x11price_to_book_ttm\x18\x16 \x01(\x01R\x0epriceToBookTtm\x12;\n" +
	"\x1bprice_to_free_cash_flow_ttm\x18\x17 \x01(\x01R\x16priceToFreeCashFlowTtm\x12;\n" +
	"\x1atotal_enterprise_value_mrq\x18\x18 \x01(\x01R\x17totalEnterpriseValueMrq\x12'\n" +
	"\x10ev_to_ebitda_mrq\x18\x19 \x01(\x01R\revToEbitdaMrq\x12$\n" +
	"\x0enet_margin_mrq\x18\x1a \x01(\x01R\fnetMarginMrq\x125\n" +
	"\x17net_interest_margin_mrq\x18\x1b \x01(\x01R\x14netInterestMarginMrq\x12\x10\n" +
	"\x03roe\x18\x1c \x01(\x01R\x03roe\x12\x10\n" +
	"\x03roa\x18\x1d \x01(\x01R\x03roa\x12\x12\n" +
	"\x04roic\x18\x1e \x01(\x01R\x04roic\x12$\n" +
	"\x0etotal_debt_mrq\x18\x1f \x01(\x01R\ftotalDebtMrq\x126\n" +
	"\x18total_debt_to_equity_mrq\x18  \x01(\x01R\x14totalDebtToEquityMrq\x126\n" +
	"\x18total_debt_to_ebitda_mrq\x18! \x01(\x01R\x14totalDebtToEbitdaMrq\x124\n" +
	"\x17free_cash_flow_to_price\x18\" \x01(\x01R\x13freeCashFlowToPrice\x12+\n" +
	"\x12net_debt_to_ebitda\x18# \x01(\x01R\x0fnetDebtToEbitda\x12*\n" +
	"\x11current_ratio_mrq\x18$ \x01(\x01R\x0fcurrentRatioMrq\x12B\n" +
	"\x1efixed_charge_coverage_ratio_fy\x18% \x01(\x01R\x1afixedChargeCoverageRatioFy\x127\n" +
	"\x18dividend_yield_daily_ttm\x18& \x01(\x01R\x15dividendYieldDailyTtm\x12*\n" +
	"\x11dividend_rate_ttm\x18' \x01(\x01R\x0fdividendRateTtm\x12.\n" +
	"\x13dividends_per_share\x18( \x01(\x01R\x11dividendsPerShare\x12H\n" +
	"!five_years_average_dividend_yield\x18) \x01(\x01R\x1dfiveYearsAverageDividendYield\x12O\n" +
	"%five_year_annual_dividend_growth_rate\x18* \x01(\x01R fiveYearAnnualDividendGrowthRate\x127\n" +
	"\x18dividend_payout_ratio_fy\x18+ \x01(\x01R\x15dividendPayoutRatioFy\x12 \n" +
	"\fbuy_back_ttm\x18, \x01(\x01R\n" +
	"buyBackTtm\x12K\n" +
	"#one_year_annual_revenue_growth_rate\x18- \x01(\x01R\x1eoneYearAnnualRevenueGrowthRate\x126\n" +
	"\x17domicile_indicator_code\x18. \x01(\tR\x15domicileIndicatorCode\x128\n" +
	"\x19adr_to_common_share_ratio\x18/ \x01(\x01R\x15adrToCommonShareRatio\x12.\n" +
	"\x13number_of_employees\x180 \x01(\x01R\x11numberOfEmployees\x12D\n" +
	"\x10ex_dividend_date\x181 \x01(\v2\x1a.google.protobuf.TimestampR\x0eexDividendDate\x12S\n" +
	"\x18fiscal_period_start_date\x182 \x01(\v2\x1a.google.protobuf.TimestampR\x15fiscalPeriodStartDate\x12O\n" +
	"\x16fiscal_period_end_date\x183 \x01(\v2\x1a.google.protobuf.TimestampR\x13fiscalPeriodEndDate\x129\n" +
	"\x19revenue_change_five_years\x185 \x01(\x01R\x16revenueChangeFiveYears\x121\n" +
	"\x15eps_change_five_years\x186 \x01(\x01R\x12epsChangeFiveYears\x127\n" +
	"\x18ebitda_change_five_years\x187 \x01(\x01R\x15ebitdaChangeFiveYears\x12>\n" +
	"\x1ctotal_debt_change_five_years\x188 \x01(\x01R\x18totalDebtChangeFiveYears\x12\x1e\n" +
	"\vev_to_sales\x189 \x01(\x01R\tevToSales\"\xb9\x01\n" +
	"\x16GetAssetReportsRequest\x12)\n" +
	"\rinstrument_id\x18\x01 \x01(\tB\x04\xe2A\x01\x02R\finstrumentId\x123\n" +
	"\x04from\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampH\x00R\x04from\x88\x01\x01\x12/\n" +
	"\x02to\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampH\x01R\x02to\x88\x01\x01B\a\n" +
	"\x05_fromB\x05\n" +
	"\x03_to\"\xbb\x04\n" +
	"\x17GetAssetReportsResponse\x12M\n" +
	"\x06events\x18\x01 \x03(\v25.tinvest.GetAssetReportsResponse.GetAssetReportsEventR\x06events\x1a\xcc\x02\n" +
	"\x14GetAssetReportsEvent\x12#\n" +
	"\rinstrument_id\x18\x01 \x01(\tR\finstrumentId\x12;\n" +
	"\vreport_date\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"reportDate\x12\x1f\n" +
	"\vperiod_year\x18\x03 \x01(\x05R\n" +
	"periodYear\x12\x1d\n" +
	"\n" +
	"period_num\x18\x04 \x01(\x05R\tperiodNum\x12W\n" +
	"\vperiod_type\x18\x05 \x01(\x0e26.tinvest.GetAssetReportsResponse.AssetReportPeriodTypeR\n" +
	"periodType\x129\n" +
	"\n" +
	"created_at\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\"\x81\x01\n" +
	"\x15AssetReportPeriodType\x12\x1b\n" +
	"\x17PERIOD_TYPE_UNSPECIFIED\x10\x00\x12\x17\n" +
	"\x13PERIOD_TYPE_QUARTER\x10\x01\x12\x1a\n" +
	"\x16PERIOD_TYPE_SEMIANNUAL\x10\x02\x12\x16\n" +
	"\x12PERIOD_TYPE_ANNUAL\x10\x03\"U\n" +
	"\x1cGetConsensusForecastsRequest\x12*\n" +
	"\x06paging\x18\x01 \x01(\v2\r.tinvest.PageH\x00R\x06paging\x88\x01\x01B\t\n" +
	"\a_paging\"\x88\x06\n" +
	"\x1dGetConsensusForecastsResponse\x12S\n" +
	"\x05items\x18\x01 \x03(\v2=.tinvest.GetConsensusForecastsResponse.ConsensusForecastsItemR\x05items\x12)\n" +
	"\x04page\x18\x02 \x01(\v2\x15.tinvest.PageResponseR\x04page\x1a\xe6\x04\n" +
	"\x16ConsensusForecastsItem\x12\x10\n" +
	"\x03uid\x18\x01 \x01(\tR\x03uid\x12\x1b\n" +
	"\tasset_uid\x18\x02 \x01(\tR\bassetUid\x129\n" +
	"\n" +
	"created_at\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x12>\n" +
	"\x11best_target_price\x18\x04 \x01(\v2\x12.tinvest.QuotationR\x0fbestTargetPrice\x12:\n" +
	"\x0fbest_target_low\x18\x05 \x01(\v2\x12.tinvest.QuotationR\rbestTargetLow\x12<\n" +
	"\x10best_target_high\x18\x06 \x01(\v2\x12.tinvest.QuotationR\x0ebestTargetHigh\x12.\n" +
	"\x13total_buy_recommend\x18\a \x01(\x05R\x11totalBuyRecommend\x120\n" +
	"\x14total_hold_recommend\x18\b \x01(\x05R\x12totalHoldRecommend\x120\n" +
	"\x14total_sell_recommend\x18\t \x01(\x05R\x12totalSellRecommend\x12\x1a\n" +
	"\bcurrency\x18\n" +
	" \x01(\tR\bcurrency\x125\n" +
	"\tconsensus\x18\v \x01(\x0e2\x17.tinvest.RecommendationR\tconsensus\x12A\n" +
	"\x0eprognosis_date\x18\f \x01(\v2\x1a.google.protobuf.TimestampR\rprognosisDate\"9\n" +
	"\x12GetForecastRequest\x12#\n" +
	"\rinstrument_id\x18\x01 \x01(\tR\finstrumentId\"\x80\t\n" +
	"\x13GetForecastResponse\x12A\n" +
	"\atargets\x18\x01 \x03(\v2'.tinvest.GetForecastResponse.TargetItemR\atargets\x12H\n" +
	"\tconsensus\x18\x02 \x01(\v2*.tinvest.GetForecastResponse.ConsensusItemR\tconsensus\x1a\xfc\x03\n" +
	"\n" +
	"TargetItem\x12\x10\n" +
	"\x03uid\x18\x01 \x01(\tR\x03uid\x12\x16\n" +
	"\x06ticker\x18\x02 \x01(\tR\x06ticker\x12\x18\n" +
	"\acompany\x18\x03 \x01(\tR\acompany\x12?\n" +
	"\x0erecommendation\x18\x04 \x01(\x0e2\x17.tinvest.RecommendationR\x0erecommendation\x12K\n" +
	"\x13recommendation_date\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\x12recommendationDate\x12\x1a\n" +
	"\bcurrency\x18\x06 \x01(\tR\bcurrency\x127\n" +
	"\rcurrent_price\x18\a \x01(\v2\x12.tinvest.QuotationR\fcurrentPrice\x125\n" +
	"\ftarget_price\x18\b \x01(\v2\x12.tinvest.QuotationR\vtargetPrice\x125\n" +
	"\fprice_change\x18\t \x01(\v2\x12.tinvest.QuotationR\vpriceChange\x12<\n" +
	"\x10price_change_rel\x18\n" +
	" \x01(\v2\x12.tinvest.QuotationR\x0epriceChangeRel\x12\x1b\n" +
	"\tshow_name\x18\v \x01(\tR\bshowName\x1a\xdc\x03\n" +
	"\rConsensusItem\x12\x10\n" +
	"\x03uid\x18\x01 \x01(\tR\x03uid\x12\x16\n" +
	"\x06ticker\x18\x02 \x01(\tR\x06ticker\x12?\n" +
	"\x0erecommendation\x18\x03 \x01(\x0e2\x17.tinvest.RecommendationR\x0erecommendation\x12\x1a\n" +
	"\bcurrency\x18\x04 \x01(\tR\bcurrency\x127\n" +
	"\rcurrent_price\x18\x05 \x01(\v2\x12.tinvest.QuotationR\fcurrentPrice\x120\n" +
	"\tconsensus\x18\x06 \x01(\v2\x12.tinvest.QuotationR\tconsensus\x121\n" +
	"\n" +
	"min_target\x18\a \x01(\v2\x12.tinvest.QuotationR\tminTarget\x121\n" +
	"\n" +
	"max_target\x18\b \x01(\v2\x12.tinvest.QuotationR\tmaxTarget\x125\n" +
	"\fprice_change\x18\t \x01(\v2\x12.tinvest.QuotationR\vpriceChange\x12<\n" +
	"\x10price_change_rel\x18\n" +
	" \x01(\v2\x12.tinvest.QuotationR\x0epriceChangeRel\"7\n" +
	"\x10RiskRatesRequest\x12#\n" +
	"\rinstrument_id\x18\x01 \x03(\tR\finstrumentId\"\x94\x05\n" +
	"\x11RiskRatesResponse\x12]\n" +
	"\x15instrument_risk_rates\x18\x01 \x03(\v2).tinvest.RiskRatesResponse.RiskRateResultR\x13instrumentRiskRates\x1a\xc1\x03\n" +
	"\x0eRiskRateResult\x12%\n" +
	"\x0einstrument_uid\x18\x01 \x01(\tR\rinstrumentUid\x12P\n" +
	"\x0fshort_risk_rate\x18\x02 \x01(\v2#.tinvest.RiskRatesResponse.RiskRateH\x00R\rshortRiskRate\x88\x01\x01\x12N\n" +
	"\x0elong_risk_rate\x18\x03 \x01(\v2#.tinvest.RiskRatesResponse.RiskRateH\x01R\flongRiskRate\x88\x01\x01\x12M\n" +
	"\x10short_risk_rates\x18\x05 \x03(\v2#.tinvest.RiskRatesResponse.RiskRateR\x0eshortRiskRates\x12K\n" +
	"\x0flong_risk_rates\x18\x06 \x03(\v2#.tinvest.RiskRatesResponse.RiskRateR\rlongRiskRates\x12\x19\n" +
	"\x05error\x18\t \x01(\tH\x02R\x05error\x88\x01\x01B\x12\n" +
	"\x10_short_risk_rateB\x11\n" +
	"\x0f_long_risk_rateB\b\n" +
	"\x06_error\x1a\\\n" +
	"\bRiskRate\x12&\n" +
	"\x0frisk_level_code\x18\x02 \x01(\tR\rriskLevelCode\x12(\n" +
	"\x05value\x18\x05 \x01(\v2\x12.tinvest.QuotationR\x05value\"\xe2\x01\n" +
	"\x0fTradingInterval\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x12A\n" +
	"\binterval\x18\x02 \x01(\v2%.tinvest.TradingInterval.TimeIntervalR\binterval\x1ax\n" +
	"\fTimeInterval\x125\n" +
	"\bstart_ts\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\astartTs\x121\n" +
	"\x06end_ts\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\x05endTs*\xd7\x01\n" +
	"\n" +
	"CouponType\x12\x1b\n" +
	"\x17COUPON_TYPE_UNSPECIFIED\x10\x00\x12\x18\n" +
	"\x14COUPON_TYPE_CONSTANT\x10\x01\x12\x18\n" +
	"\x14COUPON_TYPE_FLOATING\x10\x02\x12\x18\n" +
	"\x14COUPON_TYPE_DISCOUNT\x10\x03\x12\x18\n" +
	"\x14COUPON_TYPE_MORTGAGE\x10\x04\x12\x13\n" +
	"\x0fCOUPON_TYPE_FIX\x10\x05\x12\x18\n" +
	"\x14COUPON_TYPE_VARIABLE\x10\x06\x12\x15\n" +
	"\x11COUPON_TYPE_OTHER\x10\a*h\n" +
	"\x0fOptionDirection\x12 \n" +
	"\x1cOPTION_DIRECTION_UNSPECIFIED\x10\x00\x12\x18\n" +
	"\x14OPTION_DIRECTION_PUT\x10\x01\x12\x19\n" +
	"\x15OPTION_DIRECTION_CALL\x10\x02*{\n" +
	"\x11OptionPaymentType\x12#\n" +
	"\x1fOPTION_PAYMENT_TYPE_UNSPECIFIED\x10\x00\x12\x1f\n" +
	"\x1bOPTION_PAYMENT_TYPE_PREMIUM\x10\x01\x12 \n" +
	"\x1cOPTION_PAYMENT_TYPE_MARGINAL\x10\x02*a\n" +
	"\vOptionStyle\x12\x1c\n" +
	"\x18OPTION_STYLE_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15OPTION_STYLE_AMERICAN\x10\x01\x12\x19\n" +
	"\x15OPTION_STYLE_EUROPEAN\x10\x02*\x95\x01\n" +
	"\x14OptionSettlementType\x12%\n" +
	"!OPTION_EXECUTION_TYPE_UNSPECIFIED\x10\x00\x12+\n" +
	"'OPTION_EXECUTION_TYPE_PHYSICAL_DELIVERY\x10\x01\x12)\n" +
	"%OPTION_EXECUTION_TYPE_CASH_SETTLEMENT\x10\x02*\xae\x01\n" +
	"\x10InstrumentIdType\x12\x1d\n" +
	"\x19INSTRUMENT_ID_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17INSTRUMENT_ID_TYPE_FIGI\x10\x01\x12\x1d\n" +
	"\x19INSTRUMENT_ID_TYPE_TICKER\x10\x02\x12\x1a\n" +
	"\x16INSTRUMENT_ID_TYPE_UID\x10\x03\x12#\n" +
	"\x1fINSTRUMENT_ID_TYPE_POSITION_UID\x10\x04*\xe5\x01\n" +
	"\tShareType\x12\x1a\n" +
	"\x16SHARE_TYPE_UNSPECIFIED\x10\x00\x12\x15\n" +
	"\x11SHARE_TYPE_COMMON\x10\x01\x12\x18\n" +
	"\x14SHARE_TYPE_PREFERRED\x10\x02\x12\x12\n" +
	"\x0eSHARE_TYPE_ADR\x10\x03\x12\x12\n" +
	"\x0eSHARE_TYPE_GDR\x10\x04\x12\x12\n" +
	"\x0eSHARE_TYPE_MLP\x10\x05\x12\x1a\n" +
	"\x16SHARE_TYPE_NY_REG_SHRS\x10\x06\x12\x1e\n" +
	"\x1aSHARE_TYPE_CLOSED_END_FUND\x10\a\x12\x13\n" +
	"\x0fSHARE_TYPE_REIT\x10\b*\x89\x01\n" +
	"\tAssetType\x12\x1a\n" +
	"\x16ASSET_TYPE_UNSPECIFIED\x10\x00\x12\x17\n" +
	"\x13ASSET_TYPE_CURRENCY\x10\x01\x12\x18\n" +
	"\x14ASSET_TYPE_COMMODITY\x10\x02\x12\x14\n" +
	"\x10ASSET_TYPE_INDEX\x10\x03\x12\x17\n" +
	"\x13ASSET_TYPE_SECURITY\x10\x04*f\n" +
	"\x15StructuredProductType\x12\x17\n" +
	"\x13SP_TYPE_UNSPECIFIED\x10\x00\x12\x17\n" +
	"\x13SP_TYPE_DELIVERABLE\x10\x01\x12\x1b\n" +
	"\x17SP_TYPE_NON_DELIVERABLE\x10\x02*\x8d\x01\n" +
	"\x17EditFavoritesActionType\x12*\n" +
	"&EDIT_FAVORITES_ACTION_TYPE_UNSPECIFIED\x10\x00\x12\"\n" +
	"\x1eEDIT_FAVORITES_ACTION_TYPE_ADD\x10\x01\x12\"\n" +
	"\x1eEDIT_FAVORITES_ACTION_TYPE_DEL\x10\x02*\x8d\x01\n" +
	"\fRealExchange\x12\x1d\n" +
	"\x19REAL_EXCHANGE_UNSPECIFIED\x10\x00\x12\x16\n" +
	"\x12REAL_EXCHANGE_MOEX\x10\x01\x12\x15\n" +
	"\x11REAL_EXCHANGE_RTS\x10\x02\x12\x15\n" +
	"\x11REAL_EXCHANGE_OTC\x10\x03\x12\x18\n" +
	"\x14REAL_EXCHANGE_DEALER\x10\x04*z\n" +
	"\x0eRecommendation\x12\x1e\n" +
	"\x1aRECOMMENDATION_UNSPECIFIED\x10\x00\x12\x16\n" +
	"\x12RECOMMENDATION_BUY\x10\x01\x12\x17\n" +
	"\x13RECOMMENDATION_HOLD\x10\x02\x12\x17\n" +
	"\x13RECOMMENDATION_SELL\x10\x03*i\n" +
	"\tRiskLevel\x12\x1a\n" +
	"\x16RISK_LEVEL_UNSPECIFIED\x10\x00\x12\x12\n" +
	"\x0eRISK_LEVEL_LOW\x10\x01\x12\x17\n" +
	"\x13RISK_LEVEL_MODERATE\x10\x02\x12\x13\n" +
	"\x0fRISK_LEVEL_HIGH\x10\x03*=\n" +
	"\bBondType\x12\x19\n" +
	"\x15BOND_TYPE_UNSPECIFIED\x10\x00\x12\x16\n" +
	"\x12BOND_TYPE_REPLACED\x10\x01*]\n" +
	"\x16InstrumentExchangeType\x12#\n" +
	"\x1fINSTRUMENT_EXCHANGE_UNSPECIFIED\x10\x00\x12\x1e\n" +
	"\x1aINSTRUMENT_EXCHANGE_DEALER\x10\x012\x87\x16\n" +
	"\x12InstrumentsService\x12W\n" +
	"\x10TradingSchedules\x12 .tinvest.TradingSchedulesRequest\x1a!.tinvest.TradingSchedulesResponse\x12;\n" +
	"\x06BondBy\x12\x1a.tinvest.InstrumentRequest\x1a\x15.tinvest.BondResponse\x12<\n" +
	"\x05Bonds\x12\x1b.tinvest.InstrumentsRequest\x1a\x16.tinvest.BondsResponse\x12Q\n" +
	"\x0eGetBondCoupons\x12\x1e.tinvest.GetBondCouponsRequest\x1a\x1f.tinvest.GetBondCouponsResponse\x12N\n" +
	"\rGetBondEvents\x12\x1d.tinvest.GetBondEventsRequest\x1a\x1e.tinvest.GetBondEventsResponse\x12C\n" +
	"\n" +
	"CurrencyBy\x12\x1a.tinvest.InstrumentRequest\x1a\x19.tinvest.CurrencyResponse\x12F\n" +
	"\n" +
	"Currencies\x12\x1b.tinvest.InstrumentsRequest\x1a\x1b.tinvest.CurrenciesResponse\x129\n" +
	"\x05EtfBy\x12\x1a.tinvest.InstrumentRequest\x1a\x14.tinvest.EtfResponse\x12:\n" +
	"\x04Etfs\x12\x1b.tinvest.InstrumentsRequest\x1a\x15.tinvest.EtfsResponse\x12?\n" +
	"\bFutureBy\x12\x1a.tinvest.InstrumentRequest\x1a\x17.tinvest.FutureResponse\x12@\n" +
	"\aFutures\x12\x1b.tinvest.InstrumentsRequest\x1a\x18.tinvest.FuturesResponse\x12?\n" +
	"\bOptionBy\x12\x1a.tinvest.InstrumentRequest\x1a\x17.tinvest.OptionResponse\x12E\n" +
	"\aOptions\x12\x1b.tinvest.InstrumentsRequest\x1a\x18.tinvest.OptionsResponse\"\x03\x88\x02\x01\x12D\n" +
	"\tOptionsBy\x12\x1d.tinvest.FilterOptionsRequest\x1a\x18.tinvest.OptionsResponse\x12=\n" +
	"\aShareBy\x12\x1a.tinvest.InstrumentRequest\x1a\x16.tinvest.ShareResponse\x12>\n" +
	"\x06Shares\x12\x1b.tinvest.InstrumentsRequest\x1a\x17.tinvest.SharesResponse\x12H\n" +
	"\vIndicatives\x12\x1b.tinvest.IndicativesRequest\x1a\x1c.tinvest.IndicativesResponse\x12`\n" +
	"\x13GetAccruedInterests\x12#.tinvest.GetAccruedInterestsRequest\x1a$.tinvest.GetAccruedInterestsResponse\x12W\n" +
	"\x10GetFuturesMargin\x12 .tinvest.GetFuturesMarginRequest\x1a!.tinvest.GetFuturesMarginResponse\x12J\n" +
	"\x0fGetInstrumentBy\x12\x1a.tinvest.InstrumentRequest\x1a\x1b.tinvest.InstrumentResponse\x12K\n" +
	"\fGetDividends\x12\x1c.tinvest.GetDividendsRequest\x1a\x1d.tinvest.GetDividendsResponse\x12;\n" +
	"\n" +
	"GetAssetBy\x12\x15.tinvest.AssetRequest\x1a\x16.tinvest.AssetResponse\x12<\n" +
	"\tGetAssets\x12\x16.tinvest.AssetsRequest\x1a\x17.tinvest.AssetsResponse\x12K\n" +
	"\fGetFavorites\x12\x1c.tinvest.GetFavoritesRequest\x1a\x1d.tinvest.GetFavoritesResponse\x12N\n" +
	"\rEditFavorites\x12\x1d.tinvest.EditFavoritesRequest\x1a\x1e.tinvest.EditFavoritesResponse\x12`\n" +
	"\x13CreateFavoriteGroup\x12#.tinvest.CreateFavoriteGroupRequest\x1a$.tinvest.CreateFavoriteGroupResponse\x12`\n" +
	"\x13DeleteFavoriteGroup\x12#.tinvest.DeleteFavoriteGroupRequest\x1a$.tinvest.DeleteFavoriteGroupResponse\x12Z\n" +
	"\x11GetFavoriteGroups\x12!.tinvest.GetFavoriteGroupsRequest\x1a\".tinvest.GetFavoriteGroupsResponse\x12K\n" +
	"\fGetCountries\x12\x1c.tinvest.GetCountriesRequest\x1a\x1d.tinvest.GetCountriesResponse\x12Q\n" +
	"\x0eFindInstrument\x12\x1e.tinvest.FindInstrumentRequest\x1a\x1f.tinvest.FindInstrumentResponse\x12B\n" +
	"\tGetBrands\x12\x19.tinvest.GetBrandsRequest\x1a\x1a.tinvest.GetBrandsResponse\x126\n" +
	"\n" +
	"GetBrandBy\x12\x18.tinvest.GetBrandRequest\x1a\x0e.tinvest.Brand\x12c\n" +
	"\x14GetAssetFundamentals\x12$.tinvest.GetAssetFundamentalsRequest\x1a%.tinvest.GetAssetFundamentalsResponse\x12T\n" +
	"\x0fGetAssetReports\x12\x1f.tinvest.GetAssetReportsRequest\x1a .tinvest.GetAssetReportsResponse\x12f\n" +
	"\x15GetConsensusForecasts\x12%.tinvest.GetConsensusForecastsRequest\x1a&.tinvest.GetConsensusForecastsResponse\x12J\n" +
	"\rGetForecastBy\x12\x1b.tinvest.GetForecastRequest\x1a\x1c.tinvest.GetForecastResponse\x12E\n" +
	"\fGetRiskRates\x12\x19.tinvest.RiskRatesRequest\x1a\x1a.tinvest.RiskRatesResponseB\x87\x01\n" +
	"\x1cru.tinkoff.piapi.contract.v1P\x01Z2github.com/Mar1eena/trb_proto/services/tinvest/trb\xa2\x02\x05TIAPI\xaa\x02\x14Tinkoff.InvestApi.V1\xca\x02\x11Tinkoff\\Invest\\V1b\x06proto3"

var (
	file_tinvest_trb_instruments_proto_rawDescOnce sync.Once
	file_tinvest_trb_instruments_proto_rawDescData []byte
)

func file_tinvest_trb_instruments_proto_rawDescGZIP() []byte {
	file_tinvest_trb_instruments_proto_rawDescOnce.Do(func() {
		file_tinvest_trb_instruments_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_tinvest_trb_instruments_proto_rawDesc), len(file_tinvest_trb_instruments_proto_rawDesc)))
	})
	return file_tinvest_trb_instruments_proto_rawDescData
}

var file_tinvest_trb_instruments_proto_enumTypes = make([]protoimpl.EnumInfo, 17)
var file_tinvest_trb_instruments_proto_msgTypes = make([]protoimpl.MessageInfo, 101)
var file_tinvest_trb_instruments_proto_goTypes = []any{
	(CouponType)(0),                     // 0: tinvest.CouponType
	(OptionDirection)(0),                // 1: tinvest.OptionDirection
	(OptionPaymentType)(0),              // 2: tinvest.OptionPaymentType
	(OptionStyle)(0),                    // 3: tinvest.OptionStyle
	(OptionSettlementType)(0),           // 4: tinvest.OptionSettlementType
	(InstrumentIdType)(0),               // 5: tinvest.InstrumentIdType
	(ShareType)(0),                      // 6: tinvest.ShareType
	(AssetType)(0),                      // 7: tinvest.AssetType
	(StructuredProductType)(0),          // 8: tinvest.StructuredProductType
	(EditFavoritesActionType)(0),        // 9: tinvest.EditFavoritesActionType
	(RealExchange)(0),                   // 10: tinvest.RealExchange
	(Recommendation)(0),                 // 11: tinvest.Recommendation
	(RiskLevel)(0),                      // 12: tinvest.RiskLevel
	(BondType)(0),                       // 13: tinvest.BondType
	(InstrumentExchangeType)(0),         // 14: tinvest.InstrumentExchangeType
	(GetBondEventsRequest_EventType)(0), // 15: tinvest.GetBondEventsRequest.EventType
	(GetAssetReportsResponse_AssetReportPeriodType)(0),           // 16: tinvest.GetAssetReportsResponse.AssetReportPeriodType
	(*TradingSchedulesRequest)(nil),                              // 17: tinvest.TradingSchedulesRequest
	(*TradingSchedulesResponse)(nil),                             // 18: tinvest.TradingSchedulesResponse
	(*TradingSchedule)(nil),                                      // 19: tinvest.TradingSchedule
	(*TradingDay)(nil),                                           // 20: tinvest.TradingDay
	(*InstrumentRequest)(nil),                                    // 21: tinvest.InstrumentRequest
	(*InstrumentsRequest)(nil),                                   // 22: tinvest.InstrumentsRequest
	(*FilterOptionsRequest)(nil),                                 // 23: tinvest.FilterOptionsRequest
	(*BondResponse)(nil),                                         // 24: tinvest.BondResponse
	(*BondsResponse)(nil),                                        // 25: tinvest.BondsResponse
	(*GetBondCouponsRequest)(nil),                                // 26: tinvest.GetBondCouponsRequest
	(*GetBondCouponsResponse)(nil),                               // 27: tinvest.GetBondCouponsResponse
	(*GetBondEventsRequest)(nil),                                 // 28: tinvest.GetBondEventsRequest
	(*GetBondEventsResponse)(nil),                                // 29: tinvest.GetBondEventsResponse
	(*Coupon)(nil),                                               // 30: tinvest.Coupon
	(*CurrencyResponse)(nil),                                     // 31: tinvest.CurrencyResponse
	(*CurrenciesResponse)(nil),                                   // 32: tinvest.CurrenciesResponse
	(*EtfResponse)(nil),                                          // 33: tinvest.EtfResponse
	(*EtfsResponse)(nil),                                         // 34: tinvest.EtfsResponse
	(*FutureResponse)(nil),                                       // 35: tinvest.FutureResponse
	(*FuturesResponse)(nil),                                      // 36: tinvest.FuturesResponse
	(*OptionResponse)(nil),                                       // 37: tinvest.OptionResponse
	(*OptionsResponse)(nil),                                      // 38: tinvest.OptionsResponse
	(*Option)(nil),                                               // 39: tinvest.Option
	(*ShareResponse)(nil),                                        // 40: tinvest.ShareResponse
	(*SharesResponse)(nil),                                       // 41: tinvest.SharesResponse
	(*Bond)(nil),                                                 // 42: tinvest.Bond
	(*Currency)(nil),                                             // 43: tinvest.Currency
	(*Etf)(nil),                                                  // 44: tinvest.Etf
	(*Future)(nil),                                               // 45: tinvest.Future
	(*Share)(nil),                                                // 46: tinvest.Share
	(*GetAccruedInterestsRequest)(nil),                           // 47: tinvest.GetAccruedInterestsRequest
	(*GetAccruedInterestsResponse)(nil),                          // 48: tinvest.GetAccruedInterestsResponse
	(*AccruedInterest)(nil),                                      // 49: tinvest.AccruedInterest
	(*GetFuturesMarginRequest)(nil),                              // 50: tinvest.GetFuturesMarginRequest
	(*GetFuturesMarginResponse)(nil),                             // 51: tinvest.GetFuturesMarginResponse
	(*InstrumentResponse)(nil),                                   // 52: tinvest.InstrumentResponse
	(*Instrument)(nil),                                           // 53: tinvest.Instrument
	(*GetDividendsRequest)(nil),                                  // 54: tinvest.GetDividendsRequest
	(*GetDividendsResponse)(nil),                                 // 55: tinvest.GetDividendsResponse
	(*Dividend)(nil),                                             // 56: tinvest.Dividend
	(*AssetRequest)(nil),                                         // 57: tinvest.AssetRequest
	(*AssetResponse)(nil),                                        // 58: tinvest.AssetResponse
	(*AssetsRequest)(nil),                                        // 59: tinvest.AssetsRequest
	(*AssetsResponse)(nil),                                       // 60: tinvest.AssetsResponse
	(*AssetFull)(nil),                                            // 61: tinvest.AssetFull
	(*Asset)(nil),                                                // 62: tinvest.Asset
	(*AssetCurrency)(nil),                                        // 63: tinvest.AssetCurrency
	(*AssetSecurity)(nil),                                        // 64: tinvest.AssetSecurity
	(*AssetShare)(nil),                                           // 65: tinvest.AssetShare
	(*AssetBond)(nil),                                            // 66: tinvest.AssetBond
	(*AssetStructuredProduct)(nil),                               // 67: tinvest.AssetStructuredProduct
	(*AssetEtf)(nil),                                             // 68: tinvest.AssetEtf
	(*AssetClearingCertificate)(nil),                             // 69: tinvest.AssetClearingCertificate
	(*Brand)(nil),                                                // 70: tinvest.Brand
	(*AssetInstrument)(nil),                                      // 71: tinvest.AssetInstrument
	(*InstrumentLink)(nil),                                       // 72: tinvest.InstrumentLink
	(*GetFavoritesRequest)(nil),                                  // 73: tinvest.GetFavoritesRequest
	(*GetFavoritesResponse)(nil),                                 // 74: tinvest.GetFavoritesResponse
	(*FavoriteInstrument)(nil),                                   // 75: tinvest.FavoriteInstrument
	(*EditFavoritesRequest)(nil),                                 // 76: tinvest.EditFavoritesRequest
	(*EditFavoritesRequestInstrument)(nil),                       // 77: tinvest.EditFavoritesRequestInstrument
	(*EditFavoritesResponse)(nil),                                // 78: tinvest.EditFavoritesResponse
	(*CreateFavoriteGroupRequest)(nil),                           // 79: tinvest.CreateFavoriteGroupRequest
	(*CreateFavoriteGroupResponse)(nil),                          // 80: tinvest.CreateFavoriteGroupResponse
	(*DeleteFavoriteGroupRequest)(nil),                           // 81: tinvest.DeleteFavoriteGroupRequest
	(*DeleteFavoriteGroupResponse)(nil),                          // 82: tinvest.DeleteFavoriteGroupResponse
	(*GetFavoriteGroupsRequest)(nil),                             // 83: tinvest.GetFavoriteGroupsRequest
	(*GetFavoriteGroupsResponse)(nil),                            // 84: tinvest.GetFavoriteGroupsResponse
	(*GetCountriesRequest)(nil),                                  // 85: tinvest.GetCountriesRequest
	(*GetCountriesResponse)(nil),                                 // 86: tinvest.GetCountriesResponse
	(*IndicativesRequest)(nil),                                   // 87: tinvest.IndicativesRequest
	(*IndicativesResponse)(nil),                                  // 88: tinvest.IndicativesResponse
	(*IndicativeResponse)(nil),                                   // 89: tinvest.IndicativeResponse
	(*CountryResponse)(nil),                                      // 90: tinvest.CountryResponse
	(*FindInstrumentRequest)(nil),                                // 91: tinvest.FindInstrumentRequest
	(*FindInstrumentResponse)(nil),                               // 92: tinvest.FindInstrumentResponse
	(*InstrumentShort)(nil),                                      // 93: tinvest.InstrumentShort
	(*GetBrandsRequest)(nil),                                     // 94: tinvest.GetBrandsRequest
	(*GetBrandRequest)(nil),                                      // 95: tinvest.GetBrandRequest
	(*GetBrandsResponse)(nil),                                    // 96: tinvest.GetBrandsResponse
	(*GetAssetFundamentalsRequest)(nil),                          // 97: tinvest.GetAssetFundamentalsRequest
	(*GetAssetFundamentalsResponse)(nil),                         // 98: tinvest.GetAssetFundamentalsResponse
	(*GetAssetReportsRequest)(nil),                               // 99: tinvest.GetAssetReportsRequest
	(*GetAssetReportsResponse)(nil),                              // 100: tinvest.GetAssetReportsResponse
	(*GetConsensusForecastsRequest)(nil),                         // 101: tinvest.GetConsensusForecastsRequest
	(*GetConsensusForecastsResponse)(nil),                        // 102: tinvest.GetConsensusForecastsResponse
	(*GetForecastRequest)(nil),                                   // 103: tinvest.GetForecastRequest
	(*GetForecastResponse)(nil),                                  // 104: tinvest.GetForecastResponse
	(*RiskRatesRequest)(nil),                                     // 105: tinvest.RiskRatesRequest
	(*RiskRatesResponse)(nil),                                    // 106: tinvest.RiskRatesResponse
	(*TradingInterval)(nil),                                      // 107: tinvest.TradingInterval
	(*GetBondEventsResponse_BondEvent)(nil),                      // 108: tinvest.GetBondEventsResponse.BondEvent
	(*GetFavoriteGroupsResponse_FavoriteGroup)(nil),              // 109: tinvest.GetFavoriteGroupsResponse.FavoriteGroup
	(*GetAssetFundamentalsResponse_StatisticResponse)(nil),       // 110: tinvest.GetAssetFundamentalsResponse.StatisticResponse
	(*GetAssetReportsResponse_GetAssetReportsEvent)(nil),         // 111: tinvest.GetAssetReportsResponse.GetAssetReportsEvent
	(*GetConsensusForecastsResponse_ConsensusForecastsItem)(nil), // 112: tinvest.GetConsensusForecastsResponse.ConsensusForecastsItem
	(*GetForecastResponse_TargetItem)(nil),                       // 113: tinvest.GetForecastResponse.TargetItem
	(*GetForecastResponse_ConsensusItem)(nil),                    // 114: tinvest.GetForecastResponse.ConsensusItem
	(*RiskRatesResponse_RiskRateResult)(nil),                     // 115: tinvest.RiskRatesResponse.RiskRateResult
	(*RiskRatesResponse_RiskRate)(nil),                           // 116: tinvest.RiskRatesResponse.RiskRate
	(*TradingInterval_TimeInterval)(nil),                         // 117: tinvest.TradingInterval.TimeInterval
	(*timestamppb.Timestamp)(nil),                                // 118: google.protobuf.Timestamp
	(InstrumentStatus)(0),                                        // 119: tinvest.InstrumentStatus
	(*MoneyValue)(nil),                                           // 120: tinvest.MoneyValue
	(SecurityTradingStatus)(0),                                   // 121: tinvest.SecurityTradingStatus
	(*BrandData)(nil),                                            // 122: tinvest.BrandData
	(*Quotation)(nil),                                            // 123: tinvest.Quotation
	(InstrumentType)(0),                                          // 124: tinvest.InstrumentType
	(*Page)(nil),                                                 // 125: tinvest.Page
	(*PageResponse)(nil),                                         // 126: tinvest.PageResponse
}
var file_tinvest_trb_instruments_proto_depIdxs = []int32{
	118, // 0: tinvest.TradingSchedulesRequest.from:type_name -> google.protobuf.Timestamp
	118, // 1: tinvest.TradingSchedulesRequest.to:type_name -> google.protobuf.Timestamp
	19,  // 2: tinvest.TradingSchedulesResponse.exchanges:type_name -> tinvest.TradingSchedule
	20,  // 3: tinvest.TradingSchedule.days:type_name -> tinvest.TradingDay
	118, // 4: tinvest.TradingDay.date:type_name -> google.protobuf.Timestamp
	118, // 5: tinvest.TradingDay.start_time:type_name -> google.protobuf.Timestamp
	118, // 6: tinvest.TradingDay.end_time:type_name -> google.protobuf.Timestamp
	118, // 7: tinvest.TradingDay.opening_auction_start_time:type_name -> google.protobuf.Timestamp
	118, // 8: tinvest.TradingDay.closing_auction_end_time:type_name -> google.protobuf.Timestamp
	118, // 9: tinvest.TradingDay.evening_opening_auction_start_time:type_name -> google.protobuf.Timestamp
	118, // 10: tinvest.TradingDay.evening_start_time:type_name -> google.protobuf.Timestamp
	118, // 11: tinvest.TradingDay.evening_end_time:type_name -> google.protobuf.Timestamp
	118, // 12: tinvest.TradingDay.clearing_start_time:type_name -> google.protobuf.Timestamp
	118, // 13: tinvest.TradingDay.clearing_end_time:type_name -> google.protobuf.Timestamp
	118, // 14: tinvest.TradingDay.premarket_start_time:type_name -> google.protobuf.Timestamp
	118, // 15: tinvest.TradingDay.premarket_end_time:type_name -> google.protobuf.Timestamp
	118, // 16: tinvest.TradingDay.closing_auction_start_time:type_name -> google.protobuf.Timestamp
	118, // 17: tinvest.TradingDay.opening_auction_end_time:type_name -> google.protobuf.Timestamp
	107, // 18: tinvest.TradingDay.intervals:type_name -> tinvest.TradingInterval
	5,   // 19: tinvest.InstrumentRequest.id_type:type_name -> tinvest.InstrumentIdType
	119, // 20: tinvest.InstrumentsRequest.instrument_status:type_name -> tinvest.InstrumentStatus
	14,  // 21: tinvest.InstrumentsRequest.instrument_exchange:type_name -> tinvest.InstrumentExchangeType
	42,  // 22: tinvest.BondResponse.instrument:type_name -> tinvest.Bond
	42,  // 23: tinvest.BondsResponse.instruments:type_name -> tinvest.Bond
	118, // 24: tinvest.GetBondCouponsRequest.from:type_name -> google.protobuf.Timestamp
	118, // 25: tinvest.GetBondCouponsRequest.to:type_name -> google.protobuf.Timestamp
	30,  // 26: tinvest.GetBondCouponsResponse.events:type_name -> tinvest.Coupon
	118, // 27: tinvest.GetBondEventsRequest.from:type_name -> google.protobuf.Timestamp
	118, // 28: tinvest.GetBondEventsRequest.to:type_name -> google.protobuf.Timestamp
	15,  // 29: tinvest.GetBondEventsRequest.type:type_name -> tinvest.GetBondEventsRequest.EventType
	108, // 30: tinvest.GetBondEventsResponse.events:type_name -> tinvest.GetBondEventsResponse.BondEvent
	118, // 31: tinvest.Coupon.coupon_date:type_name -> google.protobuf.Timestamp
	118, // 32: tinvest.Coupon.fix_date:type_name -> google.protobuf.Timestamp
	120, // 33: tinvest.Coupon.pay_one_bond:type_name -> tinvest.MoneyValue
	0,   // 34: tinvest.Coupon.coupon_type:type_name -> tinvest.CouponType
	118, // 35: tinvest.Coupon.coupon_start_date:type_name -> google.protobuf.Timestamp
	118, // 36: tinvest.Coupon.coupon_end_date:type_name -> google.protobuf.Timestamp
	43,  // 37: tinvest.CurrencyResponse.instrument:type_name -> tinvest.Currency
	43,  // 38: tinvest.CurrenciesResponse.instruments:type_name -> tinvest.Currency
	44,  // 39: tinvest.EtfResponse.instrument:type_name -> tinvest.Etf
	44,  // 40: tinvest.EtfsResponse.instruments:type_name -> tinvest.Etf
	45,  // 41: tinvest.FutureResponse.instrument:type_name -> tinvest.Future
	45,  // 42: tinvest.FuturesResponse.instruments:type_name -> tinvest.Future
	39,  // 43: tinvest.OptionResponse.instrument:type_name -> tinvest.Option
	39,  // 44: tinvest.OptionsResponse.instruments:type_name -> tinvest.Option
	121, // 45: tinvest.Option.trading_status:type_name -> tinvest.SecurityTradingStatus
	10,  // 46: tinvest.Option.real_exchange:type_name -> tinvest.RealExchange
	1,   // 47: tinvest.Option.direction:type_name -> tinvest.OptionDirection
	2,   // 48: tinvest.Option.payment_type:type_name -> tinvest.OptionPaymentType
	3,   // 49: tinvest.Option.style:type_name -> tinvest.OptionStyle
	4,   // 50: tinvest.Option.settlement_type:type_name -> tinvest.OptionSettlementType
	122, // 51: tinvest.Option.brand:type_name -> tinvest.BrandData
	123, // 52: tinvest.Option.basic_asset_size:type_name -> tinvest.Quotation
	123, // 53: tinvest.Option.klong:type_name -> tinvest.Quotation
	123, // 54: tinvest.Option.kshort:type_name -> tinvest.Quotation
	123, // 55: tinvest.Option.dlong:type_name -> tinvest.Quotation
	123, // 56: tinvest.Option.dshort:type_name -> tinvest.Quotation
	123, // 57: tinvest.Option.dlong_min:type_name -> tinvest.Quotation
	123, // 58: tinvest.Option.dshort_min:type_name -> tinvest.Quotation
	123, // 59: tinvest.Option.min_price_increment:type_name -> tinvest.Quotation
	120, // 60: tinvest.Option.strike_price:type_name -> tinvest.MoneyValue
	123, // 61: tinvest.Option.dlong_client:type_name -> tinvest.Quotation
	123, // 62: tinvest.Option.dshort_client:type_name -> tinvest.Quotation
	118, // 63: tinvest.Option.expiration_date:type_name -> google.protobuf.Timestamp
	118, // 64: tinvest.Option.first_trade_date:type_name -> google.protobuf.Timestamp
	118, // 65: tinvest.Option.last_trade_date:type_name -> google.protobuf.Timestamp
	118, // 66: tinvest.Option.first_1min_candle_date:type_name -> google.protobuf.Timestamp
	118, // 67: tinvest.Option.first_1day_candle_date:type_name -> google.protobuf.Timestamp
	46,  // 68: tinvest.ShareResponse.instrument:type_name -> tinvest.Share
	46,  // 69: tinvest.SharesResponse.instruments:type_name -> tinvest.Share
	123, // 70: tinvest.Bond.klong:type_name -> tinvest.Quotation
	123, // 71: tinvest.Bond.kshort:type_name -> tinvest.Quotation
	123, // 72: tinvest.Bond.dlong:type_name -> tinvest.Quotation
	123, // 73: tinvest.Bond.dshort:type_name -> tinvest.Quotation
	123, // 74: tinvest.Bond.dlong_min:type_name -> tinvest.Quotation
	123, // 75: tinvest.Bond.dshort_min:type_name -> tinvest.Quotation
	118, // 76: tinvest.Bond.maturity_date:type_name -> google.protobuf.Timestamp
	120, // 77: tinvest.Bond.nominal:type_name -> tinvest.MoneyValue
	120, // 78: tinvest.Bond.initial_nominal:type_name -> tinvest.MoneyValue
	118, // 79: tinvest.Bond.state_reg_date:type_name -> google.protobuf.Timestamp
	118, // 80: tinvest.Bond.placement_date:type_name -> google.protobuf.Timestamp
	120, // 81: tinvest.Bond.placement_price:type_name -> tinvest.MoneyValue
	120, // 82: tinvest.Bond.aci_value:type_name -> tinvest.MoneyValue
	121, // 83: tinvest.Bond.trading_status:type_name -> tinvest.SecurityTradingStatus
	123, // 84: tinvest.Bond.min_price_increment:type_name -> tinvest.Quotation
	10,  // 85: tinvest.Bond.real_exchange:type_name -> tinvest.RealExchange
	118, // 86: tinvest.Bond.first_1min_candle_date:type_name -> google.protobuf.Timestamp
	118, // 87: tinvest.Bond.first_1day_candle_date:type_name -> google.protobuf.Timestamp
	12,  // 88: tinvest.Bond.risk_level:type_name -> tinvest.RiskLevel
	122, // 89: tinvest.Bond.brand:type_name -> tinvest.BrandData
	13,  // 90: tinvest.Bond.bond_type:type_name -> tinvest.BondType
	118, // 91: tinvest.Bond.call_date:type_name -> google.protobuf.Timestamp
	123, // 92: tinvest.Bond.dlong_client:type_name -> tinvest.Quotation
	123, // 93: tinvest.Bond.dshort_client:type_name -> tinvest.Quotation
	123, // 94: tinvest.Currency.klong:type_name -> tinvest.Quotation
	123, // 95: tinvest.Currency.kshort:type_name -> tinvest.Quotation
	123, // 96: tinvest.Currency.dlong:type_name -> tinvest.Quotation
	123, // 97: tinvest.Currency.dshort:type_name -> tinvest.Quotation
	123, // 98: tinvest.Currency.dlong_min:type_name -> tinvest.Quotation
	123, // 99: tinvest.Currency.dshort_min:type_name -> tinvest.Quotation
	120, // 100: tinvest.Currency.nominal:type_name -> tinvest.MoneyValue
	121, // 101: tinvest.Currency.trading_status:type_name -> tinvest.SecurityTradingStatus
	123, // 102: tinvest.Currency.min_price_increment:type_name -> tinvest.Quotation
	10,  // 103: tinvest.Currency.real_exchange:type_name -> tinvest.RealExchange
	118, // 104: tinvest.Currency.first_1min_candle_date:type_name -> google.protobuf.Timestamp
	118, // 105: tinvest.Currency.first_1day_candle_date:type_name -> google.protobuf.Timestamp
	122, // 106: tinvest.Currency.brand:type_name -> tinvest.BrandData
	123, // 107: tinvest.Currency.dlong_client:type_name -> tinvest.Quotation
	123, // 108: tinvest.Currency.dshort_client:type_name -> tinvest.Quotation
	123, // 109: tinvest.Etf.klong:type_name -> tinvest.Quotation
	123, // 110: tinvest.Etf.kshort:type_name -> tinvest.Quotation
	123, // 111: tinvest.Etf.dlong:type_name -> tinvest.Quotation
	123, // 112: tinvest.Etf.dshort:type_name -> tinvest.Quotation
	123, // 113: tinvest.Etf.dlong_min:type_name -> tinvest.Quotation
	123, // 114: tinvest.Etf.dshort_min:type_name -> tinvest.Quotation
	123, // 115: tinvest.Etf.fixed_commission:type_name -> tinvest.Quotation
	118, // 116: tinvest.Etf.released_date:type_name -> google.protobuf.Timestamp
	123, // 117: tinvest.Etf.num_shares:type_name -> tinvest.Quotation
	121, // 118: tinvest.Etf.trading_status:type_name -> tinvest.SecurityTradingStatus
	123, // 119: tinvest.Etf.min_price_increment:type_name -> tinvest.Quotation
	10,  // 120: tinvest.Etf.real_exchange:type_name -> tinvest.RealExchange
	14,  // 121: tinvest.Etf.instrument_exchange:type_name -> tinvest.InstrumentExchangeType
	118, // 122: tinvest.Etf.first_1min_candle_date:type_name -> google.protobuf.Timestamp
	118, // 123: tinvest.Etf.first_1day_candle_date:type_name -> google.protobuf.Timestamp
	122, // 124: tinvest.Etf.brand:type_name -> tinvest.BrandData
	123, // 125: tinvest.Etf.dlong_client:type_name -> tinvest.Quotation
	123, // 126: tinvest.Etf.dshort_client:type_name -> tinvest.Quotation
	123, // 127: tinvest.Future.klong:type_name -> tinvest.Quotation
	123, // 128: tinvest.Future.kshort:type_name -> tinvest.Quotation
	123, // 129: tinvest.Future.dlong:type_name -> tinvest.Quotation
	123, // 130: tinvest.Future.dshort:type_name -> tinvest.Quotation
	123, // 131: tinvest.Future.dlong_min:type_name -> tinvest.Quotation
	123, // 132: tinvest.Future.dshort_min:type_name -> tinvest.Quotation
	118, // 133: tinvest.Future.first_trade_date:type_name -> google.protobuf.Timestamp
	118, // 134: tinvest.Future.last_trade_date:type_name -> google.protobuf.Timestamp
	123, // 135: tinvest.Future.basic_asset_size:type_name -> tinvest.Quotation
	118, // 136: tinvest.Future.expiration_date:type_name -> google.protobuf.Timestamp
	121, // 137: tinvest.Future.trading_status:type_name -> tinvest.SecurityTradingStatus
	123, // 138: tinvest.Future.min_price_increment:type_name -> tinvest.Quotation
	10,  // 139: tinvest.Future.real_exchange:type_name -> tinvest.RealExchange
	118, // 140: tinvest.Future.first_1min_candle_date:type_name -> google.protobuf.Timestamp
	118, // 141: tinvest.Future.first_1day_candle_date:type_name -> google.protobuf.Timestamp
	120, // 142: tinvest.Future.initial_margin_on_buy:type_name -> tinvest.MoneyValue
	120, // 143: tinvest.Future.initial_margin_on_sell:type_name -> tinvest.MoneyValue
	123, // 144: tinvest.Future.min_price_increment_amount:type_name -> tinvest.Quotation
	122, // 145: tinvest.Future.brand:type_name -> tinvest.BrandData
	123, // 146: tinvest.Future.dlong_client:type_name -> tinvest.Quotation
	123, // 147: tinvest.Future.dshort_client:type_name -> tinvest.Quotation
	123, // 148: tinvest.Share.klong:type_name -> tinvest.Quotation
	123, // 149: tinvest.Share.kshort:type_name -> tinvest.Quotation
	123, // 150: tinvest.Share.dlong:type_name -> tinvest.Quotation
	123, // 151: tinvest.Share.dshort:type_name -> tinvest.Quotation
	123, // 152: tinvest.Share.dlong_min:type_name -> tinvest.Quotation
	123, // 153: tinvest.Share.dshort_min:type_name -> tinvest.Quotation
	118, // 154: tinvest.Share.ipo_date:type_name -> google.protobuf.Timestamp
	120, // 155: tinvest.Share.nominal:type_name -> tinvest.MoneyValue
	121, // 156: tinvest.Share.trading_status:type_name -> tinvest.SecurityTradingStatus
	6,   // 157: tinvest.Share.share_type:type_name -> tinvest.ShareType
	123, // 158: tinvest.Share.min_price_increment:type_name -> tinvest.Quotation
	10,  // 159: tinvest.Share.real_exchange:type_name -> tinvest.RealExchange
	14,  // 160: tinvest.Share.instrument_exchange:type_name -> tinvest.InstrumentExchangeType
	118, // 161: tinvest.Share.first_1min_candle_date:type_name -> google.protobuf.Timestamp
	118, // 162: tinvest.Share.first_1day_candle_date:type_name -> google.protobuf.Timestamp
	122, // 163: tinvest.Share.brand:type_name -> tinvest.BrandData
	123, // 164: tinvest.Share.dlong_client:type_name -> tinvest.Quotation
	123, // 165: tinvest.Share.dshort_client:type_name -> tinvest.Quotation
	118, // 166: tinvest.GetAccruedInterestsRequest.from:type_name -> google.protobuf.Timestamp
	118, // 167: tinvest.GetAccruedInterestsRequest.to:type_name -> google.protobuf.Timestamp
	49,  // 168: tinvest.GetAccruedInterestsResponse.accrued_interests:type_name -> tinvest.AccruedInterest
	118, // 169: tinvest.AccruedInterest.date:type_name -> google.protobuf.Timestamp
	123, // 170: tinvest.AccruedInterest.value:type_name -> tinvest.Quotation
	123, // 171: tinvest.AccruedInterest.value_percent:type_name -> tinvest.Quotation
	123, // 172: tinvest.AccruedInterest.nominal:type_name -> tinvest.Quotation
	120, // 173: tinvest.GetFuturesMarginResponse.initial_margin_on_buy:type_name -> tinvest.MoneyValue
	120, // 174: tinvest.GetFuturesMarginResponse.initial_margin_on_sell:type_name -> tinvest.MoneyValue
	123, // 175: tinvest.GetFuturesMarginResponse.min_price_increment:type_name -> tinvest.Quotation
	123, // 176: tinvest.GetFuturesMarginResponse.min_price_increment_amount:type_name -> tinvest.Quotation
	53,  // 177: tinvest.InstrumentResponse.instrument:type_name -> tinvest.Instrument
	123, // 178: tinvest.Instrument.klong:type_name -> tinvest.Quotation
	123, // 179: tinvest.Instrument.kshort:type_name -> tinvest.Quotation
	123, // 180: tinvest.Instrument.dlong:type_name -> tinvest.Quotation
	123, // 181: tinvest.Instrument.dshort:type_name -> tinvest.Quotation
	123, // 182: tinvest.Instrument.dlong_min:type_name -> tinvest.Quotation
	123, // 183: tinvest.Instrument.dshort_min:type_name -> tinvest.Quotation
	121, // 184: tinvest.Instrument.trading_status:type_name -> tinvest.SecurityTradingStatus
	123, // 185: tinvest.Instrument.min_price_increment:type_name -> tinvest.Quotation
	10,  // 186: tinvest.Instrument.real_exchange:type_name -> tinvest.RealExchange
	124, // 187: tinvest.Instrument.instrument_kind:type_name -> tinvest.InstrumentType
	118, // 188: tinvest.Instrument.first_1min_candle_date:type_name -> google.protobuf.Timestamp
	118, // 189: tinvest.Instrument.first_1day_candle_date:type_name -> google.protobuf.Timestamp
	122, // 190: tinvest.Instrument.brand:type_name -> tinvest.BrandData
	123, // 191: tinvest.Instrument.dlong_client:type_name -> tinvest.Quotation
	123, // 192: tinvest.Instrument.dshort_client:type_name -> tinvest.Quotation
	118, // 193: tinvest.GetDividendsRequest.from:type_name -> google.protobuf.Timestamp
	118, // 194: tinvest.GetDividendsRequest.to:type_name -> google.protobuf.Timestamp
	56,  // 195: tinvest.GetDividendsResponse.dividends:type_name -> tinvest.Dividend
	120, // 196: tinvest.Dividend.dividend_net:type_name -> tinvest.MoneyValue
	118, // 197: tinvest.Dividend.payment_date:type_name -> google.protobuf.Timestamp
	118, // 198: tinvest.Dividend.declared_date:type_name -> google.protobuf.Timestamp
	118, // 199: tinvest.Dividend.last_buy_date:type_name -> google.protobuf.Timestamp
	118, // 200: tinvest.Dividend.record_date:type_name -> google.protobuf.Timestamp
	120, // 201: tinvest.Dividend.close_price:type_name -> tinvest.MoneyValue
	123, // 202: tinvest.Dividend.yield_value:type_name -> tinvest.Quotation
	118, // 203: tinvest.Dividend.created_at:type_name -> google.protobuf.Timestamp
	61,  // 204: tinvest.AssetResponse.asset:type_name -> tinvest.AssetFull
	124, // 205: tinvest.AssetsRequest.instrument_type:type_name -> tinvest.InstrumentType
	119, // 206: tinvest.AssetsRequest.instrument_status:type_name -> tinvest.InstrumentStatus
	62,  // 207: tinvest.AssetsResponse.assets:type_name -> tinvest.Asset
	7,   // 208: tinvest.AssetFull.type:type_name -> tinvest.AssetType
	118, // 209: tinvest.AssetFull.deleted_at:type_name -> google.protobuf.Timestamp
	63,  // 210: tinvest.AssetFull.currency:type_name -> tinvest.AssetCurrency
	64,  // 211: tinvest.AssetFull.security:type_name -> tinvest.AssetSecurity
	70,  // 212: tinvest.AssetFull.brand:type_name -> tinvest.Brand
	118, // 213: tinvest.AssetFull.updated_at:type_name -> google.protobuf.Timestamp
	71,  // 214: tinvest.AssetFull.instruments:type_name -> tinvest.AssetInstrument
	7,   // 215: tinvest.Asset.type:type_name -> tinvest.AssetType
	71,  // 216: tinvest.Asset.instruments:type_name -> tinvest.AssetInstrument
	124, // 217: tinvest.AssetSecurity.instrument_kind:type_name -> tinvest.InstrumentType
	65,  // 218: tinvest.AssetSecurity.share:type_name -> tinvest.AssetShare
	66,  // 219: tinvest.AssetSecurity.bond:type_name -> tinvest.AssetBond
	67,  // 220: tinvest.AssetSecurity.sp:type_name -> tinvest.AssetStructuredProduct
	68,  // 221: tinvest.AssetSecurity.etf:type_name -> tinvest.AssetEtf
	69,  // 222: tinvest.AssetSecurity.clearing_certificate:type_name -> tinvest.AssetClearingCertificate
	6,   // 223: tinvest.AssetShare.type:type_name -> tinvest.ShareType
	123, // 224: tinvest.AssetShare.issue_size:type_name -> tinvest.Quotation
	123, // 225: tinvest.AssetShare.nominal:type_name -> tinvest.Quotation
	123, // 226: tinvest.AssetShare.dividend_rate:type_name -> tinvest.Quotation
	118, // 227: tinvest.AssetShare.ipo_date:type_name -> google.protobuf.Timestamp
	118, // 228: tinvest.AssetShare.registry_date:type_name -> google.protobuf.Timestamp
	118, // 229: tinvest.AssetShare.placement_date:type_name -> google.protobuf.Timestamp
	123, // 230: tinvest.AssetShare.issue_size_plan:type_name -> tinvest.Quotation
	123, // 231: tinvest.AssetShare.total_float:type_name -> tinvest.Quotation
	123, // 232: tinvest.AssetBond.current_nominal:type_name -> tinvest.Quotation
	123, // 233: tinvest.AssetBond.issue_size:type_name -> tinvest.Quotation
	123, // 234: tinvest.AssetBond.nominal:type_name -> tinvest.Quotation
	118, // 235: tinvest.AssetBond.maturity_date:type_name -> google.protobuf.Timestamp
	118, // 236: tinvest.AssetBond.state_reg_date:type_name -> google.protobuf.Timestamp
	118, // 237: tinvest.AssetBond.placement_date:type_name -> google.protobuf.Timestamp
	123, // 238: tinvest.AssetBond.placement_price:type_name -> tinvest.Quotation
	123, // 239: tinvest.AssetBond.issue_size_plan:type_name -> tinvest.Quotation
	123, // 240: tinvest.AssetStructuredProduct.nominal:type_name -> tinvest.Quotation
	8,   // 241: tinvest.AssetStructuredProduct.type:type_name -> tinvest.StructuredProductType
	7,   // 242: tinvest.AssetStructuredProduct.asset_type:type_name -> tinvest.AssetType
	123, // 243: tinvest.AssetStructuredProduct.safety_barrier:type_name -> tinvest.Quotation
	118, // 244: tinvest.AssetStructuredProduct.maturity_date:type_name -> google.protobuf.Timestamp
	123, // 245: tinvest.AssetStructuredProduct.issue_size_plan:type_name -> tinvest.Quotation
	123, // 246: tinvest.AssetStructuredProduct.issue_size:type_name -> tinvest.Quotation
	118, // 247: tinvest.AssetStructuredProduct.placement_date:type_name -> google.protobuf.Timestamp
	123, // 248: tinvest.AssetEtf.total_expense:type_name -> tinvest.Quotation
	123, // 249: tinvest.AssetEtf.hurdle_rate:type_name -> tinvest.Quotation
	123, // 250: tinvest.AssetEtf.performance_fee:type_name -> tinvest.Quotation
	123, // 251: tinvest.AssetEtf.fixed_commission:type_name -> tinvest.Quotation
	123, // 252: tinvest.AssetEtf.buy_premium:type_name -> tinvest.Quotation
	123, // 253: tinvest.AssetEtf.sell_discount:type_name -> tinvest.Quotation
	123, // 254: tinvest.AssetEtf.num_share:type_name -> tinvest.Quotation
	118, // 255: tinvest.AssetEtf.released_date:type_name -> google.protobuf.Timestamp
	123, // 256: tinvest.AssetEtf.index_recovery_period:type_name -> tinvest.Quotation
	123, // 257: tinvest.AssetEtf.expense_commission:type_name -> tinvest.Quotation
	123, // 258: tinvest.AssetEtf.primary_index_tracking_error:type_name -> tinvest.Quotation
	118, // 259: tinvest.AssetEtf.rebalancing_dates:type_name -> google.protobuf.Timestamp
	123, // 260: tinvest.AssetEtf.nominal:type_name -> tinvest.Quotation
	123, // 261: tinvest.AssetClearingCertificate.nominal:type_name -> tinvest.Quotation
	72,  // 262: tinvest.AssetInstrument.links:type_name -> tinvest.InstrumentLink
	124, // 263: tinvest.AssetInstrument.instrument_kind:type_name -> tinvest.InstrumentType
	75,  // 264: tinvest.GetFavoritesResponse.favorite_instruments:type_name -> tinvest.FavoriteInstrument
	124, // 265: tinvest.FavoriteInstrument.instrument_kind:type_name -> tinvest.InstrumentType
	77,  // 266: tinvest.EditFavoritesRequest.instruments:type_name -> tinvest.EditFavoritesRequestInstrument
	9,   // 267: tinvest.EditFavoritesRequest.action_type:type_name -> tinvest.EditFavoritesActionType
	75,  // 268: tinvest.EditFavoritesResponse.favorite_instruments:type_name -> tinvest.FavoriteInstrument
	109, // 269: tinvest.GetFavoriteGroupsResponse.groups:type_name -> tinvest.GetFavoriteGroupsResponse.FavoriteGroup
	90,  // 270: tinvest.GetCountriesResponse.countries:type_name -> tinvest.CountryResponse
	89,  // 271: tinvest.IndicativesResponse.instruments:type_name -> tinvest.IndicativeResponse
	124, // 272: tinvest.IndicativeResponse.instrument_kind:type_name -> tinvest.InstrumentType
	124, // 273: tinvest.FindInstrumentRequest.instrument_kind:type_name -> tinvest.InstrumentType
	93,  // 274: tinvest.FindInstrumentResponse.instruments:type_name -> tinvest.InstrumentShort
	124, // 275: tinvest.InstrumentShort.instrument_kind:type_name -> tinvest.InstrumentType
	118, // 276: tinvest.InstrumentShort.first_1min_candle_date:type_name -> google.protobuf.Timestamp
	118, // 277: tinvest.InstrumentShort.first_1day_candle_date:type_name -> google.protobuf.Timestamp
	125, // 278: tinvest.GetBrandsRequest.paging:type_name -> tinvest.Page
	70,  // 279: tinvest.GetBrandsResponse.brands:type_name -> tinvest.Brand
	126, // 280: tinvest.GetBrandsResponse.paging:type_name -> tinvest.PageResponse
	110, // 281: tinvest.GetAssetFundamentalsResponse.fundamentals:type_name -> tinvest.GetAssetFundamentalsResponse.StatisticResponse
	118, // 282: tinvest.GetAssetReportsRequest.from:type_name -> google.protobuf.Timestamp
	118, // 283: tinvest.GetAssetReportsRequest.to:type_name -> google.protobuf.Timestamp
	111, // 284: tinvest.GetAssetReportsResponse.events:type_name -> tinvest.GetAssetReportsResponse.GetAssetReportsEvent
	125, // 285: tinvest.GetConsensusForecastsRequest.paging:type_name -> tinvest.Page
	112, // 286: tinvest.GetConsensusForecastsResponse.items:type_name -> tinvest.GetConsensusForecastsResponse.ConsensusForecastsItem
	126, // 287: tinvest.GetConsensusForecastsResponse.page:type_name -> tinvest.PageResponse
	113, // 288: tinvest.GetForecastResponse.targets:type_name -> tinvest.GetForecastResponse.TargetItem
	114, // 289: tinvest.GetForecastResponse.consensus:type_name -> tinvest.GetForecastResponse.ConsensusItem
	115, // 290: tinvest.RiskRatesResponse.instrument_risk_rates:type_name -> tinvest.RiskRatesResponse.RiskRateResult
	117, // 291: tinvest.TradingInterval.interval:type_name -> tinvest.TradingInterval.TimeInterval
	118, // 292: tinvest.GetBondEventsResponse.BondEvent.event_date:type_name -> google.protobuf.Timestamp
	15,  // 293: tinvest.GetBondEventsResponse.BondEvent.event_type:type_name -> tinvest.GetBondEventsRequest.EventType
	123, // 294: tinvest.GetBondEventsResponse.BondEvent.event_total_vol:type_name -> tinvest.Quotation
	118, // 295: tinvest.GetBondEventsResponse.BondEvent.fix_date:type_name -> google.protobuf.Timestamp
	118, // 296: tinvest.GetBondEventsResponse.BondEvent.rate_date:type_name -> google.protobuf.Timestamp
	118, // 297: tinvest.GetBondEventsResponse.BondEvent.default_date:type_name -> google.protobuf.Timestamp
	118, // 298: tinvest.GetBondEventsResponse.BondEvent.real_pay_date:type_name -> google.protobuf.Timestamp
	118, // 299: tinvest.GetBondEventsResponse.BondEvent.pay_date:type_name -> google.protobuf.Timestamp
	120, // 300: tinvest.GetBondEventsResponse.BondEvent.pay_one_bond:type_name -> tinvest.MoneyValue
	120, // 301: tinvest.GetBondEventsResponse.BondEvent.money_flow_val:type_name -> tinvest.MoneyValue
	123, // 302: tinvest.GetBondEventsResponse.BondEvent.value:type_name -> tinvest.Quotation
	118, // 303: tinvest.GetBondEventsResponse.BondEvent.coupon_start_date:type_name -> google.protobuf.Timestamp
	118, // 304: tinvest.GetBondEventsResponse.BondEvent.coupon_end_date:type_name -> google.protobuf.Timestamp
	123, // 305: tinvest.GetBondEventsResponse.BondEvent.coupon_interest_rate:type_name -> tinvest.Quotation
	118, // 306: tinvest.GetAssetFundamentalsResponse.StatisticResponse.ex_dividend_date:type_name -> google.protobuf.Timestamp
	118, // 307: tinvest.GetAssetFundamentalsResponse.StatisticResponse.fiscal_period_start_date:type_name -> google.protobuf.Timestamp
	118, // 308: tinvest.GetAssetFundamentalsResponse.StatisticResponse.fiscal_period_end_date:type_name -> google.protobuf.Timestamp
	118, // 309: tinvest.GetAssetReportsResponse.GetAssetReportsEvent.report_date:type_name -> google.protobuf.Timestamp
	16,  // 310: tinvest.GetAssetReportsResponse.GetAssetReportsEvent.period_type:type_name -> tinvest.GetAssetReportsResponse.AssetReportPeriodType
	118, // 311: tinvest.GetAssetReportsResponse.GetAssetReportsEvent.created_at:type_name -> google.protobuf.Timestamp
	118, // 312: tinvest.GetConsensusForecastsResponse.ConsensusForecastsItem.created_at:type_name -> google.protobuf.Timestamp
	123, // 313: tinvest.GetConsensusForecastsResponse.ConsensusForecastsItem.best_target_price:type_name -> tinvest.Quotation
	123, // 314: tinvest.GetConsensusForecastsResponse.ConsensusForecastsItem.best_target_low:type_name -> tinvest.Quotation
	123, // 315: tinvest.GetConsensusForecastsResponse.ConsensusForecastsItem.best_target_high:type_name -> tinvest.Quotation
	11,  // 316: tinvest.GetConsensusForecastsResponse.ConsensusForecastsItem.consensus:type_name -> tinvest.Recommendation
	118, // 317: tinvest.GetConsensusForecastsResponse.ConsensusForecastsItem.prognosis_date:type_name -> google.protobuf.Timestamp
	11,  // 318: tinvest.GetForecastResponse.TargetItem.recommendation:type_name -> tinvest.Recommendation
	118, // 319: tinvest.GetForecastResponse.TargetItem.recommendation_date:type_name -> google.protobuf.Timestamp
	123, // 320: tinvest.GetForecastResponse.TargetItem.current_price:type_name -> tinvest.Quotation
	123, // 321: tinvest.GetForecastResponse.TargetItem.target_price:type_name -> tinvest.Quotation
	123, // 322: tinvest.GetForecastResponse.TargetItem.price_change:type_name -> tinvest.Quotation
	123, // 323: tinvest.GetForecastResponse.TargetItem.price_change_rel:type_name -> tinvest.Quotation
	11,  // 324: tinvest.GetForecastResponse.ConsensusItem.recommendation:type_name -> tinvest.Recommendation
	123, // 325: tinvest.GetForecastResponse.ConsensusItem.current_price:type_name -> tinvest.Quotation
	123, // 326: tinvest.GetForecastResponse.ConsensusItem.consensus:type_name -> tinvest.Quotation
	123, // 327: tinvest.GetForecastResponse.ConsensusItem.min_target:type_name -> tinvest.Quotation
	123, // 328: tinvest.GetForecastResponse.ConsensusItem.max_target:type_name -> tinvest.Quotation
	123, // 329: tinvest.GetForecastResponse.ConsensusItem.price_change:type_name -> tinvest.Quotation
	123, // 330: tinvest.GetForecastResponse.ConsensusItem.price_change_rel:type_name -> tinvest.Quotation
	116, // 331: tinvest.RiskRatesResponse.RiskRateResult.short_risk_rate:type_name -> tinvest.RiskRatesResponse.RiskRate
	116, // 332: tinvest.RiskRatesResponse.RiskRateResult.long_risk_rate:type_name -> tinvest.RiskRatesResponse.RiskRate
	116, // 333: tinvest.RiskRatesResponse.RiskRateResult.short_risk_rates:type_name -> tinvest.RiskRatesResponse.RiskRate
	116, // 334: tinvest.RiskRatesResponse.RiskRateResult.long_risk_rates:type_name -> tinvest.RiskRatesResponse.RiskRate
	123, // 335: tinvest.RiskRatesResponse.RiskRate.value:type_name -> tinvest.Quotation
	118, // 336: tinvest.TradingInterval.TimeInterval.start_ts:type_name -> google.protobuf.Timestamp
	118, // 337: tinvest.TradingInterval.TimeInterval.end_ts:type_name -> google.protobuf.Timestamp
	17,  // 338: tinvest.InstrumentsService.TradingSchedules:input_type -> tinvest.TradingSchedulesRequest
	21,  // 339: tinvest.InstrumentsService.BondBy:input_type -> tinvest.InstrumentRequest
	22,  // 340: tinvest.InstrumentsService.Bonds:input_type -> tinvest.InstrumentsRequest
	26,  // 341: tinvest.InstrumentsService.GetBondCoupons:input_type -> tinvest.GetBondCouponsRequest
	28,  // 342: tinvest.InstrumentsService.GetBondEvents:input_type -> tinvest.GetBondEventsRequest
	21,  // 343: tinvest.InstrumentsService.CurrencyBy:input_type -> tinvest.InstrumentRequest
	22,  // 344: tinvest.InstrumentsService.Currencies:input_type -> tinvest.InstrumentsRequest
	21,  // 345: tinvest.InstrumentsService.EtfBy:input_type -> tinvest.InstrumentRequest
	22,  // 346: tinvest.InstrumentsService.Etfs:input_type -> tinvest.InstrumentsRequest
	21,  // 347: tinvest.InstrumentsService.FutureBy:input_type -> tinvest.InstrumentRequest
	22,  // 348: tinvest.InstrumentsService.Futures:input_type -> tinvest.InstrumentsRequest
	21,  // 349: tinvest.InstrumentsService.OptionBy:input_type -> tinvest.InstrumentRequest
	22,  // 350: tinvest.InstrumentsService.Options:input_type -> tinvest.InstrumentsRequest
	23,  // 351: tinvest.InstrumentsService.OptionsBy:input_type -> tinvest.FilterOptionsRequest
	21,  // 352: tinvest.InstrumentsService.ShareBy:input_type -> tinvest.InstrumentRequest
	22,  // 353: tinvest.InstrumentsService.Shares:input_type -> tinvest.InstrumentsRequest
	87,  // 354: tinvest.InstrumentsService.Indicatives:input_type -> tinvest.IndicativesRequest
	47,  // 355: tinvest.InstrumentsService.GetAccruedInterests:input_type -> tinvest.GetAccruedInterestsRequest
	50,  // 356: tinvest.InstrumentsService.GetFuturesMargin:input_type -> tinvest.GetFuturesMarginRequest
	21,  // 357: tinvest.InstrumentsService.GetInstrumentBy:input_type -> tinvest.InstrumentRequest
	54,  // 358: tinvest.InstrumentsService.GetDividends:input_type -> tinvest.GetDividendsRequest
	57,  // 359: tinvest.InstrumentsService.GetAssetBy:input_type -> tinvest.AssetRequest
	59,  // 360: tinvest.InstrumentsService.GetAssets:input_type -> tinvest.AssetsRequest
	73,  // 361: tinvest.InstrumentsService.GetFavorites:input_type -> tinvest.GetFavoritesRequest
	76,  // 362: tinvest.InstrumentsService.EditFavorites:input_type -> tinvest.EditFavoritesRequest
	79,  // 363: tinvest.InstrumentsService.CreateFavoriteGroup:input_type -> tinvest.CreateFavoriteGroupRequest
	81,  // 364: tinvest.InstrumentsService.DeleteFavoriteGroup:input_type -> tinvest.DeleteFavoriteGroupRequest
	83,  // 365: tinvest.InstrumentsService.GetFavoriteGroups:input_type -> tinvest.GetFavoriteGroupsRequest
	85,  // 366: tinvest.InstrumentsService.GetCountries:input_type -> tinvest.GetCountriesRequest
	91,  // 367: tinvest.InstrumentsService.FindInstrument:input_type -> tinvest.FindInstrumentRequest
	94,  // 368: tinvest.InstrumentsService.GetBrands:input_type -> tinvest.GetBrandsRequest
	95,  // 369: tinvest.InstrumentsService.GetBrandBy:input_type -> tinvest.GetBrandRequest
	97,  // 370: tinvest.InstrumentsService.GetAssetFundamentals:input_type -> tinvest.GetAssetFundamentalsRequest
	99,  // 371: tinvest.InstrumentsService.GetAssetReports:input_type -> tinvest.GetAssetReportsRequest
	101, // 372: tinvest.InstrumentsService.GetConsensusForecasts:input_type -> tinvest.GetConsensusForecastsRequest
	103, // 373: tinvest.InstrumentsService.GetForecastBy:input_type -> tinvest.GetForecastRequest
	105, // 374: tinvest.InstrumentsService.GetRiskRates:input_type -> tinvest.RiskRatesRequest
	18,  // 375: tinvest.InstrumentsService.TradingSchedules:output_type -> tinvest.TradingSchedulesResponse
	24,  // 376: tinvest.InstrumentsService.BondBy:output_type -> tinvest.BondResponse
	25,  // 377: tinvest.InstrumentsService.Bonds:output_type -> tinvest.BondsResponse
	27,  // 378: tinvest.InstrumentsService.GetBondCoupons:output_type -> tinvest.GetBondCouponsResponse
	29,  // 379: tinvest.InstrumentsService.GetBondEvents:output_type -> tinvest.GetBondEventsResponse
	31,  // 380: tinvest.InstrumentsService.CurrencyBy:output_type -> tinvest.CurrencyResponse
	32,  // 381: tinvest.InstrumentsService.Currencies:output_type -> tinvest.CurrenciesResponse
	33,  // 382: tinvest.InstrumentsService.EtfBy:output_type -> tinvest.EtfResponse
	34,  // 383: tinvest.InstrumentsService.Etfs:output_type -> tinvest.EtfsResponse
	35,  // 384: tinvest.InstrumentsService.FutureBy:output_type -> tinvest.FutureResponse
	36,  // 385: tinvest.InstrumentsService.Futures:output_type -> tinvest.FuturesResponse
	37,  // 386: tinvest.InstrumentsService.OptionBy:output_type -> tinvest.OptionResponse
	38,  // 387: tinvest.InstrumentsService.Options:output_type -> tinvest.OptionsResponse
	38,  // 388: tinvest.InstrumentsService.OptionsBy:output_type -> tinvest.OptionsResponse
	40,  // 389: tinvest.InstrumentsService.ShareBy:output_type -> tinvest.ShareResponse
	41,  // 390: tinvest.InstrumentsService.Shares:output_type -> tinvest.SharesResponse
	88,  // 391: tinvest.InstrumentsService.Indicatives:output_type -> tinvest.IndicativesResponse
	48,  // 392: tinvest.InstrumentsService.GetAccruedInterests:output_type -> tinvest.GetAccruedInterestsResponse
	51,  // 393: tinvest.InstrumentsService.GetFuturesMargin:output_type -> tinvest.GetFuturesMarginResponse
	52,  // 394: tinvest.InstrumentsService.GetInstrumentBy:output_type -> tinvest.InstrumentResponse
	55,  // 395: tinvest.InstrumentsService.GetDividends:output_type -> tinvest.GetDividendsResponse
	58,  // 396: tinvest.InstrumentsService.GetAssetBy:output_type -> tinvest.AssetResponse
	60,  // 397: tinvest.InstrumentsService.GetAssets:output_type -> tinvest.AssetsResponse
	74,  // 398: tinvest.InstrumentsService.GetFavorites:output_type -> tinvest.GetFavoritesResponse
	78,  // 399: tinvest.InstrumentsService.EditFavorites:output_type -> tinvest.EditFavoritesResponse
	80,  // 400: tinvest.InstrumentsService.CreateFavoriteGroup:output_type -> tinvest.CreateFavoriteGroupResponse
	82,  // 401: tinvest.InstrumentsService.DeleteFavoriteGroup:output_type -> tinvest.DeleteFavoriteGroupResponse
	84,  // 402: tinvest.InstrumentsService.GetFavoriteGroups:output_type -> tinvest.GetFavoriteGroupsResponse
	86,  // 403: tinvest.InstrumentsService.GetCountries:output_type -> tinvest.GetCountriesResponse
	92,  // 404: tinvest.InstrumentsService.FindInstrument:output_type -> tinvest.FindInstrumentResponse
	96,  // 405: tinvest.InstrumentsService.GetBrands:output_type -> tinvest.GetBrandsResponse
	70,  // 406: tinvest.InstrumentsService.GetBrandBy:output_type -> tinvest.Brand
	98,  // 407: tinvest.InstrumentsService.GetAssetFundamentals:output_type -> tinvest.GetAssetFundamentalsResponse
	100, // 408: tinvest.InstrumentsService.GetAssetReports:output_type -> tinvest.GetAssetReportsResponse
	102, // 409: tinvest.InstrumentsService.GetConsensusForecasts:output_type -> tinvest.GetConsensusForecastsResponse
	104, // 410: tinvest.InstrumentsService.GetForecastBy:output_type -> tinvest.GetForecastResponse
	106, // 411: tinvest.InstrumentsService.GetRiskRates:output_type -> tinvest.RiskRatesResponse
	375, // [375:412] is the sub-list for method output_type
	338, // [338:375] is the sub-list for method input_type
	338, // [338:338] is the sub-list for extension type_name
	338, // [338:338] is the sub-list for extension extendee
	0,   // [0:338] is the sub-list for field type_name
}

func init() { file_tinvest_trb_instruments_proto_init() }
func file_tinvest_trb_instruments_proto_init() {
	if File_tinvest_trb_instruments_proto != nil {
		return
	}
	file_tinvest_trb_common_proto_init()
	file_tinvest_trb_instruments_proto_msgTypes[0].OneofWrappers = []any{}
	file_tinvest_trb_instruments_proto_msgTypes[4].OneofWrappers = []any{}
	file_tinvest_trb_instruments_proto_msgTypes[5].OneofWrappers = []any{}
	file_tinvest_trb_instruments_proto_msgTypes[6].OneofWrappers = []any{}
	file_tinvest_trb_instruments_proto_msgTypes[9].OneofWrappers = []any{}
	file_tinvest_trb_instruments_proto_msgTypes[11].OneofWrappers = []any{}
	file_tinvest_trb_instruments_proto_msgTypes[37].OneofWrappers = []any{}
	file_tinvest_trb_instruments_proto_msgTypes[42].OneofWrappers = []any{}
	file_tinvest_trb_instruments_proto_msgTypes[44].OneofWrappers = []any{
		(*AssetFull_Currency)(nil),
		(*AssetFull_Security)(nil),
	}
	file_tinvest_trb_instruments_proto_msgTypes[47].OneofWrappers = []any{
		(*AssetSecurity_Share)(nil),
		(*AssetSecurity_Bond)(nil),
		(*AssetSecurity_Sp)(nil),
		(*AssetSecurity_Etf)(nil),
		(*AssetSecurity_ClearingCertificate)(nil),
	}
	file_tinvest_trb_instruments_proto_msgTypes[56].OneofWrappers = []any{}
	file_tinvest_trb_instruments_proto_msgTypes[57].OneofWrappers = []any{}
	file_tinvest_trb_instruments_proto_msgTypes[59].OneofWrappers = []any{}
	file_tinvest_trb_instruments_proto_msgTypes[60].OneofWrappers = []any{}
	file_tinvest_trb_instruments_proto_msgTypes[61].OneofWrappers = []any{}
	file_tinvest_trb_instruments_proto_msgTypes[62].OneofWrappers = []any{}
	file_tinvest_trb_instruments_proto_msgTypes[74].OneofWrappers = []any{}
	file_tinvest_trb_instruments_proto_msgTypes[82].OneofWrappers = []any{}
	file_tinvest_trb_instruments_proto_msgTypes[84].OneofWrappers = []any{}
	file_tinvest_trb_instruments_proto_msgTypes[92].OneofWrappers = []any{}
	file_tinvest_trb_instruments_proto_msgTypes[98].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_tinvest_trb_instruments_proto_rawDesc), len(file_tinvest_trb_instruments_proto_rawDesc)),
			NumEnums:      17,
			NumMessages:   101,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tinvest_trb_instruments_proto_goTypes,
		DependencyIndexes: file_tinvest_trb_instruments_proto_depIdxs,
		EnumInfos:         file_tinvest_trb_instruments_proto_enumTypes,
		MessageInfos:      file_tinvest_trb_instruments_proto_msgTypes,
	}.Build()
	File_tinvest_trb_instruments_proto = out.File
	file_tinvest_trb_instruments_proto_goTypes = nil
	file_tinvest_trb_instruments_proto_depIdxs = nil
}

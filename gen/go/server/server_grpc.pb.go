// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: server/server.proto

package trb_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ExampleService_UnaryRPCMessage_FullMethodName     = "/server.ExampleService/UnaryRPCMessage"
	ExampleService_ServerSideStream_FullMethodName    = "/server.ExampleService/ServerSideStream"
	ExampleService_ClientSideStream_FullMethodName    = "/server.ExampleService/ClientSideStream"
	ExampleService_BidirectionalStream_FullMethodName = "/server.ExampleService/BidirectionalStream"
)

// ExampleServiceClient is the client API for ExampleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExampleServiceClient interface {
	// Unary RPC (один запрос - один ответ)
	UnaryRPCMessage(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	// Server-side streaming (один запрос - поток ответов)
	ServerSideStream(ctx context.Context, in *PoliceRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PoliceStreamResponse], error)
	// Client-side streaming (поток запросов - один ответ)
	ClientSideStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ClientStreamRequest, StreamSummary], error)
	// Bidirectional streaming (двусторонний поток)
	BidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[BidirectionalMessage, BidirectionalMessage], error)
}

type exampleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExampleServiceClient(cc grpc.ClientConnInterface) ExampleServiceClient {
	return &exampleServiceClient{cc}
}

func (c *exampleServiceClient) UnaryRPCMessage(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, ExampleService_UnaryRPCMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleServiceClient) ServerSideStream(ctx context.Context, in *PoliceRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PoliceStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ExampleService_ServiceDesc.Streams[0], ExampleService_ServerSideStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PoliceRequest, PoliceStreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ExampleService_ServerSideStreamClient = grpc.ServerStreamingClient[PoliceStreamResponse]

func (c *exampleServiceClient) ClientSideStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ClientStreamRequest, StreamSummary], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ExampleService_ServiceDesc.Streams[1], ExampleService_ClientSideStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ClientStreamRequest, StreamSummary]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ExampleService_ClientSideStreamClient = grpc.ClientStreamingClient[ClientStreamRequest, StreamSummary]

func (c *exampleServiceClient) BidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[BidirectionalMessage, BidirectionalMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ExampleService_ServiceDesc.Streams[2], ExampleService_BidirectionalStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[BidirectionalMessage, BidirectionalMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ExampleService_BidirectionalStreamClient = grpc.BidiStreamingClient[BidirectionalMessage, BidirectionalMessage]

// ExampleServiceServer is the server API for ExampleService service.
// All implementations must embed UnimplementedExampleServiceServer
// for forward compatibility.
type ExampleServiceServer interface {
	// Unary RPC (один запрос - один ответ)
	UnaryRPCMessage(context.Context, *MessageRequest) (*MessageResponse, error)
	// Server-side streaming (один запрос - поток ответов)
	ServerSideStream(*PoliceRequest, grpc.ServerStreamingServer[PoliceStreamResponse]) error
	// Client-side streaming (поток запросов - один ответ)
	ClientSideStream(grpc.ClientStreamingServer[ClientStreamRequest, StreamSummary]) error
	// Bidirectional streaming (двусторонний поток)
	BidirectionalStream(grpc.BidiStreamingServer[BidirectionalMessage, BidirectionalMessage]) error
	mustEmbedUnimplementedExampleServiceServer()
}

// UnimplementedExampleServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedExampleServiceServer struct{}

func (UnimplementedExampleServiceServer) UnaryRPCMessage(context.Context, *MessageRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryRPCMessage not implemented")
}
func (UnimplementedExampleServiceServer) ServerSideStream(*PoliceRequest, grpc.ServerStreamingServer[PoliceStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ServerSideStream not implemented")
}
func (UnimplementedExampleServiceServer) ClientSideStream(grpc.ClientStreamingServer[ClientStreamRequest, StreamSummary]) error {
	return status.Errorf(codes.Unimplemented, "method ClientSideStream not implemented")
}
func (UnimplementedExampleServiceServer) BidirectionalStream(grpc.BidiStreamingServer[BidirectionalMessage, BidirectionalMessage]) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalStream not implemented")
}
func (UnimplementedExampleServiceServer) mustEmbedUnimplementedExampleServiceServer() {}
func (UnimplementedExampleServiceServer) testEmbeddedByValue()                        {}

// UnsafeExampleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExampleServiceServer will
// result in compilation errors.
type UnsafeExampleServiceServer interface {
	mustEmbedUnimplementedExampleServiceServer()
}

func RegisterExampleServiceServer(s grpc.ServiceRegistrar, srv ExampleServiceServer) {
	// If the following call pancis, it indicates UnimplementedExampleServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ExampleService_ServiceDesc, srv)
}

func _ExampleService_UnaryRPCMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServiceServer).UnaryRPCMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExampleService_UnaryRPCMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServiceServer).UnaryRPCMessage(ctx, req.(*MessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExampleService_ServerSideStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PoliceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExampleServiceServer).ServerSideStream(m, &grpc.GenericServerStream[PoliceRequest, PoliceStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ExampleService_ServerSideStreamServer = grpc.ServerStreamingServer[PoliceStreamResponse]

func _ExampleService_ClientSideStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExampleServiceServer).ClientSideStream(&grpc.GenericServerStream[ClientStreamRequest, StreamSummary]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ExampleService_ClientSideStreamServer = grpc.ClientStreamingServer[ClientStreamRequest, StreamSummary]

func _ExampleService_BidirectionalStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExampleServiceServer).BidirectionalStream(&grpc.GenericServerStream[BidirectionalMessage, BidirectionalMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ExampleService_BidirectionalStreamServer = grpc.BidiStreamingServer[BidirectionalMessage, BidirectionalMessage]

// ExampleService_ServiceDesc is the grpc.ServiceDesc for ExampleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExampleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.ExampleService",
	HandlerType: (*ExampleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnaryRPCMessage",
			Handler:    _ExampleService_UnaryRPCMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerSideStream",
			Handler:       _ExampleService_ServerSideStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientSideStream",
			Handler:       _ExampleService_ClientSideStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BidirectionalStream",
			Handler:       _ExampleService_BidirectionalStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "server/server.proto",
}

syntax = "proto3";

package trb.nats.public.contract.v1;
option go_package = "github.com/Mar1eena/trb_proto/services/trb.nats.public.contract.v1";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

service NatsService {
  // Unary RPC (один запрос - один ответ)
  rpc CreateNatsStream (StreamConfig) returns (MResponse){
    option (google.api.http) = {
      post: "/CreateNatsStream"
      body: "*"
    };
  };

}

message MRequest {
  string text = 1;
}

message MResponse {
  string reply = 1;
}

message StreamConfig {
  string name = 1;
  string description = 2;
  repeated string subjects = 3;
  RetentionPolicy retention = 4;
  int32 max_consumers = 5;
  int64 max_msgs = 6;
  int64 max_bytes = 7;
  DiscardPolicy discard = 8;
  bool discard_new_per_subject = 9;
  google.protobuf.Duration max_age = 10;
  int64 max_msgs_per_subject = 11;
  int32 max_msg_size = 12;
  StorageType storage = 13;
  int32 replicas = 14;
  bool no_ack = 15;
  google.protobuf.Duration duplicate_window = 16;
  Placement placement = 17;
  StreamSource mirror = 18;
  repeated StreamSource sources = 19;
  bool sealed = 20;
  bool deny_delete = 21;
  bool deny_purge = 22;
  bool allow_rollup = 23;
  StoreCompression compression = 24;
  uint64 first_seq = 25;
  SubjectTransformConfig subject_transform = 26;
  RePublish republish = 27;
  bool allow_direct = 28;
  bool mirror_direct = 29;
  StreamConsumerLimits consumer_limits = 30;
  map<string, string> metadata = 31;
  string template_owner = 32;
  bool allow_msg_ttl = 33;
  google.protobuf.Duration subject_delete_marker_ttl = 34;
}

enum RetentionPolicy {
  RETENTION_POLICY_UNSPECIFIED = 0;
  LIMITS_POLICY = 1;
  INTEREST_POLICY = 2;
  WORK_QUEUE_POLICY = 3;
}

enum DiscardPolicy {
  DISCARD_POLICY_UNSPECIFIED = 0;
  DISCARD_OLD = 1;
  DISCARD_NEW = 2;
}

enum StorageType {
  STORAGE_TYPE_UNSPECIFIED = 0;
  FILE = 1;
  MEMORY = 2;
}

enum StoreCompression {
  STORE_COMPRESSION_UNSPECIFIED = 0;
  NONE = 1;
  S2 = 2;
}

message Placement {
  string cluster = 1;
  repeated string tags = 2;
}

message StreamSource {
  string name = 1;
  uint64 opt_start_seq = 2;                     // соответствует OptStartSeq
  google.protobuf.Timestamp opt_start_time = 3; // изменено с Duration на Timestamp
  repeated SubjectTransformConfig subject_transforms = 4; // сделано repeated для соответствия слайсу
  string filter_subject = 5;                    // изменено с repeated на string
  ExternalStream external = 6;                  // Placement удален, так как нет в Go-структуре
  string domain = 7;                           // добавлено, но учтите json:"-"
}

message ExternalStream {
  string api = 1;
  string deliver = 2;
}

message SubjectTransformConfig {
  string Source = 1;
  string Destination = 2;
}

message RePublish {
  string src = 1;
  string dest = 2;
  bool headers_only = 3;
}

message StreamConsumerLimits {
  int64 max_ack_pending = 1;
  google.protobuf.Duration inactive_threshold = 2;
}

